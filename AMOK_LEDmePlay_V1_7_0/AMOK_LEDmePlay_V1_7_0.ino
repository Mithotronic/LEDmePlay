// Amok!
// for the LEDmePlay
//
// www.mithotronic.de
//
// Version: 1.7
// Author: Thomas Laubach (2015 - 2017)
//
// Thanks to Michael Rosskopf!
//
// Release Notes:
// V1.7.0: Support for LEDmePlay Joypad and LEDmePlayBoy (2018)
// V1.6.0: Easier game play that replaces the old versions / Bugfixes
// V1.4.2: Bugfixes
// V1.4.1: Function prototypes added, respawn strategy changed (respawn where player had been, baddies do no harm for some seconds)
// V1.4.0: Collision detection with spikes corrected. Visualization of remaining lives and shots added.
// V1.2.0: Color problem (invisible doors and keys) with newer Adafruit libraries fixed
// V1.0.0: First release
// V0.9.0: Pre-release

#include <Adafruit_GFX.h>   // Core graphics library
#include <RGBmatrixPanel.h> // Display hardware specific library
#include <Timer.h> // Enables timed events
#include <avr/pgmspace.h> // Necessary in order to maintain the maze data in program memory

// If your 32x32 matrix has the SINGLE HEADER input,
// use this pinout:
#define CLK 50  // MUST be on PORTB!
#define OE  51
#define LAT 10 // used to be 10
#define A   A0
#define B   A1
#define C   A2
#define D   A3


RGBmatrixPanel matrix(A, B, C, D, CLK, LAT, OE, false);
const int backgroundColor = matrix.Color333(0, 0, 0);

// Audio out
const int audio = 2; // used to be 2
boolean audioIsProduced; // True if an arbitrary sound is being produced, false otherwise
int *melodyPointer; // Pointer to an array that holds musical notes (frequencies) of a melody
int melodyPosition;
int melodyLength;

#define STOP 0
#define X 1 // Noise/melody names
#define XXX 2
#define PLAYER_HIT 3
#define GAMEOVER_NOISE 4
#define BONUSITEM_JINGLE 5
#define OPENING_JINGLE 6
#define ADDITIONALLIFE_JINGLE 7
#define BADDIECAUGHT_JINGLE 8

#define NOTE_B0  31
#define NOTE_C1  33
#define NOTE_CS1 35
#define NOTE_D1  37
#define NOTE_DS1 39
#define NOTE_E1  41
#define NOTE_F1  44
#define NOTE_FS1 46
#define NOTE_G1  49
#define NOTE_GS1 52
#define NOTE_A1  55
#define NOTE_AS1 58
#define NOTE_B1  62
#define NOTE_C2  65
#define NOTE_CS2 69
#define NOTE_D2  73
#define NOTE_DS2 78
#define NOTE_E2  82
#define NOTE_F2  87
#define NOTE_FS2 93
#define NOTE_G2  98
#define NOTE_GS2 104
#define NOTE_A2  110
#define NOTE_AS2 117
#define NOTE_B2  123
#define NOTE_C3  131
#define NOTE_CS3 139
#define NOTE_D3  147
#define NOTE_DS3 156
#define NOTE_E3  165
#define NOTE_F3  175
#define NOTE_FS3 185
#define NOTE_G3  196
#define NOTE_GS3 208
#define NOTE_A3  220
#define NOTE_AS3 233
#define NOTE_B3  247
#define NOTE_C4  262
#define NOTE_CS4 277
#define NOTE_D4  294
#define NOTE_DS4 311
#define NOTE_E4  330
#define NOTE_F4  349
#define NOTE_FS4 370
#define NOTE_G4  392
#define NOTE_GS4 415
#define NOTE_A4  440
#define NOTE_AS4 466
#define NOTE_B4  494
#define NOTE_C5  523
#define NOTE_CS5 554
#define NOTE_D5  587
#define NOTE_DS5 622
#define NOTE_E5  659
#define NOTE_F5  698
#define NOTE_FS5 740
#define NOTE_G5  784
#define NOTE_GS5 831
#define NOTE_A5  880
#define NOTE_AS5 932
#define NOTE_B5  988
#define NOTE_C6  1047
#define NOTE_CS6 1109
#define NOTE_D6  1175
#define NOTE_DS6 1245
#define NOTE_E6  1319
#define NOTE_F6  1397
#define NOTE_FS6 1480
#define NOTE_G6  1568
#define NOTE_GS6 1661
#define NOTE_A6  1760
#define NOTE_AS6 1865
#define NOTE_B6  1976
#define NOTE_C7  2093
#define NOTE_CS7 2217
#define NOTE_D7  2349
#define NOTE_DS7 2489
#define NOTE_E7  2637
#define NOTE_F7  2794
#define NOTE_FS7 2960
#define NOTE_G7  3136
#define NOTE_GS7 3322
#define NOTE_A7  3520
#define NOTE_AS7 3729
#define NOTE_B7  3951
#define NOTE_C8  4186
#define NOTE_CS8 4435
#define NOTE_D8  4699
#define NOTE_DS8 4978

//int additionalLifeMelody[] = { NOTE_A5, 0, NOTE_A5, NOTE_A5, NOTE_A5, 0, NOTE_A5, NOTE_A5, NOTE_A5, 0, NOTE_E5, 0, NOTE_FS5, 0, NOTE_E5, 0, NOTE_CS5, 0, NOTE_CS5, NOTE_CS5, NOTE_CS5, 0, NOTE_D5, 0, NOTE_E5, 0 };
//int bonusCollectedJingle[] = { NOTE_F4, 0, 0, NOTE_F4, 0, NOTE_F4, 0, NOTE_AS4, 0, 0, 0, 0, 0, 0, 0, 0 };
//int baddieTouchedMelody[] = { NOTE_G3, 0, NOTE_AS3, 0, NOTE_G3, 0, NOTE_AS3, 0, NOTE_G3, 0 };
//int baddieCaughtJingle[] = { NOTE_E4, NOTE_B4, NOTE_E5, NOTE_B5, NOTE_E6, NOTE_B6, 0};

// Door and key colors
#define GREEN   0
#define RED     1
#define YELLOW  2
#define VIOLET  3

// Joystick 1
int buttonU1 = 30;
int buttonD1 = 32;
int buttonL1 = 34;
int buttonR1 = 36;
int buttonFire1 = 38;
int analogX1 = 8;
int analogY1 = 9;
boolean joystick1Released = true;

// Joystick 2
int buttonU2 = 31;
int buttonD2 = 33;
int buttonL2 = 35;
int buttonR2 = 37;
int buttonFire2 = 39;
int analogX2 = 10;
int analogY2 = 11;
boolean joystick2Released = true;

// Sensitivity of analog thumb joysticks (of the LEDmePlay Joypad) in case of "digital usage" (detects movement if deviates from center position value of 512 by sensitivity value)
const int sensitivity = 192;

byte difficulty = 1;
boolean debug = false;

// Other buttons
int buttonReset = 42;
int buttonPause = 43;

// Initialize Timer object
Timer timer;

// Initialize playfield raster. This makes collision detection etc. easier.
// A playing area coded in playfield[i][] is represented as a grid of dots in raster.
// raster[x][y] == 0: position (x, y) is free; raster[x][y] > 0: there is a fence, a baddie or another object at his position.
byte raster[32][32];
byte screen[64]; // Temporary buffer for the screen data, read from FlashROM variable "playfield"

// The game begins in the entrance
byte mapID = 0;

// The whole map consists of 53 screens
const byte numRooms = 53;

const byte NUM_LIVES = 9;

// Title

// 0 - yellow
// 1 - blue
// 2 - blank
const uint8_t titleImg[] PROGMEM =
{
  2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2,
  2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2,
  2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 2, 2, 2, 2,
  2, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 2, 2, 2, 2,
  2, 0, 2, 0, 0, 0, 2, 0, 2, 2, 0, 2, 2, 0, 0, 2, 2, 2, 0, 0, 2, 0, 0, 2, 0, 0, 2, 2, 2, 2,
  0, 0, 2, 0, 0, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 0, 0, 2, 0, 2, 0, 2, 0, 0, 0, 2, 2, 2, 2,
  0, 0, 2, 2, 2, 2, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 0, 0, 2, 0, 2, 2, 0, 0, 0, 0, 2, 2, 2, 2,
  0, 0, 2, 0, 0, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 0, 0, 2, 0, 2, 0, 2, 0, 0, 0, 2, 2, 2, 2,
  0, 0, 2, 0, 0, 0, 2, 0, 2, 0, 2, 0, 2, 0, 0, 2, 2, 2, 0, 0, 2, 0, 0, 2, 0, 0, 2, 2, 2, 2,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2,
  0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
  0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
  2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
};


/*
  Coding of the playfield:
  One screen consists of sixteen blocks, four per row
  Each block has openings (0) or walls (1)in one of the four compass directions
  2- green door, 3 - red door, 4 - yellow door, 5 - violet door
  Each playfield has four rows.
  A row is coded by sixteen characters within one string
  Four characters in succession determine the contents of an 8x8 box of pixels
  First character: Northern boundary
  Second character: Eastern boundary
  Third character: Southern boundary
  Fourth character: Western boundary
  0  open space
  1  fence at the boundary
  2  green door
  3  red door
  4  yellow door
  5  violet door
*/

const uint8_t playfield[] PROGMEM =
{
  1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0,   0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,   1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0,   0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, // mapID 0
  1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0,   0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1,   0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,   0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, // mapID 1
  1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0,   0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,   0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0,   0, 0, 0, 1, 0, 4, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, // mapID 2
  0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0,   0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0,   0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0,   0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, // mapID 3
  0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0,   0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,   0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0,   0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, // mapID 4
  0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0,   0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0,   0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0,   0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, // mapID 5
  0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0,   0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, // mapID 6
  3, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0,   0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0,   0, 0, 1, 1, 0, 0, 5, 0, 0, 0, 1, 0, 0, 1, 1, 0, // mapID 7
  0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0 ,  0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0,   0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0,   0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, // mapID 8
  1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0,   0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0,   0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, // mapID 9
  1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,   0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1,   0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, // mapID 10
  1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0,   1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1,   0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, // mapID 11
  1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1,   0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0,   0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1,   1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, // mapID 12
  1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0,   0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0,   0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, // mapID 13
  1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0,   0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0,   0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1,   0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, // mapID 14
  1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0,   0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,   0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, // mapID 15
  0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0,   1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,   1, 4, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, // mapID 16
  1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0,   0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0,   1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, // mapID 17
  1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0,   1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1,   0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0,   1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, // mapID 18
  0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1,   0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1,   0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1,   0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, // mapID 19
  1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1,   1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1,   1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1,   1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, // mapID 20
  1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,   0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0,   1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 4, 1, 0, 1, // mapID 21
  1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0,   0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1,   0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, // mapID 22
  0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0,   1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1,   1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1,   0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, // mapID 23
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1,   0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0,   0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1,   0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, // mapID 24
  1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,   0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1,   0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, // mapID 25
  1, 0, 0, 1, 1, 0, 0, 0, 3, 0, 0, 0, 1, 1, 0, 0,   0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,   0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1,   0, 0, 1, 1, 1, 0, 4, 0, 1, 0, 1, 0, 0, 1, 1, 0, // mapID 26
  0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1,   1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,   1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, // mapID 27
  1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0,   1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1,   0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,   0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, // mapID 28
  1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1,   0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1,   0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, // mapID 29
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1,   0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, // mapID 30
  1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0,   0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0,   0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0,   0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, // mapID 31
  1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 2, 1, 0, 0,   0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,   0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 1, 1, 0, 0, 3, 0, 0, 0, 1, 0, 0, 1, 1, 0, // mapID 32
  0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0,   1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1,   0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, // mapID 33
  1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0,   0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0,   0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1,   0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, // mapID 34
  1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1,   0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,   1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, // mapID 35
  1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0,   0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1,   1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1,   0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 5, 0, // mapID 36
  1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1,   1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0,   1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,   0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, // mapID 37
  1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0,   0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1,   0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1,   1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, // mapID 38
  1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1,   0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1,   0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,   1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, // mapID 39
  0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0,   1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1,   1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, // mapID 40
  1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0,   0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0,   1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0,   0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, // mapID 41
  1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0,   0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0,   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1,   1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, // mapID 42
  1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0,   0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0,   0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0,   1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, // mapID 43
  1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0,   0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1,   0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, // mapID 44
  1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0,   0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,   0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0,   0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, // mapID 45
  0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0,   0, 0, 0, 0, 3, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0,   0, 0, 0, 0, 4, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0,   0, 0, 0, 0, 5, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, // mapID 46
  1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1,   0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,   0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0,   0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, // mapID 47
  1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0,   0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1,   0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,   0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, // mapID 48
  1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1,   0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0,   0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, // mapID 49
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1,   1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, // mapID 50
  1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0,   0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,   0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0,   1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, // mapID 51
  1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0,   0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,   0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,   0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, // mapID 52

};

/*
  const unsigned char sample[] PROGMEM = {
  126, 127, 128, 128, 128, 128, 128, 127, 128, 128, 128, 129, 129, 128, 127, 128, 128, 127, 126, 127, 128, 129, 128, 127, 126, 127, 128, 128, 126, 126, 127, 127, 127, 127, 127, 127, 126, 127, 129, 130, 129, 128, 126, 126, 126, 126, 127, 129, 130, 129, 127, 127, 127, 127, 128, 128, 128, 128, 127, 127, 127, 127, 127, 127, 128, 130, 131, 129, 127, 126, 126, 126, 127, 127, 128, 128, 128, 128, 127, 128, 128, 127, 127, 128, 128, 130, 130, 129, 126, 125, 127, 129, 130, 129, 128, 126, 125, 126, 129, 131, 131, 127, 123, 125, 129, 131, 130, 128, 129, 130, 130, 129, 127, 127, 128, 130, 129, 128, 126, 125, 126, 129, 131, 130, 128, 128, 128, 126, 125, 126, 128, 129, 128, 125, 125, 127, 129, 129, 129, 129, 127, 124, 123, 125, 128, 128, 126, 125, 125, 127, 129, 127, 126, 127, 128, 129, 129, 127, 124, 121, 123, 127, 130, 130, 128, 124, 122, 123, 127, 130, 131, 129, 125, 122, 122, 126, 128, 128, 128, 125, 123, 121, 118, 114, 111, 112, 113, 112, 109, 106, 107, 112, 117, 115, 111, 108, 109, 111, 112, 115, 116, 115, 112, 109, 107, 110, 114, 116, 115, 116, 117, 118, 118, 118, 117, 116, 115, 113, 110, 109, 111, 111, 111, 111, 114, 116, 115, 112, 110, 111, 113, 113, 110, 108, 110, 115, 117, 116, 114, 114, 114, 114, 113, 112, 113, 116, 116, 116, 116, 118, 119, 120, 121, 123, 124, 123, 119, 114, 112, 115, 118, 120, 122, 123, 123, 119, 116, 118, 124, 131, 130, 122, 116, 117, 123, 128, 132, 133, 131, 126, 121, 117, 117, 120, 124, 125, 123, 120, 118, 120, 125, 129, 128, 124, 120, 116, 115, 118, 123, 126, 125, 121, 117, 116, 118, 121, 122, 121, 120, 119, 121, 125, 126, 123, 119, 120, 126, 129, 125, 119, 116, 116, 118, 120, 124, 128, 127, 122, 119, 122, 128, 128, 123, 119, 120, 120, 119, 119, 124, 129, 130, 125, 119, 116, 118, 121, 123, 124, 121, 117, 117, 119, 120, 118, 118, 123, 128, 127, 120, 115, 117, 122, 124, 120, 118, 120, 123, 124, 125, 125, 123, 119, 115, 115, 118, 122, 122, 120, 120, 121, 123, 122, 122, 123, 125, 127, 127, 124, 121, 120, 120, 119, 117, 118, 124, 130, 130, 126, 123, 124, 126, 125, 124, 126, 129, 130, 129, 128, 128, 124, 118, 116, 121, 128, 130, 126, 122, 120, 118, 116, 118, 125, 130, 128, 122, 118, 119, 120, 119, 120, 122, 121, 118, 117, 121, 125, 123, 117, 115, 120, 126, 127, 124, 124, 128, 128, 124, 120, 122, 127, 129, 126, 122, 122, 124, 127, 131, 134, 137, 136, 130, 124, 123, 128, 135, 136, 130, 124, 123, 127, 130, 131, 132, 134, 135, 131, 125, 123, 125, 127, 128, 127, 128, 129, 128, 126, 125, 125, 125, 123, 120, 118, 120, 123, 127, 130, 130, 130, 129, 131, 135, 137, 134, 128, 122, 123, 128, 132, 130, 126, 125, 127, 128, 128, 130, 133, 135, 132, 126, 124, 127, 130, 131, 132, 134, 134, 129, 123, 123, 126, 129, 129, 130, 135, 139, 138, 132, 127, 128, 134, 140, 141, 135, 126, 123, 126, 131, 134, 133, 132, 129, 125, 124, 126, 127, 126, 128, 132, 133, 126, 120, 124, 137, 141, 130, 118, 119, 129, 134, 131, 126, 124, 123, 123, 127, 132, 132, 125, 119, 118, 119, 117, 115, 117, 122, 127, 131, 135, 136, 132, 128, 126, 124, 120, 120, 131, 143, 143, 132, 123, 124, 130, 133, 136, 139, 137, 126, 117, 119, 126, 129, 130, 135, 139, 132, 118, 115, 125, 132, 126, 116, 117, 124, 126, 127, 132, 133, 125, 119, 128, 139, 131, 110, 106, 128, 146, 138, 119, 117, 128, 130, 122, 122, 135, 139, 126, 115, 120, 131, 131, 122, 121, 126, 127, 121, 119, 125, 130, 129, 128, 131, 132, 129, 129, 133, 135, 131, 127, 129, 131, 126, 121, 123, 129, 129, 128, 133, 144, 145, 133, 123, 125, 132, 131, 127, 128, 134, 132, 122, 120, 128, 134, 129, 122, 122, 119, 101, 88, 108, 156, 187, 164, 109, 73, 85, 126, 165, 184, 178, 145, 103, 81, 97, 133, 156, 163, 167, 162, 128, 74, 48, 85, 154, 192, 172, 125, 95, 90, 98, 113, 136, 157, 159, 136, 103, 79, 78, 106, 149, 179, 172, 130, 84, 69, 99, 157, 202, 199, 151, 106, 105, 136, 153, 135, 113, 123, 150, 152, 115, 77, 76, 110, 143, 151, 134, 113, 103, 108, 121, 130, 130, 128, 132, 139, 141, 133, 120, 112, 117, 134, 147, 141, 120, 106, 114, 132, 140, 136, 135, 141, 143, 130, 113, 107, 116, 131, 136, 131, 124, 122, 124, 120, 112, 109, 122, 139, 142, 127, 111, 107, 113, 129, 161, 190, 176, 110, 48, 60, 139, 200, 187, 132, 95, 90, 87, 85, 112, 165, 199, 175, 113, 61, 50, 82, 143, 206, 229, 189, 113, 56, 54, 103, 166, 205, 189, 125, 62, 51, 94, 150, 179, 176, 152, 113, 75, 65, 97, 145, 169, 154, 124, 106, 111, 134, 157, 158, 131, 101, 104, 134, 156, 147, 129, 129, 137, 130, 112, 116, 151, 182, 170, 120, 72, 60, 86, 132, 170, 176, 144, 96, 67, 78, 118, 154, 156, 123, 85, 76, 105, 149, 180, 189, 186, 173, 139, 85, 47, 68, 148, 230, 244, 174, 78, 28, 47, 105, 163, 200, 207, 172, 96, 23, 9, 71, 162, 216, 207, 154, 95, 54, 45, 72, 129, 185, 198, 154, 90, 68, 108, 172, 208, 203, 174, 130, 66, 12, 32, 144, 255, 255, 185, 60, 4, 31, 98, 166, 216, 225, 173, 80, 5, 0, 65, 161, 227, 226, 161, 79, 29, 29, 74, 149, 223, 239, 171, 69, 28, 78, 160, 207, 214, 197, 146, 57, 0, 35, 158, 253, 247, 175, 107, 68, 53, 75, 141, 206, 209, 144, 64, 19, 27, 85, 173, 234, 210, 112, 22, 12, 76, 164, 226, 228, 160, 66, 30, 86, 177, 223, 217, 192, 148, 67, 0, 21, 150, 255, 255, 181, 100, 63, 53, 67, 122, 186, 186, 112, 40, 35, 80, 120, 141, 156, 160, 138, 100, 79, 91, 128, 173, 204, 195, 149, 113, 125, 152, 140, 100, 104, 168, 215, 178, 98, 63, 91, 127, 139, 151, 173, 168, 114, 48, 21, 40, 78, 121, 163, 184, 157, 96, 53, 66, 123, 187, 222, 211, 164, 123, 122, 143, 136, 94, 77, 130, 213, 234, 167, 78, 44, 68, 112, 150, 179, 189, 161, 98, 34, 9, 34, 93, 156, 193, 180, 121, 58, 37, 76, 157, 237, 255, 216, 133, 87, 112, 155, 143, 84, 60, 119, 200, 212, 156, 100, 86, 93, 96, 113, 158, 194, 170, 97, 36, 24, 50, 92, 142, 180, 178, 130, 70, 51, 96, 183, 253, 255, 193, 119, 98, 118, 114, 68, 54, 127, 226, 244, 162, 69, 45, 78, 114, 144, 179, 192, 152, 80, 31, 28, 59, 106, 157, 193, 180, 116, 49, 39, 97, 186, 255, 255, 195, 121, 103, 128, 126, 74, 40, 91, 192, 240, 190, 109, 73, 80, 95, 116, 152, 180, 164, 102, 33, 7, 41, 111, 181, 216, 193, 119, 47, 31, 85, 179, 255, 255, 208, 144, 110, 88, 57, 42, 93, 204, 255, 244, 111, 5, 0, 68, 149, 199, 202, 166, 106, 40, 0, 13, 71, 145, 206, 220, 168, 79, 18, 37, 134, 250, 255, 246, 154, 106, 111, 114, 83, 52, 87, 186, 255, 239, 145, 58, 18, 31, 88, 160, 203, 182, 103, 18, 0, 22, 85, 154, 217, 233, 173, 72, 8, 34, 139, 249, 255, 255, 203, 153, 111, 70, 35, 39, 113, 219, 255, 209, 109, 36, 19, 48, 103, 168, 215, 199, 109, 7, 0, 0, 60, 150, 237, 255, 192, 72, 0, 42, 166, 255, 255, 238, 180, 135, 101, 65, 34, 55, 147, 243, 251, 166, 66, 27, 51, 93, 128, 169, 205, 182, 93, 10, 0, 19, 76, 151, 218, 232, 166, 55, 0, 57, 187, 255, 255, 218, 154, 126, 114, 70, 16, 40, 165, 255, 255, 170, 42, 2, 43, 98, 147, 205, 230, 169, 55, 0, 0, 42, 100, 152, 198, 215, 159, 50, 0, 49, 182, 255, 255, 202, 135, 139, 161, 126, 61, 54, 125, 202, 213, 159, 109, 105, 107, 85, 80, 123, 166, 153, 95, 42, 29, 48, 70, 92, 143, 204, 202, 126, 58, 74, 162, 237, 238, 195, 183, 194, 150, 56, 13, 76, 182, 241, 220, 153, 93, 53, 30, 47, 114, 173, 169, 115, 54, 17, 25, 75, 130, 173, 199, 190, 134, 71, 62, 126, 222, 255, 243, 197, 180, 144, 61, 7, 57, 166, 229, 206, 142, 97, 70, 36, 27, 92, 182, 201, 137, 59, 17, 17, 48, 100, 162, 219, 226, 163, 83, 64, 120, 205, 255, 243, 202, 178, 143, 66, 7, 43, 141, 203, 191, 149, 126, 119, 86, 42, 55, 128, 175, 149, 90, 44, 27, 48, 97, 149, 185, 192, 158, 107, 83, 107, 167, 233, 255, 236, 204, 164, 82, 0, 0, 103, 212, 235, 181, 121, 99, 89, 66, 73, 131, 173, 147, 90, 53, 35, 33, 63, 119, 175, 192, 156, 103, 89, 118, 156, 196, 234, 248, 232, 194, 121, 35, 4, 60, 151, 210, 213, 175, 129, 90, 55, 46, 92, 156, 170, 134, 90, 51, 20, 23, 66, 135, 198, 210, 157, 95, 79, 106, 150, 195, 231, 255, 255, 221, 101, 0, 0, 74, 151, 186, 189, 178, 151, 97, 49, 65, 133, 164, 127, 78, 55, 47, 47, 61, 100, 162, 207, 185, 119, 83, 103, 149, 190, 214, 229, 243, 223, 131, 22, 0, 71, 151, 187, 185, 175, 162, 125, 66, 44, 95, 154, 150, 101, 59, 41, 42, 54, 79, 130, 194, 209, 153, 95, 96, 136, 174, 194, 216, 252, 255, 169, 30, 0, 42, 137, 178, 185, 196, 200, 162, 87, 45, 80, 131, 121, 75, 55, 53, 40, 34, 67, 138, 205, 215, 159, 108, 110, 135, 149, 163, 200, 250, 255, 205, 77, 1, 40, 122, 159, 160, 170, 187, 170, 109, 58, 82, 145, 148, 79, 24, 20, 31, 40, 67, 128, 200, 224, 171, 106, 108, 150, 161, 144, 157, 218, 255, 236, 117, 28, 53, 125, 139, 111, 116, 160, 186, 159, 110, 106, 148, 158, 105, 46, 24, 17, 19, 53, 116, 180, 212, 192, 150, 142, 165, 167, 136, 108, 113, 144, 165, 140, 98, 108, 167, 197, 170, 130, 113, 117, 120, 106, 95, 117, 147, 142, 119, 107, 99, 80, 70, 82, 114, 152, 164, 141, 119, 124, 132, 128, 124, 124, 126, 139, 152, 145, 134, 137, 142, 142, 144, 142, 132, 128, 135, 142, 148, 150, 135, 118, 119, 120, 105, 95, 101, 107, 114, 130, 138, 129, 114, 105, 106, 118, 123, 111, 112, 131, 137, 125, 128, 146, 150, 143, 139, 138, 140, 148, 155, 156, 152, 135, 119, 126, 141, 126, 100, 101, 118, 127, 128, 123, 118, 124, 132, 121, 99, 87, 82, 85, 102, 119, 126, 138, 153, 155, 148, 142, 126, 117, 139, 172, 174, 147, 126, 129, 154, 175, 165, 139, 124, 121, 121, 130, 134, 114, 94, 103, 122, 118, 95, 76, 76, 97, 114, 107, 97, 109, 125, 130, 129, 128, 131, 145, 166, 181, 191, 189, 158, 121, 124, 154, 157, 128, 107, 119, 144, 144, 111, 90, 113, 142, 133, 103, 85, 79, 76, 71, 60, 60, 88, 121, 135, 146, 171, 195, 207, 216, 232, 243, 214, 129, 40, 24, 75, 118, 127, 139, 170, 188, 168, 124, 97, 114, 135, 112, 59, 26, 24, 33, 42, 55, 87, 142, 185, 194, 198, 222, 235, 214, 190, 182, 168, 128, 78, 63, 98, 141, 143, 125, 132, 154, 147, 119, 101, 99, 100, 90, 62, 35, 34, 52, 71, 96, 127, 148, 158, 166, 179, 198, 218, 227, 226, 223, 196, 125, 57, 59, 116, 157, 151, 124, 116, 130, 139, 128, 117, 116, 104, 77, 56, 43, 30, 32, 63, 103, 133, 147, 150, 157, 180, 204, 208, 199, 196, 199, 190, 149, 86, 56, 88, 136, 145, 127, 122, 131, 132, 123, 114, 116, 121, 115, 96, 78, 62, 46, 44, 70, 109, 138, 151, 154, 160, 183, 207, 203, 184, 187, 206, 197, 141, 78, 64, 101, 132, 120, 102, 120, 151, 156, 133, 112, 111, 127, 134, 110, 72, 48, 43, 53, 78, 115, 150, 167, 162, 151, 156, 168, 160, 139, 138, 159, 169, 151, 122, 108, 121, 145, 155, 142, 124, 118, 121, 123, 117, 115, 129, 142, 124, 87, 75, 88, 95, 93, 104, 132, 152, 146, 125, 118, 130, 141, 138, 132, 133, 141, 154, 164, 159, 146, 143, 147, 142, 132, 130, 131, 130, 134, 144, 148, 132, 103, 92, 107, 119, 102, 84, 93, 114, 119, 113, 108, 107, 105, 109, 122, 136, 140, 136, 137, 152, 164, 162, 151, 139, 131, 135, 146, 148, 138, 135, 144, 146, 131, 115, 111, 113, 109, 100, 99, 106, 108, 102, 100, 104, 107, 112, 124, 133, 131, 129, 137, 150, 156, 158, 165, 175, 177, 164, 146, 136, 135, 136, 135, 131, 124, 120, 118, 107, 87, 82, 101, 121, 120, 106, 99, 100, 95, 89, 98, 118, 125, 112, 103, 119, 151, 172, 175, 177, 192, 210, 207, 169, 117, 92, 104, 123, 120, 106, 105, 118, 123, 116, 115, 128, 137, 128, 108, 93, 79, 66, 62, 78, 107, 133, 145, 146, 150, 165, 184, 191, 184, 180, 190, 192, 159, 103, 71, 86, 122, 137, 125, 110, 108, 116, 126, 131, 128, 121, 116, 111, 94, 67, 46, 48, 75, 115, 151, 171, 170, 162, 167, 184, 195, 189, 179, 171, 155, 121, 89, 81, 95, 115, 127, 128, 117, 103, 99, 109, 123, 126, 119, 111, 105, 94, 77, 65, 73, 103, 143, 173, 178, 168, 166, 180, 196, 202, 201, 197, 180, 146, 113, 99, 101, 102, 98, 98, 103, 105, 100, 98, 105, 117, 124, 122, 109, 88, 67, 54, 57, 77, 111, 145, 167, 173, 177, 186, 193, 193, 191, 191, 183, 157, 125, 107, 107, 112, 112, 112, 118, 122, 116, 104, 98, 100, 106, 112, 111, 98, 82, 71, 70, 80, 103, 132, 154, 162, 163, 165, 169, 171, 172, 176, 180, 174, 154, 134, 124, 123, 124, 125, 127, 128, 125, 119, 109, 99, 97, 105, 115, 112, 99, 87, 85, 91, 102, 113, 124, 136, 144, 147, 146, 144, 144, 149, 157, 160, 155, 149, 146, 144, 139, 135, 136, 137, 134, 125, 115, 107, 103, 102, 101, 102, 107, 113, 114, 110, 108, 113, 120, 123, 122, 124, 133, 141, 138, 132, 136, 148, 156, 156, 157, 162, 164, 157, 143, 135, 140, 146, 139, 124, 115, 116, 115, 105, 95, 99, 113, 120, 112, 101, 101, 108, 109, 105, 108, 121, 131, 129, 122, 123, 133, 143, 147, 149, 153, 153, 145, 134, 132, 139, 144, 142, 138, 138, 141, 140, 132, 126, 127, 131, 126, 114, 104, 99, 94, 91, 94, 104, 118, 126, 126, 124, 127, 133, 134, 131, 129, 128, 127, 125, 127, 130, 135, 144, 153, 161, 164, 161, 153, 146, 142, 139, 135, 132, 133, 132, 126, 116, 108, 102, 102, 105, 104, 99, 96, 100, 108, 118, 123, 120, 114, 114, 119, 121, 116, 113, 120, 137, 154, 159, 152, 147, 149, 152, 152, 151, 151, 150, 150, 148, 143, 133, 125, 119, 113, 109, 107, 105, 104, 106, 112, 116, 114, 108, 104, 105, 110, 112, 109, 109, 118, 130, 139, 144, 146, 146, 149, 154, 155, 152, 150, 152, 153, 150, 147, 143, 138, 133, 129, 128, 128, 126, 119, 110, 105, 103, 101, 98, 95, 94, 93, 96, 100, 104, 111, 122, 132, 137, 140, 143, 143, 143, 144, 146, 146, 145, 144, 146, 149, 151, 151, 151, 153, 153, 149, 145, 140, 132, 121, 114, 111, 108, 103, 98, 96, 97, 100, 103, 104, 106, 114, 124, 129, 128, 128, 128, 130, 130, 129, 130, 136, 141, 140, 139, 142, 146, 148, 151, 154, 153, 148, 143, 139, 135, 131, 126, 118, 110, 106, 105, 102, 99, 99, 102, 107, 108, 104, 100, 102, 110, 116, 119, 123, 129, 133, 135, 136, 133, 132, 136, 143, 148, 151, 154, 155, 154, 153, 152, 147, 141, 136, 134, 134, 132, 126, 118, 116, 118, 117, 111, 106, 107, 108, 108, 108, 107, 109, 114, 115, 114, 114, 120, 127, 133, 139, 144, 146, 144, 140, 137, 138, 141, 142, 139, 139, 143, 146, 145, 144, 144, 142, 138, 132, 127, 124, 122, 118, 113, 111, 113, 113, 109, 104, 104, 109, 116, 122, 123, 123, 127, 131, 132, 133, 136, 138, 136, 135, 137, 140, 143, 146, 147, 145, 146, 147, 145, 143, 142, 140, 137, 134, 130, 125, 120, 117, 111, 107, 108, 112, 113, 112, 112, 112, 111, 112, 113, 114, 115, 119, 122, 123, 126, 131, 133, 134, 135, 136, 137, 140, 142, 141, 140, 141, 143, 144, 144, 142, 136, 130, 128, 128, 126, 124, 120, 114, 111, 114, 115, 113, 110, 110, 110, 111, 113, 115, 117, 121, 125, 126, 126, 128, 129, 129, 129, 130, 131, 133, 137, 141, 143, 145, 147, 146, 145, 145, 142, 137, 132, 130, 126, 121, 115, 109, 106, 106, 108, 108, 108, 109, 109, 106, 104, 105, 107, 111, 114, 115, 117, 122, 129, 133, 134, 137, 139, 141, 145, 151, 154, 153, 151, 151, 150, 147, 143, 137, 134, 134, 133, 127, 120, 116, 113, 111, 110, 108, 103, 103, 105, 107, 108, 112, 115, 117, 120, 124, 125, 127, 133, 141, 145, 147, 147, 146, 144, 146, 149, 150, 152, 154, 153, 150, 147, 144, 140, 138, 135, 128, 117, 112, 109, 107, 105, 105, 108, 109, 110, 109, 106, 107, 113, 119, 124, 128, 133, 137, 138, 141, 143, 145, 148, 151, 155, 159, 161, 159, 157, 160, 162, 156, 148, 141, 136, 130, 123, 117, 111, 107, 105, 102, 97, 96, 98, 100, 103, 107, 111, 112, 114, 116, 116, 119, 125, 132, 139, 144, 147, 148, 148, 152, 153, 151, 153, 154, 155, 153, 151, 148, 142, 135, 130, 122, 113, 106, 102, 99, 97, 96, 96, 96, 100, 103, 102, 102, 103, 106, 112, 118, 123, 126, 132, 141, 144, 146, 149, 151, 153, 153, 154, 154, 154, 156, 155, 148, 142, 137, 133, 127, 118, 111, 106, 103, 103, 101, 98, 94, 91, 92, 97, 102, 103, 102, 106, 114, 118, 121, 124, 129, 136, 143, 147, 147, 149, 155, 158, 158, 154, 151, 149, 147, 146, 144, 137, 132, 127, 123, 119, 112, 104, 99, 100, 104, 102, 98, 96, 95, 99, 106, 111, 114, 117, 123, 129, 130, 132, 137, 141, 146, 148, 152, 155, 158, 161, 160, 158, 157, 153, 149, 146, 143, 137, 128, 121, 117, 113, 110, 103, 94, 92, 95, 97, 95, 94, 100, 106, 110, 112, 114, 120, 127, 134, 141, 145, 149, 154, 156, 158, 158, 159, 162, 164, 164, 160, 154, 150, 145, 142, 142, 137, 125, 113, 105, 104, 102, 98, 95, 93, 95, 96, 91, 87, 91, 104, 116, 120, 124, 132, 142, 150, 152, 157, 166, 172, 171, 166, 163, 165, 163, 160, 159, 154, 144, 126, 112, 105, 100, 96, 90, 84, 85, 86, 85, 81, 84, 95, 105, 108, 107, 107, 113, 123, 133, 144, 156, 168, 179, 183, 183, 179, 173, 172, 169, 161, 147, 134, 123, 111, 100, 95, 91, 87, 83, 81, 82, 84, 86, 89, 93, 101, 107, 110, 113, 121, 136, 151, 162, 173, 183, 191, 192, 182, 174, 170, 165, 156, 142, 131, 122, 109, 96, 88, 84, 84, 84, 85, 86, 87, 92, 95, 96, 101, 107, 113, 119, 124, 135, 148, 162, 176, 186, 196, 199, 191, 180, 170, 161, 151, 138, 128, 116, 104, 95, 87, 84, 84, 86, 87, 86, 87, 92, 96, 100, 106, 114, 124, 129, 134, 142, 154, 171, 185, 196, 204, 202, 191, 178, 167, 160, 151, 140, 128, 111, 95, 82, 73, 71, 73, 78, 81, 80, 81, 84, 89, 97, 106, 116, 125, 130, 135, 141, 155, 174, 192, 207, 212, 205, 192, 178, 168, 161, 155, 150, 136, 112, 89, 74, 69, 69, 72, 80, 84, 84, 82, 78, 82, 93, 105, 118, 127, 134, 139, 143, 156, 176, 196, 212, 214, 205, 190, 175, 164, 156, 152, 149, 134, 109, 84, 67, 62, 63, 71, 79, 81, 83, 82, 80, 83, 90, 105, 121, 130, 134, 133, 139, 157, 176, 195, 210, 212, 200, 179, 160, 149, 143, 143, 141, 128, 107, 83, 64, 54, 58, 70, 78, 80, 81, 81, 83, 86, 96, 114, 133, 145, 147, 144, 150, 163, 181, 203, 217, 215, 197, 171, 153, 141, 136, 137, 135, 122, 99, 72, 51, 43, 51, 64, 75, 85, 89, 87, 84, 85, 97, 118, 136, 149, 152, 155, 163, 171, 187, 209, 223, 222, 202, 177, 155, 137, 129, 128, 123, 113, 94, 71, 52, 44, 49, 61, 74, 85, 89, 89, 86, 88, 101, 122, 146, 165, 171, 176, 180, 186, 200, 215, 224, 222, 207, 186, 162, 142, 135, 132, 125, 111, 91, 71, 53, 42, 41, 48, 62, 75, 81, 82, 82, 87, 98, 115, 135, 150, 162, 175, 182, 191, 205, 218, 223, 216, 202, 186, 162, 143, 133, 128, 124, 111, 91, 71, 57, 51, 49, 50, 60, 73, 82, 83, 81, 85, 96, 115, 135, 149, 165, 178, 187, 195, 204, 211, 210, 200, 190, 176, 157, 143, 135, 132, 127, 113, 93, 73, 61, 55, 53, 57, 67, 77, 84, 87, 88, 91, 98, 114, 131, 148, 164, 174, 181, 191, 202, 209, 205, 197, 186, 168, 149, 137, 130, 125, 116, 103, 90, 78, 70, 64, 63, 71, 82, 88, 89, 90, 94, 99, 109, 124, 137, 152, 168, 180, 190, 198, 205, 206, 200, 190, 174, 154, 140, 134, 131, 125, 114, 102, 90, 80, 72, 66, 66, 73, 79, 87, 95, 100, 101, 101, 111, 126, 140, 154, 165, 176, 187, 198, 205, 202, 192, 180, 163, 147, 135, 127, 120, 112, 105, 94, 80, 68, 61, 59, 66, 75, 82, 88, 92, 95, 96, 102, 115, 129, 143, 158, 172, 183, 194, 204, 209, 204, 193, 178, 161, 147, 139, 133, 125, 116, 105, 90, 77, 70, 64, 63, 66, 71, 79, 87, 93, 95, 95, 104, 118, 129, 139, 150, 162, 176, 192, 204, 206, 200, 191, 180, 167, 153, 142, 133, 124, 116, 104, 89, 79, 72, 67, 67, 70, 76, 84, 90, 95, 97, 99, 109, 117, 124, 136, 151, 167, 182, 196, 206, 208, 202, 191, 178, 165, 156, 147, 136, 128, 121, 110, 98, 89, 80, 73, 70, 72, 81, 90, 97, 100, 98, 102, 112, 116, 121, 133, 150, 168, 182, 191, 197, 197, 193, 186, 175, 163, 154, 144, 134, 128, 117, 102, 90, 81, 76, 73, 71, 75, 81, 88, 97, 100, 99, 104, 108, 112, 122, 135, 149, 165, 180, 195, 200, 194, 188, 182, 174, 166, 154, 140, 131, 125, 114, 103, 95, 86, 79, 73, 72, 77, 82, 89, 98, 100, 103, 106, 106, 113, 127, 140, 153, 162, 173, 186, 191, 193, 193, 184, 169, 155, 141, 133, 130, 123, 110, 99, 87, 76, 67, 61, 67, 76, 83, 92, 96, 94, 98, 103, 109, 119, 128, 136, 147, 160, 179, 193, 198, 200, 196, 183, 170, 157, 144, 139, 135, 125, 114, 100, 88, 78, 69, 69, 76, 79, 84, 93, 95, 97, 100, 101, 109, 121, 133, 144, 152, 163, 180, 190, 194, 199, 193, 181, 172, 158, 147, 139, 129, 122, 113, 100, 89, 74, 65, 69, 73, 78, 89, 95, 95, 96, 96, 101, 115, 125, 134, 143, 149, 164, 179, 186, 198, 203, 199, 191, 175, 158, 144, 135, 134, 131, 120, 107, 93, 79, 74, 79, 81, 89, 101, 102, 99, 96, 97, 111, 123, 132, 141, 142, 151, 166, 176, 187, 198, 202, 196, 183, 166, 145, 134, 134, 136, 130, 116, 102, 82, 67, 68, 70, 78, 94, 98, 97, 93, 89, 97, 109, 118, 129, 138, 141, 149, 161, 167, 182, 200, 206, 202, 185, 162, 141, 131, 136, 136, 129, 121, 101, 78, 65, 66, 76, 90, 103, 103, 94, 86, 84, 94, 106, 121, 140, 142, 142, 145, 147, 161, 185, 207, 213, 201, 179, 148, 128, 130, 135, 138, 138, 120, 89, 63, 54, 59, 76, 94, 100, 97, 84, 73, 77, 88, 108, 134, 144, 139, 130, 127, 138, 164, 202, 228, 225, 202, 167, 133, 125, 139, 155, 164, 148, 110, 67, 46, 58, 79, 100, 114, 103, 82, 67, 64, 79, 107, 136, 149, 138, 119, 112, 126, 158, 204, 239, 231, 205, 173, 140, 141, 162, 175, 177, 159, 114, 68, 56, 68, 85, 105, 104, 81, 63, 56, 66, 87, 110, 125, 123, 114, 107, 109, 130, 159, 189, 211, 214, 202, 187, 174, 174, 178, 177, 176, 158, 122, 96, 85, 88, 101, 97, 90, 79, 65, 76, 86, 88, 102, 105, 105, 115, 115, 116, 131, 148, 166, 190, 202, 201, 201, 197, 187, 174, 167, 167, 159, 146, 123, 93, 90, 90, 84, 93, 85, 66, 70, 71, 80, 97, 97, 100, 104, 100, 114, 128, 132, 146, 162, 178, 198, 210, 204, 181, 163, 163, 171, 177, 158, 116, 90, 87, 95, 100, 91, 79, 66, 65, 87, 97, 90, 86, 87, 94, 112, 125, 122, 117, 122, 147, 180, 198, 208, 198, 170, 167, 173, 175, 175, 147, 114, 101, 97, 100, 89, 75, 82, 79, 76, 89, 79, 72, 84, 89, 106, 116, 108, 116, 115, 117, 149, 168, 179, 201, 200, 184, 179, 179, 176, 174, 158, 127, 111, 108, 94, 86, 88, 87, 86, 83, 76, 79, 91, 91, 93, 104, 102, 111, 125, 122, 126, 133, 153, 182, 195, 210, 209, 184, 185, 191, 176, 161, 141, 125, 121, 106, 91, 87, 82, 89, 89, 74, 83, 90, 82, 88, 94, 101, 111, 116, 123, 118, 119, 149, 171, 179, 205, 212, 183, 186, 200, 172, 163, 160, 129, 127, 119, 88, 88, 91, 88, 85, 74, 80, 93, 88, 84, 93, 97, 104, 122, 120, 114, 127, 138, 157, 176, 191, 208, 195, 186, 199, 181, 164, 161, 138, 130, 124, 94, 89, 94, 83, 81, 74, 76, 92, 82, 76, 85, 90, 108, 117, 112, 115, 122, 130, 150, 169, 178, 199, 203, 176, 189, 194, 162, 163, 154, 128, 124, 105, 95, 96, 89, 82, 68, 74, 87, 80, 76, 81, 94, 102, 110, 115, 107, 123, 135, 138, 163, 170, 188, 202, 175, 185, 195, 169, 164, 156, 137, 127, 117, 104, 96, 95, 82, 68, 76, 85, 81, 74, 82, 87, 95, 113, 106, 109, 128, 123, 134, 154, 161, 181, 192, 177, 169, 187, 181, 153, 159, 150, 124, 122, 107, 96, 93, 82, 78, 69, 79, 85, 70, 76, 87, 97, 103, 106, 120, 117, 125, 144, 148, 166, 180, 193, 184, 162, 203, 195, 152, 183, 163, 126, 144, 121, 103, 105, 96, 86, 69, 86, 95, 70, 83, 96, 88, 100, 115, 115, 115, 135, 140, 145, 169, 172, 193, 185, 160, 208, 188, 149, 194, 159, 127, 161, 121, 96, 118, 94, 73, 81, 91, 83, 80, 86, 81, 87, 104, 112, 114, 120, 135, 131, 147, 169, 165, 196, 189, 154, 198, 183, 148, 193, 164, 129, 161, 116, 86, 116, 83, 61, 89, 76, 67, 82, 70, 68, 88, 97, 101, 109, 118, 119, 128, 150, 160, 168, 197, 192, 158, 193, 196, 152, 195, 181, 124, 162, 130, 83, 122, 91, 61, 92, 75, 61, 79, 69, 58, 83, 84, 82, 107, 101, 105, 125, 124, 142, 151, 173, 176, 140, 174, 170, 126, 177, 146, 100, 153, 101, 66, 108, 56, 45, 76, 52, 48, 67, 52, 54, 75, 71, 90, 114, 101, 126, 127, 129, 161, 163, 196, 199, 168, 209, 178, 166, 212, 151, 157, 187, 107, 122, 128, 70, 97, 108, 72, 93, 91, 69, 95, 95, 86, 129, 125, 123, 152, 133, 152, 188, 172, 218, 209, 180, 224, 182, 183, 220, 152, 176, 184, 111, 138, 134, 80, 123, 113, 72, 109, 92, 74, 120, 96, 96, 145, 125, 136, 164, 136, 175, 190, 173, 224, 198, 186, 235, 179, 187, 220, 140, 170, 179, 97, 140, 126, 75, 120, 88, 69, 98, 73, 80, 107, 79, 90, 124, 107, 125, 143, 126, 164, 168, 170, 201, 177, 195, 210, 156, 191, 177, 126, 176, 141, 99, 138, 96, 85, 104, 73, 76, 89, 61, 84, 93, 62, 100, 114, 94, 140, 124, 128, 167, 157, 178, 183, 169, 202, 163, 161, 185, 133, 151, 167, 102, 116, 115, 69, 89, 90, 43, 86, 72, 39, 100, 69, 63, 129, 80, 113, 141, 100, 154, 162, 155, 196, 161, 187, 193, 147, 189, 164, 129, 178, 128, 97, 125, 83, 67, 106, 54, 55, 97, 41, 70, 96, 50, 109, 102, 86, 139, 115, 132, 172, 158, 194, 186, 175, 206, 169, 173, 189, 144, 158, 161, 112, 120, 114, 70, 100, 86, 43, 89, 61, 53, 94, 60, 84, 112, 92, 123, 126, 135, 160, 160, 191, 189, 171, 202, 174, 168, 188, 161, 157, 164, 133, 114, 116, 86, 75, 97, 49, 65, 73, 42, 83, 77, 65, 111, 97, 113, 128, 127, 159, 158, 175, 206, 168, 196, 194, 163, 191, 178, 160, 174, 143, 122, 115, 96, 78, 96, 69, 65, 78, 46, 66, 86, 56, 99, 100, 95, 129, 118, 142, 167, 158, 200, 176, 180, 194, 160, 180, 180, 153, 173, 155, 120, 124, 109, 74, 110, 80, 61, 95, 48, 59, 93, 62, 100, 111, 100, 130, 132, 140, 167, 169, 191, 187, 184, 195, 173, 180, 192, 162, 169, 170, 128, 128, 121, 80, 102, 91, 63, 87, 64, 64, 88, 75, 97, 108, 100, 124, 123, 138, 159, 164, 192, 182, 186, 204, 169, 189, 188, 158, 169, 161, 128, 133, 126, 84, 103, 94, 57, 99, 60, 67, 98, 60, 100, 102, 86, 130, 114, 141, 160, 161, 194, 182, 183, 203, 171, 185, 188, 163, 164, 171, 132, 135, 142, 89, 105, 100, 49, 101, 61, 62, 103, 61, 95, 106, 82, 133, 120, 138, 169, 157, 186, 189, 171, 202, 174, 181, 198, 169, 172, 178, 137, 133, 135, 91, 93, 102, 48, 85, 74, 52, 98, 70, 82, 107, 77, 120, 119, 125, 165, 152, 174, 186, 166, 197, 178, 178, 199, 168, 168, 169, 129, 122, 122, 87, 86, 98, 59, 79, 79, 56, 88, 73, 81, 100, 89, 115, 123, 134, 158, 163, 178, 181, 185, 193, 182, 190, 188, 164, 168, 148, 122, 120, 110, 85, 95, 86, 63, 83, 63, 60, 85, 61, 91, 93, 92, 118, 120, 136, 149, 164, 172, 171, 194, 176, 182, 185, 171, 161, 158, 141, 121, 125, 108, 89, 106, 71, 76, 79, 55, 80, 79, 72, 106, 90, 108, 116, 123, 139, 148, 169, 171, 180, 193, 177, 191, 179, 177, 164, 161, 146, 126, 134, 105, 98, 106, 68, 88, 75, 67, 86, 76, 87, 99, 89, 114, 110, 124, 144, 147, 171, 174, 175, 192, 171, 179, 177, 161, 155, 157, 132, 123, 130, 94, 100, 100, 64, 91, 66, 65, 92, 66, 92, 107, 90, 122, 132, 128, 155, 171, 164, 183, 191, 172, 185, 180, 161, 173, 155, 147, 141, 128, 118, 101, 109, 75, 82, 88, 53, 91, 82, 76, 112, 99, 116, 125, 140, 142, 157, 179, 165, 186, 185, 170, 179, 165, 164, 145, 152, 133, 115, 125, 91, 89, 93, 60, 82, 68, 63, 86, 75, 84, 109, 98, 115, 139, 130, 152, 179, 153, 193, 183, 161, 194, 155, 152, 170, 128, 136, 132, 112, 98, 113, 85, 78, 100, 69, 83, 93, 80, 104, 98, 122, 122, 138, 160, 153, 181, 186, 177, 195, 181, 172, 169, 161, 141, 146, 134, 116, 122, 104, 93, 99, 77, 86, 82, 77, 90, 88, 95, 110, 115, 128, 146, 154, 163, 186, 171, 186, 192, 159, 182, 165, 137, 157, 136, 117, 121, 111, 84, 90, 83, 62, 80, 71, 74, 89, 87, 100, 112, 120, 130, 154, 158, 164, 192, 179, 185, 195, 178, 174, 175, 160, 148, 145, 125, 111, 105, 76, 80, 70, 54, 75, 68, 65, 92, 85, 93, 110, 118, 125, 146, 158, 165, 184, 187, 187, 196, 182, 183, 175, 161, 148, 142, 117, 102, 98, 67, 73, 69, 49, 81, 61, 70, 93, 77, 91, 117, 109, 125, 165, 154, 172, 212, 175, 208, 208, 171, 200, 169, 145, 163, 118, 109, 110, 78, 72, 76, 60, 66, 72, 67, 79, 82, 81, 110, 104, 125, 161, 154, 183, 208, 194, 209, 214, 192, 188, 183, 151, 147, 132, 103, 101, 83, 63, 68, 60, 47, 66, 66, 54, 88, 77, 85, 120, 112, 148, 175, 177, 212, 220, 210, 226, 217, 186, 201, 172, 136, 158, 105, 90, 105, 47, 63, 68, 31, 66, 65, 50, 83, 85, 77, 117, 121, 127, 185, 178, 200, 250, 203, 239, 241, 181, 217, 184, 140, 163, 119, 89, 96, 63, 41, 65, 39, 42, 76, 47, 71, 92, 68, 109, 115, 124, 168, 174, 204, 229, 215, 238, 226, 195, 204, 178, 141, 150, 117, 82, 91, 56, 35, 60, 33, 41, 70, 51, 65, 88, 71, 93, 123, 125, 159, 194, 200, 228, 232, 226, 227, 201, 189, 179, 139, 132, 119, 75, 74, 64, 30, 47, 47, 34, 64, 61, 54, 87, 75, 85, 130, 130, 164, 207, 213, 232, 238, 237, 218, 199, 198, 162, 136, 139, 102, 70, 79, 52, 29, 58, 42, 40, 71, 49, 64, 80, 67, 104, 122, 143, 187, 206, 235, 236, 238, 243, 201, 195, 193, 141, 133, 141, 85, 69, 94, 39, 40, 79, 34, 57, 78, 46, 73, 76, 79, 112, 137, 170, 198, 237, 243, 235, 255, 220, 187, 194, 162, 123, 132, 124, 67, 85, 93, 30, 68, 76, 33, 70, 66, 49, 68, 80, 93, 120, 171, 187, 225, 255, 236, 255, 248, 189, 186, 170, 129, 111, 126, 97, 62, 104, 70, 38, 84, 55, 38, 62, 55, 43, 63, 97, 95, 152, 203, 201, 255, 255, 238, 255, 211, 172, 177, 136, 105, 115, 114, 72, 89, 97, 49, 69, 65, 41, 42, 37, 49, 34, 65, 108, 112, 183, 216, 234, 255, 253, 249, 229, 183, 161, 145, 124, 96, 122, 107, 71, 113, 80, 48, 78, 47, 29, 33, 34, 32, 48, 91, 107, 161, 201, 221, 255, 243, 244, 244, 176, 172, 157, 124, 127, 120, 119, 102, 103, 97, 68, 61, 49, 44, 21, 21, 49, 33, 77, 122, 130, 189, 213, 234, 247, 226, 234, 201, 169, 167, 152, 140, 134, 143, 117, 100, 114, 74, 56, 55, 36, 34, 24, 37, 49, 62, 104, 128, 160, 179, 207, 230, 203, 223, 219, 174, 189, 183, 163, 169, 164, 145, 125, 115, 91, 72, 58, 42, 49, 33, 37, 62, 54, 80, 110, 123, 149, 162, 186, 194, 197, 218, 205, 195, 208, 206, 192, 187, 180, 145, 128, 116, 78, 68, 61, 47, 46, 43, 48, 54, 60, 71, 86, 105, 115, 139, 159, 167, 201, 215, 208, 223, 228, 218, 214, 200, 172, 151, 132, 107, 87, 72, 66, 61, 47, 48, 50, 40, 50, 61, 59, 79, 102, 114, 138, 168, 193, 212, 225, 236, 239, 232, 225, 207, 176, 155, 140, 115, 99, 92, 76, 68, 60, 48, 41, 31, 36, 46, 43, 59, 83, 95, 119, 155, 175, 195, 227, 235, 231, 236, 226, 205, 182, 160, 144, 126, 116, 104, 88, 80, 71, 57, 37, 31, 37, 35, 41, 51, 64, 87, 110, 137, 161, 188, 219, 234, 234, 234, 232, 211, 189, 175, 152, 141, 135, 114, 103, 94, 83, 67, 47, 40, 37, 35, 40, 42, 54, 77, 102, 124, 155, 186, 207, 233, 234, 228, 229, 211, 197, 183, 163, 153, 138, 122, 111, 98, 85, 71, 56, 39, 34, 31, 26, 33, 39, 63, 92, 115, 156, 182, 202, 231, 237, 228, 224, 222, 208, 199, 190, 164, 149, 137, 120, 107, 84, 78, 64, 37, 35, 24, 17, 26, 34, 52, 82, 120, 151, 180, 205, 224, 242, 228, 221, 232, 214, 211, 203, 167, 151, 140, 123, 99, 85, 75, 52, 41, 25, 16, 16, 13, 34, 45, 69, 116, 138, 168, 201, 219, 230, 227, 225, 221, 223, 213, 193, 178, 146, 140, 132, 99, 97, 77, 52, 48, 29, 23, 20, 18, 33, 48, 69, 97, 132, 158, 191, 222, 216, 230, 235, 220, 232, 214, 194, 187, 158, 145, 136, 122, 103, 80, 63, 41, 37, 28, 11, 15, 22, 41, 56, 75, 113, 142, 179, 201, 208, 226, 231, 236, 230, 216, 208, 189, 174, 152, 139, 135, 104, 82, 64, 43, 38, 29, 14, 4, 19, 37, 44, 70, 100, 135, 169, 190, 210, 222, 242, 252, 239, 233, 221, 204, 186, 162, 148, 134, 114, 90, 70, 57, 45, 37, 21, 8, 16, 30, 42, 58, 88, 117, 143, 177, 199, 214, 240, 247, 238, 233, 223, 204, 191, 174, 151, 140, 123, 98, 84, 69, 52, 40, 29, 14, 10, 22, 31, 45, 67, 91, 120, 157, 194, 215, 227, 237, 232, 230, 225, 211, 206, 195, 175, 158, 136, 110, 94, 81, 52, 40, 41, 24, 19, 24, 29, 44, 60, 84, 112, 157, 209, 227, 221, 219, 224, 223, 217, 214, 204, 199, 188, 154, 117, 87, 76, 59, 29, 29, 40, 38, 37, 34, 38, 54, 78, 96, 127, 185, 235, 249, 218, 197, 210, 205, 199, 200, 188, 189, 183, 134, 74, 56, 54, 32, 22, 28, 48, 67, 64, 55, 59, 84, 114, 129, 168, 225, 255, 255, 200, 173, 183, 188, 187, 185, 185, 186, 175, 110, 43, 41, 39, 27, 28, 35, 61, 82, 74, 60, 74, 109, 134, 160, 197, 242, 255, 217, 163, 141, 154, 183, 184, 186, 194, 187, 148, 77, 36, 31, 38, 38, 33, 49, 70, 79, 68, 61, 91, 125, 156, 194, 225, 255, 232, 173, 138, 132, 162, 193, 200, 200, 205, 179, 102, 53, 34, 27, 50, 51, 49, 64, 75, 68, 60, 79, 113, 144, 184, 220, 254, 245, 189, 143, 122, 145, 178, 198, 205, 200, 191, 129, 52, 35, 31, 39, 52, 60, 60, 67, 71, 53, 61, 100, 132, 169, 205, 245, 255, 203, 150, 123, 131, 170, 195, 200, 197, 195, 154, 77, 39, 31, 51, 64, 63, 75, 70, 67, 63, 60, 85, 128, 166, 196, 228, 255, 224, 158, 120, 121, 157, 193, 210, 195, 186, 171, 99, 47, 34, 41, 73, 78, 76, 74, 70, 57, 58, 83, 114, 157, 199, 216, 247, 236, 166, 113, 96, 132, 177, 205, 205, 182, 164, 114, 51, 25, 27, 60, 78, 89, 83, 70, 66, 57, 76, 115, 148, 189, 221, 245, 251, 188, 120, 83, 104, 160, 204, 215, 191, 173, 129, 65, 36, 18, 41, 77, 92, 104, 91, 72, 59, 72, 104, 143, 180, 204, 231, 255, 214, 140, 87, 78, 128, 187, 221, 203, 177, 150, 84, 41, 29, 33, 65, 93, 112, 103, 87, 61, 58, 92, 128, 165, 194, 208, 246, 247, 171, 103, 71, 97, 159, 219, 222, 185, 156, 106, 55, 39, 39, 65, 82, 109, 121, 100, 72, 53, 70, 113, 165, 199, 212, 231, 255, 213, 140, 83, 80, 126, 192, 231, 206, 165, 117, 58, 37, 31, 51, 78, 90, 109, 107, 78, 43, 52, 86, 141, 199, 222, 221, 249, 234, 171, 109, 68, 90, 153, 217, 225, 186, 132, 62, 27, 26, 37, 68, 81, 96, 100, 94, 61, 41, 65, 114, 176, 229, 238, 242, 245, 194, 136, 87, 81, 121, 191, 229, 210, 168, 93, 29, 22, 31, 65, 85, 95, 102, 98, 80, 55, 57, 90, 153, 213, 242, 249, 252, 209, 155, 105, 81, 103, 159, 214, 219, 188, 127, 44, 12, 21, 53, 85, 94, 100, 95, 87, 62, 56, 72, 120, 189, 238, 246, 255, 233, 167, 120, 89, 95, 139, 200, 222, 203, 160, 78, 16, 11, 38, 85, 99, 103, 95, 87, 70, 60, 66, 96, 154, 219, 248, 255, 253, 192, 127, 88, 92, 126, 186, 229, 216, 179, 114, 39, 13, 22, 66, 97, 104, 102, 92, 74, 55, 60, 79, 126, 189, 235, 245, 251, 208, 146, 95, 79, 108, 160, 217, 232, 204, 144, 58, 13, 13, 48, 94, 106, 104, 91, 84, 65, 63, 77, 110, 158, 217, 244, 255, 234, 165, 108, 78, 98, 147, 205, 231, 215, 172, 90, 24, 14, 34, 82, 106, 113, 100, 90, 73, 60, 67, 97, 144, 198, 233, 248, 245, 187, 126, 81, 83, 120, 178, 221, 218, 188, 121, 35, 3, 19, 69, 107, 118, 104, 83, 74, 63, 67, 82, 122, 173, 222, 245, 255, 211, 138, 84, 71, 103, 158, 209, 213, 189, 144, 69, 16, 11, 48, 98, 123, 126, 100, 80, 61, 66, 84, 121, 168, 216, 241, 255, 242, 176, 108, 70, 85, 132, 195, 225, 207, 161, 89, 24, 8, 34, 88, 118, 124, 102, 85, 66, 62, 78, 106, 149, 199, 242, 255, 255, 198, 125, 72, 76, 122, 183, 222, 217, 181, 122, 51, 16, 16, 56, 100, 129, 120, 95, 69, 46, 57, 93, 145, 188, 226, 243, 250, 220, 157, 95, 64, 90, 153, 220, 239, 213, 149, 63, 10, 12, 50, 94, 120, 119, 93, 78, 58, 58, 72, 113, 160, 207, 241, 254, 234, 165, 99, 62, 79, 134, 203, 232, 214, 169, 97, 29, 6, 25, 66, 101, 123, 111, 89, 58, 44, 57, 95, 154, 197, 229, 237, 240, 194, 133, 81, 72, 105, 175, 233, 242, 203, 129, 44, 3, 15, 65, 103, 121, 110, 90, 70, 55, 66, 86, 131, 173, 217, 240, 250, 221, 153, 93, 71, 102, 164, 227, 245, 218, 153, 73, 20, 12, 44, 85, 111, 116, 100, 85, 57, 56, 72, 118, 165, 206, 232, 239, 225, 173, 119, 81, 91, 139, 203, 239, 233, 184, 99, 30, 6, 32, 76, 109, 119, 100, 82, 61, 53, 68, 101, 153, 189, 222, 236, 235, 190, 135, 88, 80, 116, 181, 229, 234, 201, 126, 50, 13, 29, 71, 103, 116, 104, 83, 68, 54, 67, 84, 136, 178, 218, 235, 242, 203, 142, 89, 73, 95, 153, 206, 223, 203, 148, 75, 29, 20, 57, 89, 111, 108, 95, 78, 60, 66, 85, 126, 180, 219, 244, 246, 225, 163, 109, 74, 86, 127, 187, 213, 212, 167, 96, 37, 15, 36, 76, 101, 104, 86, 76, 58, 63, 84, 117, 166, 208, 245, 255, 252, 199, 132, 84, 79, 120, 180, 217, 215, 185, 113, 56, 24, 33, 58, 83, 90, 80, 70, 58, 45, 61, 85, 141, 188, 231, 252, 253, 210, 151, 102, 86, 111, 166, 213, 221, 208, 151, 85, 42, 37, 58, 82, 96, 91, 75, 63, 45, 58, 76, 123, 172, 214, 236, 246, 218, 162, 109, 87, 97, 145, 200, 223, 212, 172, 103, 60, 40, 62, 81, 97, 94, 85, 76, 61, 62, 81, 107, 160, 202, 233, 241, 228, 173, 118, 86, 93, 127, 181, 210, 206, 176, 114, 66, 41, 48, 69, 85, 89, 82, 81, 70, 62, 77, 99, 144, 191, 228, 243, 234, 193, 138, 102, 97, 125, 169, 205, 208, 194, 138, 85, 49, 46, 61, 82, 90, 84, 76, 72, 60, 74, 93, 132, 171, 208, 229, 233, 202, 151, 105, 89, 106, 151, 195, 207, 198, 157, 99, 63, 54, 66, 77, 86, 80, 73, 73, 68, 74, 90, 120, 162, 200, 225, 233, 210, 160, 111, 90, 96, 129, 171, 191, 188, 167, 119, 80, 59, 67, 78, 87, 86, 78, 75, 70, 79, 100, 128, 164, 200, 222, 234, 227, 193, 142, 110, 101, 119, 152, 182, 184, 171, 128, 91, 62, 64, 73, 80, 73, 62, 58, 59, 66, 91, 117, 151, 185, 214, 230, 233, 212, 171, 132, 113, 119, 139, 164, 171, 170, 141, 108, 79, 69, 70, 76, 72, 59, 47, 47, 46, 69, 97, 137, 168, 199, 216, 230, 222, 201, 165, 143, 132, 143, 159, 171, 173, 161, 128, 103, 83, 81, 77, 76, 61, 46, 39, 39, 52, 80, 115, 153, 180, 201, 214, 218, 206, 186, 165, 152, 147, 157, 161, 165, 163, 145, 121, 102, 91, 84, 74, 64, 44, 35, 25, 33, 50, 81, 115, 147, 167, 186, 197, 202, 192, 186, 177, 173, 171, 175, 171, 173, 162, 149, 128, 116, 105, 94, 79, 62, 49, 40, 35, 47, 63, 88, 114, 135, 150, 164, 176, 179, 178, 178, 179, 179, 183, 182, 185, 177, 171, 157, 144, 129, 117, 98, 79, 59, 51, 38, 42, 47, 63, 78, 99, 115, 131, 143, 158, 161, 167, 168, 175, 177, 181, 183, 183, 176, 171, 159, 150, 136, 124, 105, 86, 71, 61, 54, 55, 59, 67, 74, 86, 100, 113, 128, 141, 150, 157, 165, 176, 184, 193, 198, 199, 193, 186, 180, 169, 155, 140, 120, 102, 87, 78, 70, 65, 64, 63, 62, 69, 77, 89, 98, 109, 117, 125, 137, 152, 167, 181, 191, 198, 195, 193, 191, 184, 173, 160, 142, 125, 112, 103, 92, 81, 75, 67, 64, 63, 69, 75, 79, 84, 90, 97, 110, 127, 146, 159, 177, 185, 190, 193, 198, 196, 192, 183, 173, 160, 152, 142, 132, 118, 105, 93, 82, 73, 74, 72, 69, 65, 64, 66, 77, 96, 114, 131, 145, 154, 159, 165, 172, 179, 181, 180, 179, 177, 173, 169, 160, 147, 134, 125, 110, 102, 94, 86, 73, 64, 58, 57, 65, 79, 92, 105, 113, 120, 123, 131, 142, 156, 163, 170, 174, 176, 175, 177, 176, 171, 169, 164, 156, 148, 140, 129, 115, 103, 91, 86, 83, 86, 90, 92, 93, 95, 97, 100, 111, 122, 128, 135, 139, 139, 139, 144, 148, 154, 161, 165, 167, 164, 161, 154, 146, 137, 132, 128, 121, 119, 114, 106, 100, 98, 95, 96, 101, 102, 103, 104, 107, 107, 108, 110, 114, 121, 130, 140, 146, 146, 147, 147, 147, 150, 159, 160, 161, 160, 157, 150, 145, 140, 135, 133, 131, 127, 121, 112, 106, 99, 94, 90, 94, 95, 99, 106, 110, 111, 114, 117, 119, 126, 136, 143, 148, 151, 151, 149, 151, 153, 160, 164, 166, 165, 156, 143, 133, 124, 112, 106, 103, 98, 96, 95, 92, 89, 91, 93, 98, 104, 111, 119, 123, 126, 130, 135, 139, 148, 158, 162, 166, 166, 162, 157, 156, 154, 148, 146, 143, 140, 136, 131, 123, 115, 108, 106, 106, 105, 105, 107, 105, 106, 109, 111, 113, 120, 125, 130, 133, 136, 135, 134, 134, 135, 137, 139, 139, 138, 135, 133, 132, 131, 132, 135, 136, 134, 132, 129, 123, 118, 115, 111, 111, 113, 117, 117, 117, 118, 120, 121, 123, 123, 122, 119, 120, 118, 119, 121, 124, 124, 128, 134, 140, 141, 143, 143, 143, 143, 143, 142, 142, 144, 149, 147, 145, 142, 139, 133, 128, 124, 120, 117, 116, 113, 108, 105, 104, 101, 101, 106, 112, 115, 116, 117, 118, 121, 125, 128, 132, 139, 146, 148, 148, 148, 149, 149, 151, 153, 155, 156, 154, 147, 137, 130, 125, 118, 112, 108, 106, 103, 100, 98, 97, 98, 103, 107, 113, 120, 127, 128, 126, 127, 132, 136, 140, 143, 146, 149, 154, 155, 152, 150, 148, 145, 142, 141, 139, 134, 128, 123, 119, 118, 117, 117, 114, 113, 113, 111, 106, 103, 104, 107, 110, 115, 118, 122, 128, 131, 130, 129, 129, 130, 128, 128, 129, 129, 128, 128, 127, 128, 131, 134, 134, 134, 134, 133, 130, 129, 131, 134, 138, 139, 137, 134, 133, 132, 128, 124, 122, 120, 116, 111, 109, 110, 112, 114, 114, 113, 116, 121, 125, 128, 132, 135, 136, 137, 139, 139, 140, 141, 140, 140, 142, 142, 136, 130, 128, 131, 133, 134, 131, 125, 119, 115, 111, 109, 111, 115, 118, 118, 119, 119, 118, 121, 125, 129, 134, 136, 133, 126, 122, 123, 124, 126, 130, 134, 135, 135, 133, 131, 132, 135, 137, 137, 140, 142, 141, 138, 136, 136, 137, 137, 134, 129, 124, 122, 121, 119, 117, 118, 116, 113, 115, 119, 121, 121, 117, 112, 112, 115, 118, 120, 126, 132, 136, 138, 139, 142, 146, 150, 152, 152, 148, 147, 149, 147, 144, 142, 133, 125, 121, 118, 116, 114, 106, 98, 96, 99, 105, 110, 113, 115, 116, 115, 116, 121, 127, 132, 139, 141, 141, 145, 150, 155, 160, 163, 160, 154, 147, 139, 135, 136, 136, 132, 125, 116, 109, 105, 103, 106, 109, 107, 105, 106, 105, 108, 114, 115, 114, 117, 119, 120, 122, 121, 122, 127, 131, 137, 142, 149, 157, 158, 155, 151, 146, 141, 138, 138, 140, 136, 128, 120, 111, 107, 109, 109, 108, 109, 107, 104, 102, 102, 105, 111, 117, 120, 119, 118, 121, 124, 129, 136, 143, 149, 153, 158, 165, 166, 163, 158, 150, 147, 145, 140, 135, 130, 121, 113, 106, 102, 99, 95, 95, 95, 93, 94, 97, 99, 104, 109, 117, 125, 128, 129, 131, 131, 136, 143, 150, 158, 165, 167, 169, 169, 165, 157, 149, 144, 139, 133, 127, 120, 113, 105, 100, 99, 96, 93, 92, 94, 99, 106, 110, 113, 118, 121, 125, 130, 134, 137, 137, 138, 141, 140, 141, 148, 154, 163, 170, 169, 163, 149, 134, 127, 123, 123, 127, 126, 123, 119, 106, 99, 97, 96, 101, 105, 105, 106, 102, 101, 109, 116, 122, 128, 128, 126, 125, 124, 127, 132, 136, 143, 151, 160, 169, 172, 170, 164, 153, 143, 138, 133, 130, 126, 124, 123, 118, 112, 109, 103, 97, 95, 96, 99, 101, 103, 106, 111, 117, 118, 120, 126, 131, 136, 141, 142, 143, 144, 147, 160, 171, 176, 177, 169, 154, 144, 135, 130, 129, 126, 124, 120, 110, 101, 94, 93, 98, 100, 101, 104, 103, 103, 106, 114, 126, 131, 131, 133, 135, 136, 140, 144, 149, 154, 156, 160, 164, 167, 168, 163, 157, 149, 137, 131, 128, 124, 124, 122, 115, 110, 102, 99, 106, 111, 115, 121, 122, 121, 119, 120, 126, 129, 129, 130, 129, 131, 131, 128, 133, 141, 144, 152, 159, 160, 161, 155, 146, 145, 142, 138, 141, 138, 130, 124, 113, 103, 101, 103, 106, 109, 108, 104, 105, 111, 113, 116, 122, 122, 118, 115, 114, 121, 131, 136, 142, 150, 152, 151, 153, 159, 164, 166, 160, 145, 134, 129, 124, 126, 128, 116, 105, 95, 80, 81, 89, 92, 100, 104, 102, 112, 116, 112, 115, 119, 123, 131, 133, 135, 138, 138, 141, 149, 162, 174, 175, 171, 165, 151, 137, 126, 119, 122, 125, 120, 114, 95, 74, 67, 71, 84, 102, 112, 112, 108, 103, 107, 121, 133, 140, 144, 146, 144, 138, 134, 135, 141, 152, 162, 172, 175, 165, 154, 144, 137, 134, 129, 123, 120, 113, 105, 99, 89, 83, 84, 89, 101, 111, 111, 108, 105, 103, 107, 118, 129, 133, 133, 131, 129, 129, 131, 138, 154, 170, 176, 179, 173, 160, 150, 145, 145, 149, 143, 130, 114, 98, 86, 82, 84, 93, 101, 109, 115, 109, 102, 96, 92, 105, 119, 126, 136, 133, 119, 116, 117, 129, 157, 177, 193, 204, 193, 175, 161, 150, 153, 160, 159, 153, 131, 101, 79, 65, 64, 76, 87, 99, 102, 96, 94, 90, 91, 104, 116, 125, 130, 120, 105, 100, 105, 115, 133, 154, 170, 177, 181, 181, 177, 172, 163, 155, 151, 141, 129, 115, 94, 79, 74, 70, 74, 81, 85, 92, 95, 95, 102, 111, 121, 132, 136, 133, 121, 109, 106, 109, 122, 142, 148, 153, 167, 174, 183, 195, 191, 177, 162, 144, 134, 133, 129, 116, 98, 83, 76, 79, 91, 101, 108, 113, 109, 105, 111, 123, 136, 144, 140, 128, 108, 94, 97, 110, 126, 142, 151, 156, 165, 185, 204, 207, 200, 184, 153, 135, 133, 124, 117, 109, 86, 77, 86, 93, 102, 112, 112, 113, 119, 121, 125, 135, 140, 134, 128, 121, 109, 105, 113, 124, 137, 150, 158, 169, 190, 215, 231, 227, 205, 172, 140, 126, 125, 120, 111, 92, 70, 68, 86, 108, 122, 128, 133, 136, 135, 135, 130, 123, 131, 137, 133, 128, 115, 100, 98, 112, 139, 164, 175, 182, 189, 203, 220, 217, 199, 173, 139, 124, 119, 99, 86, 74, 54, 68, 102, 116, 126, 129, 125, 139, 152, 146, 136, 117, 101, 108, 111, 100, 94, 86, 86, 105, 131, 150, 158, 162, 172, 193, 218, 226, 199, 160, 127, 107, 106, 104, 80, 62, 54, 52, 76, 103, 105, 112, 127, 136, 150, 148, 121, 101, 86, 80, 92, 91, 72, 63, 69, 90, 117, 137, 155, 161, 167, 194, 211, 214, 213, 179, 139, 127, 113, 97, 76, 43, 42, 62, 68, 92, 108, 97, 121, 152, 151, 156, 145, 108, 93, 77, 60, 72, 65, 46, 64, 87, 103, 130, 148, 154, 174, 197, 204, 203, 206, 194, 157, 132, 123, 100, 79, 61, 40, 52, 77, 77, 91, 113, 118, 146, 165, 143, 138, 138, 107, 90, 79, 57, 64, 68, 54, 79, 110, 122, 147, 157, 164, 193, 199, 198, 217, 215, 205, 185, 142, 129, 123, 87, 77, 81, 78, 96, 97, 93, 132, 152, 158, 181, 166, 150, 159, 123, 82, 85, 82, 83, 91, 80, 90, 119, 134, 151, 168, 184, 204, 204, 204, 218, 220, 211, 183, 146, 142, 129, 87, 80, 87, 81, 97, 105, 108, 143, 160, 154, 166, 163, 155, 156, 118, 86, 97, 90, 80, 92, 89, 100, 143, 150, 138, 158, 177, 180, 191, 205, 210, 212, 201, 166, 141, 147, 133, 100, 103, 115, 108, 115, 122, 124, 145, 153, 138, 144, 147, 126, 110, 93, 76, 83, 99, 100, 106, 124, 142, 155, 156, 151, 161, 171, 160, 154, 162, 163, 174, 173, 136, 130, 146, 114, 99, 126, 125, 122, 133, 123, 128, 142, 126, 127, 138, 121, 109, 95, 70, 73, 82, 84, 100, 108, 113, 133, 144, 141, 146, 153, 149, 138, 146, 162, 168, 181, 169, 131, 139, 146, 105, 109, 130, 108, 114, 124, 104, 124, 133, 106, 128, 139, 103, 99, 95, 68, 76, 83, 81, 97, 104, 116, 143, 144, 142, 148, 137, 129, 137, 149, 159, 168, 174, 157, 136, 153, 148, 114, 129, 144, 119, 117, 120, 109, 118, 116, 112, 132, 119, 97, 101, 88, 77, 90, 92, 96, 113, 123, 138, 152, 155, 155, 152, 145, 140, 142, 155, 158, 164, 173, 150, 142, 159, 130, 115, 150, 140, 117, 132, 123, 115, 124, 111, 112, 123, 104, 96, 96, 83, 84, 86, 88, 106, 112, 123, 146, 143, 138, 148, 139, 125, 128, 141, 150, 158, 173, 167, 144, 154, 153, 121, 136, 154, 123, 118, 123, 108, 114, 106, 92, 115, 111, 86, 100, 94, 74, 93, 99, 91, 110, 122, 125, 140, 138, 134, 149, 139, 120, 142, 160, 156, 178, 181, 147, 150, 160, 122, 119, 147, 129, 111, 121, 114, 107, 106, 98, 103, 108, 97, 93, 92, 87, 92, 99, 107, 114, 121, 135, 145, 142, 138, 139, 142, 130, 122, 146, 164, 168, 183, 168, 150, 170, 153, 122, 147, 150, 123, 130, 121, 107, 123, 107, 95, 119, 107, 86, 99, 93, 84, 99, 103, 105, 119, 128, 136, 141, 135, 135, 146, 140, 126, 143, 167, 168, 179, 179, 152, 158, 163, 126, 128, 149, 124, 115, 119, 102, 112, 116, 91, 107, 113, 79, 87, 101, 78, 85, 106, 100, 114, 133, 128, 135, 145, 135, 140, 146, 134, 140, 158, 165, 178, 176, 153, 161, 169, 142, 135, 146, 134, 123, 115, 103, 109, 113, 100, 99, 105, 99, 92, 90, 93, 95, 93, 103, 118, 123, 127, 133, 136, 137, 142, 143, 137, 144, 161, 165, 173, 176, 156, 157, 169, 144, 136, 149, 133, 129, 129, 103, 107, 122, 98, 94, 109, 100, 94, 97, 93, 96, 98, 100, 111, 123, 127, 127, 130, 135, 134, 135, 137, 139, 159, 174, 169, 175, 175, 161, 166, 161, 139, 142, 141, 127, 122, 106, 96, 107, 97, 85, 95, 94, 90, 94, 87, 86, 98, 100, 103, 115, 125, 126, 123, 127, 132, 135, 137, 143, 160, 172, 170, 171, 167, 160, 165, 156, 137, 140, 139, 125, 121, 110, 104, 111, 106, 102, 103, 93, 102, 105, 82, 92, 109, 99, 112, 127, 116, 126, 133, 117, 126, 143, 141, 149, 163, 170, 177, 174, 166, 171, 176, 165, 155, 151, 143, 133, 122, 107, 103, 108, 103, 98, 100, 96, 99, 102, 91, 91, 101, 104, 110, 116, 114, 117, 120, 118, 124, 135, 147, 157, 161, 170, 181, 172, 164, 171, 171, 162, 157, 151, 141, 137, 127, 112, 109, 111, 101, 92, 95, 97, 93, 93, 97, 92, 89, 100, 106, 101, 106, 112, 109, 120, 131, 129, 146, 165, 164, 171, 182, 176, 176, 175, 162, 166, 162, 136, 134, 140, 119, 108, 112, 97, 87, 90, 76, 73, 88, 86, 82, 88, 90, 97, 103, 99, 108, 114, 113, 128, 136, 138, 160, 172, 171, 185, 187, 183, 188, 174, 167, 173, 153, 136, 139, 126, 116, 114, 99, 99, 100, 80, 76, 83, 77, 80, 86, 84, 97, 108, 105, 114, 126, 124, 126, 136, 145, 155, 164, 175, 188, 190, 185, 187, 182, 173, 169, 157, 144, 142, 124, 105, 108, 99, 85, 90, 86, 77, 80, 75, 72, 80, 83, 90, 98, 102, 118, 128, 123, 133, 144, 144, 155, 166, 173, 187, 193, 189, 189, 184, 177, 172, 156, 145, 146, 130, 107, 106, 105, 88, 84, 90, 83, 78, 79, 73, 77, 88, 90, 96, 106, 113, 123, 123, 130, 149, 151, 156, 177, 180, 185, 197, 184, 183, 190, 167, 158, 162, 140, 131, 126, 101, 100, 100, 78, 82, 88, 75, 77, 76, 68, 80, 85, 84, 100, 111, 116, 123, 124, 135, 145, 147, 161, 174, 180, 194, 191, 183, 193, 182, 159, 162, 154, 132, 132, 121, 102, 105, 99, 82, 85, 89, 81, 77, 79, 81, 83, 84, 89, 99, 108, 114, 119, 128, 141, 144, 153, 165, 168, 182, 188, 176, 186, 194, 169, 164, 170, 144, 134, 133, 110, 104, 108, 89, 84, 90, 79, 76, 76, 71, 82, 86, 82, 97, 107, 103, 112, 116, 123, 137, 144, 158, 172, 180, 193, 188, 185, 196, 186, 169, 178, 165, 148, 151, 127, 114, 122, 95, 87, 95, 79, 77, 83, 70, 79, 90, 81, 92, 105, 105, 115, 114, 123, 134, 134, 150, 160, 169, 189, 191, 186, 204, 193, 171, 184, 159, 141, 156, 126, 109, 128, 104, 81, 98, 83, 67, 81, 71, 67, 84, 85, 82, 96, 106, 106, 115, 125, 131, 140, 156, 155, 165, 191, 181, 178, 205, 187, 173, 193, 166, 145, 167, 134, 110, 131, 106, 86, 101, 82, 77, 86, 72, 72, 84, 78, 82, 94, 99, 108, 118, 124, 132, 137, 156, 152, 158, 186, 176, 173, 198, 177, 168, 185, 153, 145, 162, 123, 121, 127, 97, 96, 102, 70, 79, 86, 59, 73, 82, 72, 90, 95, 98, 108, 116, 115, 127, 139, 150, 159, 169, 183, 178, 184, 189, 170, 185, 180, 155, 165, 150, 125, 127, 112, 99, 105, 97, 87, 98, 83, 77, 88, 69, 84, 93, 86, 103, 108, 112, 121, 126, 138, 151, 155, 170, 184, 174, 194, 188, 171, 186, 166, 153, 158, 132, 128, 125, 101, 101, 107, 83, 91, 100, 76, 86, 95, 74, 90, 95, 92, 99, 109, 111, 114, 128, 138, 147, 166, 178, 183, 191, 200, 177, 191, 180, 158, 171, 149, 131, 134, 116, 101, 104, 105, 88, 103, 94, 85, 92, 82, 86, 90, 92, 103, 100, 111, 113, 116, 129, 140, 146, 164, 178, 174, 191, 193, 176, 193, 173, 161, 161, 135, 127, 120, 106, 97, 105, 92, 84, 101, 77, 85, 93, 79, 92, 94, 93, 97, 105, 107, 117, 128, 136, 154, 159, 170, 179, 181, 190, 183, 185, 183, 167, 164, 155, 134, 128, 119, 101, 93, 100, 82, 85, 93, 83, 89, 87, 86, 89, 88, 100, 96, 112, 116, 125, 134, 142, 152, 162, 175, 173, 188, 192, 176, 190, 170, 162, 153, 134, 123, 113, 105, 97, 95, 94, 85, 93, 79, 85, 88, 82, 94, 94, 97, 105, 101, 114, 115, 132, 142, 153, 168, 177, 182, 184, 192, 185, 187, 187, 164, 165, 144, 127, 116, 107, 100, 93, 94, 88, 88, 86, 86, 88, 89, 97, 93, 93, 100, 99, 101, 118, 123, 136, 158, 153, 172, 181, 178, 191, 191, 189, 188, 178, 163, 146, 135, 118, 105, 97, 96, 88, 83, 89, 82, 80, 94, 82, 92, 99, 94, 101, 107, 106, 119, 126, 131, 152, 158, 164, 187, 178, 196, 197, 189, 195, 184, 166, 161, 140, 120, 117, 96, 85, 89, 74, 79, 74, 80, 80, 87, 92, 93, 102, 99, 107, 106, 113, 130, 127, 154, 155, 169, 180, 178, 192, 190, 192, 194, 178, 173, 155, 133, 119, 108, 88, 90, 84, 68, 83, 74, 68, 91, 76, 93, 104, 95, 111, 114, 112, 123, 134, 134, 155, 165, 165, 192, 188, 194, 204, 190, 188, 179, 157, 146, 134, 112, 108, 90, 85, 79, 68, 76, 68, 74, 84, 82, 94, 99, 104, 106, 117, 115, 128, 133, 141, 158, 164, 179, 187, 187, 198, 186, 184, 179, 168, 154, 151, 127, 113, 106, 83, 74, 78, 63, 72, 76, 75, 83, 89, 91, 103, 107, 119, 121, 129, 136, 139, 147, 162, 163, 180, 185, 186, 192, 186, 187, 182, 173, 168, 146, 133, 112, 96, 77, 79, 67, 63, 75, 62, 69, 79, 79, 95, 111, 117, 122, 140, 128, 138, 147, 148, 164, 170, 179, 179, 184, 186, 178, 182, 176, 166, 154, 139, 116, 99, 87, 71, 69, 61, 63, 61, 62, 72, 76, 94, 110, 111, 131, 132, 134, 143, 151, 158, 171, 183, 179, 189, 193, 180, 192, 179, 177, 169, 152, 136, 117, 99, 83, 77, 68, 59, 65, 58, 61, 65, 80, 86, 109, 116, 125, 142, 141, 146, 161, 167, 173, 182, 180, 178, 189, 173, 177, 173, 167, 156, 143, 131, 107, 95, 84, 71, 69, 57, 63, 53, 63, 71, 76, 105, 113, 122, 142, 139, 148, 149, 159, 168, 175, 185, 176, 186, 190, 171, 175, 175, 160, 149, 147, 120, 108, 101, 73, 76, 70, 58, 63, 65, 66, 78, 93, 104, 121, 130, 135, 147, 149, 151, 170, 178, 182, 194, 174, 189, 182, 155, 166, 155, 142, 137, 127, 110, 94, 93, 63, 71, 71, 57, 72, 71, 74, 90, 93, 110, 122, 129, 137, 151, 146, 160, 179, 176, 198, 195, 176, 203, 173, 158, 165, 146, 129, 129, 118, 90, 97, 85, 61, 86, 72, 74, 85, 79, 87, 96, 100, 112, 121, 129, 140, 148, 146, 167, 179, 185, 202, 193, 189, 199, 169, 161, 159, 133, 120, 122, 102, 83, 91, 72, 63, 76, 64, 72, 79, 78, 90, 100, 109, 120, 122, 133, 143, 138, 148, 169, 176, 190, 203, 187, 197, 192, 161, 170, 154, 124, 122, 118, 97, 81, 94, 69, 75, 88, 70, 88, 91, 89, 96, 102, 114, 105, 120, 128, 132, 143, 161, 180, 193, 214, 204, 195, 205, 162, 159, 156, 125, 110, 108, 105, 77, 91, 87, 67, 103, 82, 88, 96, 93, 97, 86, 108, 98, 104, 126, 119, 140, 149, 170, 175, 201, 206, 184, 205, 174, 152, 163, 139, 120, 103, 114, 84, 84, 100, 64, 91, 95, 84, 103, 96, 110, 96, 111, 112, 98, 133, 127, 138, 158, 173, 181, 189, 216, 182, 198, 191, 139, 155, 140, 113, 92, 101, 87, 72, 108, 78, 84, 107, 84, 101, 102, 107, 99, 107, 117, 87, 114, 125, 125, 157, 172, 185, 189, 212, 185, 179, 197, 144, 137, 145, 123, 98, 92, 96, 68, 99, 96, 80, 109, 94, 89, 100, 107, 102, 103, 122, 102, 107, 122, 127, 148, 177, 192, 194, 216, 203, 174, 191, 166, 134, 136, 137, 115, 96, 96, 80, 86, 104, 92, 101, 109, 95, 85, 92, 96, 92, 105, 112, 109, 123, 134, 137, 163, 184, 176, 188, 187, 158, 154, 156, 135, 124, 136, 139, 130, 124, 116, 107, 119, 117, 102, 109, 100, 86, 80, 77, 93, 98, 106, 117, 120, 134, 132, 135, 154, 152, 156, 161, 154, 150, 160, 166, 155, 156, 163, 163, 159, 142, 131, 126, 125, 112, 102, 96, 87, 87, 71, 80, 102, 94, 106, 112, 113, 121, 121, 130, 131, 138, 141, 136, 143, 139, 155, 167, 156, 160, 166, 170, 165, 156, 149, 146, 143, 127, 113, 97, 94, 83, 65, 86, 84, 74, 86, 84, 86, 95, 109, 120, 131, 141, 142, 156, 161, 163, 189, 196, 185, 187, 180, 174, 170, 149, 140, 137, 125, 116, 101, 97, 93, 77, 78, 88, 74, 63, 77, 78, 80, 96, 111, 132, 141, 140, 149, 167, 170, 176, 198, 186, 184, 181, 156, 167, 151, 134, 135, 117, 110, 96, 95, 96, 86, 80, 81, 90, 69, 70, 89, 90, 109, 110, 129, 144, 135, 140, 147, 168, 173, 194, 199, 183, 199, 167, 164, 170, 138, 147, 126, 114, 104, 82, 91, 82, 80, 74, 83, 83, 66, 90, 90, 105, 120, 116, 144, 143, 144, 155, 165, 175, 186, 198, 172, 180, 171, 142, 158, 134, 133, 137, 108, 106, 94, 84, 82, 84, 80, 90, 103, 80, 91, 102, 100, 113, 111, 124, 134, 134, 139, 152, 161, 167, 198, 180, 175, 191, 166, 176, 162, 140, 149, 127, 105, 90, 86, 80, 79, 82, 86, 116, 100, 88, 100, 95, 106, 103, 109, 126, 132, 135, 148, 167, 164, 191, 202, 178, 186, 169, 160, 155, 126, 124, 116, 104, 94, 88, 93, 97, 91, 87, 114, 112, 90, 90, 86, 100, 104, 106, 121, 136, 143, 143, 167, 169, 178, 197, 176, 180, 166, 153, 153, 124, 130, 131, 114, 109, 103, 102, 103, 105, 82, 99, 124, 99, 100, 91, 95, 115, 104, 113, 125, 133, 137, 154, 169, 170, 200, 180, 165, 177, 150, 155, 134, 109, 130, 122, 107, 98, 101, 103, 108, 104, 89, 120, 114, 95, 95, 76, 91, 96, 96, 117, 131, 144, 156, 184, 181, 192, 201, 152, 156, 156, 147, 153, 116, 121, 131, 122, 112, 106, 124, 113, 111, 102, 100, 118, 88, 83, 82, 83, 99, 90, 116, 131, 138, 154, 162, 183, 183, 200, 177, 139, 159, 152, 167, 151, 115, 134, 124, 114, 103, 115, 131, 100, 95, 81, 86, 93, 60, 67, 82, 107, 112, 109, 137, 136, 149, 165, 176, 196, 208, 207, 152, 125, 129, 124, 141, 129, 132, 153, 149, 133, 122, 141, 115, 78, 73, 56, 69, 69, 57, 75, 107, 134, 135, 145, 148, 145, 158, 170, 196, 213, 222, 182, 109, 94, 97, 104, 120, 151, 189, 182, 153, 108, 100, 96, 46, 49, 73, 92, 106, 89, 98, 108, 116, 126, 129, 136, 132, 143, 153, 174, 210, 228, 226, 143, 65, 79, 103, 116, 134, 190, 229, 185, 98, 49, 69, 55, 37, 86, 136, 169, 131, 75, 88, 88, 85, 113, 141, 151, 162, 170, 168, 189, 200, 216, 203, 90, 28, 78, 129, 148, 170, 211, 227, 156, 25, 4, 59, 56, 82, 141, 191, 193, 94, 27, 49, 76, 97, 147, 184, 176, 171, 147, 139, 164, 168, 209, 199, 86, 45, 100, 149, 164, 178, 193, 191, 113, 0, 4, 81, 102, 134, 179, 209, 167, 44, 0, 29, 88, 140, 188, 200, 177, 147, 111, 112, 155, 187, 232, 221, 99, 47, 90, 122, 149, 165, 188, 188, 113, 20, 16, 93, 126, 138, 174, 181, 140, 29, 0, 42, 109, 181, 211, 185, 153, 120, 95, 96, 160, 213, 244, 237, 97, 23, 68, 105, 150, 177, 201, 201, 131, 34, 0, 72, 130, 152, 181, 169, 144, 47, 0, 35, 102, 179, 219, 170, 129, 118, 102, 101, 166, 224, 247, 250, 114, 0, 46, 107, 165, 201, 199, 203, 143, 30, 0, 35, 134, 181, 195, 163, 128, 50, 0, 15, 102, 178, 249, 195, 128, 110, 90, 94, 149, 218, 246, 255, 165, 1, 16, 97, 168, 213, 193, 196, 152, 43, 0, 2, 127, 200, 209, 169, 111, 49, 0, 3, 106, 174, 255, 225, 132, 85, 65, 84, 139, 215, 255, 255, 219, 32, 0, 58, 149, 215, 206, 198, 172, 77, 0, 0, 86, 192, 215, 190, 119, 59, 0, 0, 86, 150, 229, 242, 152, 79, 50, 82, 131, 195, 250, 255, 249, 90, 0, 11, 123, 210, 226, 209, 187, 115, 26, 0, 28, 168, 223, 219, 147, 73, 26, 0, 38, 108, 198, 255, 198, 105, 53, 75, 115, 153, 218, 248, 255, 161, 0, 0, 87, 191, 238, 224, 198, 148, 71, 0, 0, 115, 216, 235, 182, 95, 54, 11, 5, 70, 170, 255, 231, 132, 52, 50, 90, 120, 186, 240, 255, 225, 69, 0, 35, 140, 220, 237, 209, 168, 112, 14, 0, 57, 188, 236, 215, 128, 68, 29, 0, 34, 135, 236, 255, 178, 81, 41, 68, 100, 153, 217, 243, 248, 161, 28, 5, 80, 175, 233, 225, 184, 136, 63, 0, 0, 117, 204, 227, 174, 96, 52, 18, 16, 81, 178, 241, 219, 134, 59, 52, 84, 123, 176, 223, 250, 235, 134, 30, 28, 100, 176, 205, 183, 151, 115, 52, 4, 51, 157, 222, 206, 127, 60, 40, 22, 38, 116, 205, 247, 208, 123, 70, 76, 102, 127, 180, 231, 252, 218, 99, 17, 49, 126, 183, 187, 164, 144, 108, 39, 0, 72, 179, 212, 171, 96, 65, 52, 30, 68, 147, 218, 232, 170, 97, 70, 89, 101, 134, 204, 245, 255, 186, 60, 23, 73, 139, 168, 161, 157, 144, 102, 31, 24, 117, 184, 186, 137, 86, 74, 51, 51, 95, 161, 219, 206, 148, 101, 94, 105, 108, 153, 206, 235, 235, 150, 63, 57, 102, 146, 158, 166, 162, 140, 92, 28, 42, 110, 154, 159, 125, 104, 95, 73, 67, 90, 147, 182, 168, 137, 108, 110, 113, 124, 169, 207, 236, 223, 143, 74, 60, 90, 127, 156, 172, 166, 152, 98, 34, 44, 94, 135, 143, 121, 112, 97, 70, 63, 91, 142, 174, 179, 155, 125, 121, 117, 132, 171, 206, 239, 223, 148, 79, 61, 100, 143, 165, 169, 166, 147, 81, 26, 36, 80, 126, 138, 126, 119, 95, 76, 73, 94, 139, 169, 169, 141, 123, 126, 124, 143, 175, 209, 242, 215, 137, 71, 67, 109, 133, 148, 157, 155, 137, 82, 42, 47, 82, 118, 120, 117, 112, 96, 89, 84, 111, 150, 165, 161, 139, 133, 131, 127, 144, 165, 203, 228, 201, 146, 98, 97, 113, 128, 150, 150, 149, 133, 89, 62, 64, 93, 111, 114, 124, 116, 106, 93, 85, 104, 124, 146, 154, 144, 141, 129, 127, 132, 144, 178, 195, 194, 164, 122, 110, 110, 124, 138, 145, 156, 142, 115, 93, 88, 98, 92, 95, 100, 99, 109, 101, 92, 100, 116, 135, 139, 140, 134, 126, 125, 122, 139, 162, 179, 192, 171, 150, 147, 144, 147, 153, 158, 151, 135, 118, 102, 109, 110, 100, 98, 94, 98, 101, 89, 90, 98, 100, 105, 120, 130, 126, 122, 120, 130, 151, 159, 167, 174, 167, 169, 170, 163, 166, 168, 152, 134, 122, 110, 108, 114, 106, 96, 97, 92, 86, 83, 86, 96, 86, 75, 91, 116, 131, 132, 126, 125, 137, 149, 145, 157, 180, 190, 198, 192, 183, 178, 161, 136, 119, 118, 122, 125, 123, 106, 101, 100, 84, 81, 87, 94, 93, 79, 78, 94, 119, 134, 130, 126, 128, 145, 149, 144, 164, 178, 181, 181, 172, 171, 175, 168, 145, 129, 125, 117, 111, 100, 90, 96, 92, 89, 94, 92, 92, 88, 79, 76, 96, 122, 126, 121, 120, 131, 152, 155, 154, 162, 168, 173, 172, 171, 177, 183, 171, 150, 140, 131, 120, 118, 114, 112, 111, 102, 97, 93, 92, 96, 93, 80, 79, 99, 111, 111, 111, 112, 128, 151, 154, 148, 149, 153, 154, 159, 172, 183, 185, 175, 164, 153, 138, 127, 121, 116, 119, 119, 110, 103, 100, 98, 94, 85, 71, 70, 83, 93, 96, 95, 95, 112, 131, 136, 140, 148, 145, 143, 154, 166, 176, 184, 189, 189, 186, 178, 164, 146, 135, 131, 124, 116, 114, 107, 95, 93, 87, 77, 79, 90, 93, 92, 90, 86, 89, 99, 109, 125, 140, 144, 147, 154, 164, 176, 185, 185, 179, 174, 168, 162, 160, 152, 138, 126, 128, 136, 132, 120, 104, 79, 65, 72, 80, 82, 85, 83, 75, 80, 91, 94, 102, 113, 118, 126, 140, 156, 167, 178, 191, 196, 195, 187, 179, 172, 164, 159, 153, 153, 153, 140, 124, 107, 95, 93, 92, 84, 73, 72, 74, 77, 89, 91, 88, 98, 104, 106, 113, 127, 138, 147, 165, 177, 179, 180, 175, 171, 174, 180, 177, 163, 160, 157, 146, 136, 119, 102, 94, 93, 88, 78, 78, 81, 83, 87, 80, 76, 80, 85, 91, 102, 119, 131, 140, 148, 149, 159, 172, 175, 176, 180, 186, 186, 185, 187, 176, 164, 152, 131, 114, 112, 117, 109, 98, 94, 86, 86, 89, 81, 75, 79, 86, 88, 93, 107, 115, 122, 128, 129, 136, 147, 156, 160, 165, 174, 175, 173, 168, 163, 168, 170, 160, 144, 133, 130, 125, 123, 114, 98, 96, 95, 91, 87, 84, 77, 71, 81, 95, 101, 108, 105, 99, 107, 127, 139, 139, 145, 158, 171, 189, 193, 183, 179, 182, 186, 180, 168, 149, 130, 125, 122, 120, 117, 107, 98, 89, 85, 81, 77, 80, 82, 90, 100, 100, 99, 104, 116, 124, 128, 132, 127, 130, 147, 159, 167, 173, 173, 170, 169, 173, 167, 159, 156, 147, 137, 132, 129, 124, 116, 108, 94, 84, 84, 86, 91, 95, 96, 95, 94, 96, 95, 101, 112, 120, 129, 134, 134, 140, 149, 158, 167, 179, 184, 179, 178, 176, 171, 167, 160, 152, 145, 141, 132, 112, 95, 86, 84, 90, 95, 92, 83, 80, 80, 79, 88, 102, 109, 110, 106, 104, 112, 129, 147, 158, 168, 172, 170, 167, 160, 159, 165, 173, 180, 180, 172, 156, 137, 124, 119, 123, 124, 111, 84, 61, 57, 63, 73, 86, 97, 108, 120, 121, 110, 101, 103, 116, 136, 155, 156, 144, 136, 147, 181, 221, 235, 207, 149, 101, 90, 110, 139, 155, 154, 143, 132, 116, 97, 84, 80, 88, 104, 115, 114, 102, 88, 85, 99, 121, 137, 142, 134, 123, 120, 120, 113, 105, 105, 116, 137, 162, 184, 200, 203, 188, 156, 122, 105, 112, 134, 157, 170, 164, 145, 122, 100, 85, 84, 92, 102, 110, 111, 107, 101, 96, 97, 108, 123, 135, 139, 134, 128, 125, 123, 117, 113, 113, 125, 148, 175, 197, 205, 193, 164, 128, 102, 101, 123, 148, 159, 153, 134, 114, 98, 85, 81, 85, 95, 103, 107, 107, 105, 101, 99, 106, 123, 141, 149, 140, 125, 121, 130, 141, 141, 131, 123, 132, 160, 193, 215, 209, 175, 129, 97, 97, 123, 151, 158, 144, 123, 107, 97, 91, 86, 89, 100, 111, 115, 106, 94, 89, 97, 118, 140, 152, 147, 128, 111, 110, 124, 140, 144, 134, 123, 125, 144, 172, 194, 201, 184, 149, 111, 92, 102, 131, 156, 159, 140, 116, 99, 92, 89, 88, 88, 92, 98, 103, 107, 110, 115, 123, 134, 146, 151, 147, 139, 135, 141, 149, 147, 131, 114, 112, 130, 158, 180, 188, 178, 154, 122, 92, 81, 96, 129, 159, 169, 156, 129, 103, 87, 86, 96, 110, 119, 119, 110, 100, 95, 100, 113, 134, 152, 157, 147, 130, 122, 125, 131, 127, 111, 99, 105, 129, 156, 177, 185, 182, 167, 138, 104, 80, 86, 121, 163, 188, 176, 139, 99, 80, 89, 110, 125, 122, 111, 103, 104, 109, 110, 112, 124, 147, 166, 167, 148, 122, 110, 111, 116, 112, 105, 106, 121, 147, 171, 184, 183, 168, 143, 112, 87, 82, 102, 142, 180, 193, 167, 118, 77, 68, 92, 121, 133, 117, 97, 90, 101, 119, 129, 132, 133, 136, 139, 139, 135, 128, 120, 109, 102, 104, 115, 131, 146, 158, 167, 174, 177, 167, 145, 113, 87, 81, 108, 160, 205, 213, 173, 110, 62, 55, 86, 123, 142, 137, 118, 98, 89, 97, 113, 130, 136, 132, 123, 119, 128, 136, 138, 128, 113, 101, 100, 117, 142, 165, 175, 171, 161, 151, 144, 126, 98, 76, 84, 127, 181, 215, 201, 148, 85, 48, 55, 95, 143, 163, 146, 109, 82, 82, 103, 130, 144, 144, 139, 134, 131, 127, 127, 124, 118, 111, 108, 116, 130, 148, 159, 162, 165, 165, 159, 139, 112, 87, 79, 101, 148, 199, 223, 201, 137, 64, 26, 39, 90, 143, 170, 162, 125, 87, 67, 79, 113, 153, 173, 163, 138, 114, 103, 105, 114, 121, 119, 118, 119, 124, 133, 142, 151, 155, 161, 164, 155, 132, 104, 92, 105, 144, 185, 203, 186, 140, 89, 52, 51, 86, 135, 173, 173, 141, 91, 61, 68, 105, 149, 175, 174, 145, 114, 97, 97, 109, 119, 123, 117, 113, 117, 124, 137, 150, 166, 175, 174, 161, 133, 103, 85, 93, 124, 167, 202, 202, 167, 110, 63, 48, 69, 113, 148, 159, 143, 113, 84, 71, 84, 113, 147, 166, 164, 142, 114, 99, 97, 108, 121, 131, 132, 128, 130, 134, 143, 155, 168, 178, 176, 163, 132, 96, 80, 96, 140, 185, 210, 193, 143, 85, 42, 35, 64, 117, 160, 170, 145, 99, 62, 54, 84, 132, 174, 191, 175, 139, 104, 92, 97, 111, 126, 133, 136, 134, 133, 133, 137, 152, 168, 177, 166, 142, 109, 80, 77, 105, 156, 204, 220, 189, 120, 55, 22, 38, 87, 146, 183, 176, 138, 90, 63, 70, 106, 149, 173, 175, 155, 126, 101, 93, 103, 117, 131, 135, 132, 128, 126, 128, 131, 145, 163, 175, 171, 147, 116, 90, 90, 116, 155, 190, 198, 174, 123, 77, 57, 68, 102, 136, 156, 149, 126, 97, 74, 74, 95, 131, 159, 173, 165, 137, 105, 83, 84, 101, 126, 143, 142, 133, 124, 126, 135, 150, 169, 178, 177, 159, 131, 102, 88, 103, 135, 176, 201, 199, 163, 113, 74, 57, 69, 97, 126, 138, 130, 110, 85, 76, 91, 124, 155, 165, 156, 127, 100, 86, 89, 104, 120, 135, 140, 142, 144, 147, 150, 152, 160, 165, 168, 160, 138, 113, 96, 106, 135, 172, 199, 198, 166, 116, 74, 52, 57, 82, 109, 129, 131, 123, 105, 88, 88, 102, 127, 146, 154, 144, 121, 103, 93, 98, 113, 134, 151, 157, 158, 150, 142, 137, 145, 161, 173, 176, 157, 129, 107, 104, 123, 148, 174, 183, 171, 138, 99, 66, 48, 57, 81, 109, 128, 131, 118, 95, 85, 92, 113, 138, 151, 152, 136, 122, 113, 113, 123, 136, 147, 146, 145, 145, 145, 148, 153, 161, 167, 171, 165, 142, 116, 98, 102, 122, 153, 177, 177, 154, 113, 75, 48, 47, 67, 93, 119, 132, 131, 113, 96, 92, 102, 125, 148, 162, 161, 151, 138, 121, 110, 108, 118, 131, 144, 155, 156, 154, 151, 152, 154, 157, 155, 141, 121, 106, 104, 114, 135, 160, 170, 164, 139, 103, 69, 51, 59, 81, 111, 134, 143, 132, 109, 95, 94, 115, 144, 166, 168, 154, 135, 114, 101, 101, 111, 128, 142, 157, 162, 159, 151, 140, 137, 140, 152, 153, 142, 123, 108, 105, 115, 141, 161, 169, 160, 132, 95, 65, 57, 69, 91, 119, 134, 138, 125, 113, 104, 105, 120, 135, 147, 146, 144, 134, 121, 115, 116, 124, 134, 144, 149, 147, 147, 143, 143, 145, 151, 156, 145, 132, 114, 107, 108, 125, 148, 162, 169, 158, 132, 99, 72, 62, 66, 91, 120, 140, 145, 130, 112, 96, 101, 119, 138, 149, 149, 147, 135, 128, 122, 117, 116, 121, 131, 140, 150, 156, 150, 145, 139, 141, 140, 134, 126, 113, 111, 115, 135, 153, 168, 171, 151, 117, 81, 60, 58, 79, 113, 137, 147, 139, 120, 104, 98, 113, 129, 146, 152, 154, 149, 136, 128, 115, 111, 115, 127, 139, 148, 154, 150, 140, 137, 135, 140, 140, 137, 125, 114, 112, 117, 135, 150, 166, 163, 141, 109, 79, 62, 65, 89, 120, 142, 154, 145, 124, 105, 98, 106, 119, 140, 151, 159, 154, 142, 126, 108, 101, 105, 120, 136, 152, 156, 147, 135, 129, 127, 135, 140, 141, 130, 121, 115, 116, 128, 144, 162, 163, 150, 121, 92, 71, 73, 94, 123, 148, 160, 147, 123, 103, 93, 100, 119, 145, 160, 166, 157, 138, 116, 100, 97, 106, 121, 137, 149, 149, 143, 136, 131, 128, 136, 139, 137, 127, 118, 111, 113, 130, 153, 171, 170, 149, 113, 82, 67, 78, 102, 131, 147, 147, 126, 106, 97, 99, 116, 136, 153, 156, 152, 139, 125, 113, 107, 106, 113, 124, 139, 145, 147, 143, 138, 136, 138, 148, 145, 138, 124, 114, 112, 125, 148, 166, 175, 163, 134, 100, 75, 70, 83, 106, 133, 145, 141, 120, 105, 93, 97, 115, 136, 154, 160, 158, 140, 122, 107, 99, 101, 114, 130, 145, 149, 151, 142, 135, 130, 135, 145, 144, 142, 127, 115, 109, 119, 138, 158, 172, 161, 132, 97, 71, 65, 78, 107, 136, 150, 146, 124, 107, 94, 103, 123, 146, 165, 170, 161, 139, 121, 104, 96, 102, 120, 138, 151, 153, 149, 136, 130, 128, 139, 147, 146, 137, 116, 106, 105, 123, 144, 168, 175, 155, 120, 86, 64, 64, 85, 117, 142, 152, 143, 120, 103, 94, 108, 128, 152, 165, 163, 146, 124, 110, 97, 96, 106, 122, 136, 146, 149, 146, 138, 136, 133, 140, 142, 138, 127, 114, 114, 123, 143, 162, 177, 170, 143, 108, 80, 67, 78, 103, 133, 151, 153, 136, 113, 101, 99, 115, 133, 152, 157, 150, 133, 117, 105, 95, 98, 109, 124, 138, 148, 150, 146, 138, 133, 128, 135, 137, 134, 126, 121, 124, 133, 149, 163, 170, 158, 133, 105, 82, 75, 88, 108, 130, 143, 141, 122, 105, 97, 99, 115, 133, 150, 152, 144, 130, 117, 106, 99, 103, 115, 130, 146, 155, 156, 152, 144, 137, 135, 144, 142, 137, 127, 122, 124, 134, 151, 166, 172, 158, 132, 101, 78, 72, 84, 103, 126, 137, 132, 114, 101, 94, 99, 119, 140, 154, 154, 145, 127, 110, 98, 94, 102, 119, 137, 153, 158, 157, 150, 140, 134, 137, 144, 141, 134, 123, 118, 121, 136, 155, 170, 173, 154, 123, 91, 71, 71, 86, 109, 131, 137, 129, 112, 101, 98, 111, 133, 151, 161, 158, 145, 125, 110, 100, 99, 108, 124, 140, 152, 155, 156, 148, 140, 137, 140, 142, 136, 128, 117, 115, 122, 137, 153, 164, 161, 138, 108, 83, 71, 77, 95, 116, 128, 127, 116, 103, 99, 105, 125, 143, 153, 155, 147, 133, 121, 113, 107, 108, 117, 127, 137, 147, 154, 158, 155, 153, 151, 151, 144, 133, 120, 112, 117, 132, 151, 167, 174, 160, 130, 99, 79, 76, 90, 110, 125, 129, 119, 103, 92, 96, 113, 135, 149, 151, 144, 131, 119, 112, 110, 110, 115, 122, 129, 139, 150, 157, 159, 156, 154, 150, 145, 133, 118, 106, 105, 117, 137, 160, 176, 174, 149, 115, 86, 71, 75, 94, 114, 127, 126, 114, 100, 97, 108, 126, 142, 149, 147, 138, 125, 117, 114, 113, 114, 119, 127, 138, 152, 162, 164, 161, 157, 150, 143, 133, 119, 105, 99, 105, 125, 151, 171, 173, 154, 122, 92, 76, 76, 92, 111, 119, 117, 106, 96, 97, 110, 129, 144, 152, 148, 137, 126, 120, 120, 121, 119, 119, 122, 130, 142, 156, 164, 167, 166, 160, 150, 141, 128, 112, 100, 102, 119, 145, 168, 176, 165, 139, 111, 93, 89, 99, 114, 119, 113, 102, 95, 97, 111, 129, 145, 154, 151, 138, 125, 119, 119, 120, 118, 116, 117, 123, 133, 145, 157, 164, 165, 161, 152, 143, 131, 113, 97, 92, 104, 126, 150, 164, 161, 145, 123, 104, 96, 100, 108, 111, 105, 98, 95, 100, 111, 127, 140, 148, 148, 141, 131, 126, 126, 124, 118, 113, 112, 116, 125, 138, 153, 164, 167, 163, 156, 149, 141, 127, 108, 97, 98, 112, 132, 151, 159, 152, 135, 116, 104, 104, 110, 113, 109, 102, 97, 97, 103, 114, 127, 136, 142, 141, 137, 133, 133, 131, 125, 120, 114, 111, 113, 122, 136, 151, 161, 163, 158, 152, 147, 140, 130, 121, 117, 119, 126, 139, 150, 151, 144, 131, 119, 115, 119, 123, 123, 117, 110, 102, 99, 102, 110, 118, 126, 133, 137, 140, 141, 140, 134, 126, 119, 113, 110, 113, 121, 130, 140, 146, 145, 142, 141, 141, 140, 136, 131, 126, 122, 124, 131, 139, 143, 141, 132, 122, 118, 119, 120, 119, 117, 112, 106, 105, 106, 109, 114, 121, 127, 131, 137, 141, 140, 135, 128, 122, 117, 116, 118, 121, 128, 135, 139, 137, 135, 136, 136, 136, 137, 139, 139, 138, 139, 140, 142, 144, 140, 132, 126, 124, 124, 125, 127, 126, 122, 114, 107, 102, 102, 106, 110, 116, 123, 131, 134, 134, 132, 128, 123, 119, 117, 117, 119, 124, 128, 129, 130, 132, 132, 130, 132, 136, 139, 141, 141, 139, 137, 138, 139, 138, 139, 140, 139, 137, 136, 136, 133, 128, 123, 117, 112, 110, 110, 110, 113, 118, 123, 126, 129, 129, 126, 121, 119, 118, 118, 120, 124, 125, 125, 127, 127, 127, 127, 125, 123, 123, 127, 130, 133, 136, 138, 135, 129, 127, 128, 133, 138, 141, 143, 144, 141, 135, 128, 125, 125, 123, 121, 121, 122, 122, 122, 123, 125, 124, 121, 119, 118, 121, 127, 130, 127, 124, 122, 121, 122, 126, 129, 131, 132, 133, 135, 138, 139, 137, 131, 128, 129, 131, 134, 136, 139, 140, 141, 141, 139, 139, 134, 127, 125, 125, 125, 124, 122, 123, 124, 122, 120, 119, 117, 116, 115, 115, 115, 112, 110, 109, 110, 116, 122, 125, 127, 128, 129, 130, 133, 134, 134, 133, 132, 133, 132, 134, 137, 139, 143, 144, 143, 144, 139, 128, 125, 126, 130, 134, 134, 136, 137, 132, 129, 129, 128, 125, 120, 116, 113, 110, 109, 108, 107, 108, 110, 112, 116, 121, 121, 122, 125, 126, 126, 127, 128, 128, 127, 128, 132, 137, 140, 140, 138, 138, 137, 132, 131, 133, 138, 139, 136, 137, 136, 132, 131, 134, 137, 136, 133, 128, 122, 117, 116, 116, 118, 118, 114, 113, 115, 118, 120, 120, 124, 128, 129, 131, 134, 135, 132, 128, 126, 128, 133, 133, 133, 135, 137, 137, 135, 132, 135, 135, 131, 133, 133, 133, 134, 133, 130, 131, 131, 130, 128, 126, 125, 121, 118, 119, 117, 113, 113, 114, 115, 115, 116, 118, 121, 124, 128, 128, 125, 125, 124, 123, 128, 132, 135, 136, 134, 133, 132, 132, 134, 134, 133, 136, 137, 133, 135, 139, 138, 138, 139, 137, 134, 134, 132, 126, 123, 127, 126, 120, 116, 115, 116, 115, 114, 115, 116, 117, 118, 117, 117, 120, 121, 118, 118, 122, 127, 130, 130, 131, 131, 130, 129, 126, 126, 131, 134, 130, 130, 134, 137, 137, 142, 146, 145, 144, 142, 132, 126, 129, 130, 128, 125, 121, 119, 118, 118, 122, 124, 125, 129, 127, 122, 121, 118, 114, 113, 115, 119, 123, 127, 130, 131, 130, 131, 129, 125, 126, 127, 125, 128, 132, 134, 134, 138, 147, 151, 152, 156, 154, 143, 133, 123, 118, 118, 116, 113, 114, 117, 122, 122, 120, 126, 133, 129, 122, 115, 109, 105, 103, 104, 110, 120, 127, 130, 131, 133, 137, 135, 132, 129, 126, 125, 129, 134, 138, 142, 151, 161, 164, 166, 168, 165, 151, 128, 113, 111, 111, 108, 103, 108, 122, 126, 120, 122, 132, 137, 128, 115, 109, 105, 98, 91, 89, 99, 117, 129, 132, 134, 139, 142, 135, 123, 117, 119, 120, 122, 123, 128, 144, 161, 169, 175, 183, 189, 170, 129, 107, 104, 101, 99, 92, 96, 120, 127, 121, 131, 149, 157, 146, 124, 113, 105, 89, 78, 78, 91, 114, 132, 138, 145, 152, 153, 144, 125, 113, 110, 104, 103, 110, 120, 141, 166, 182, 195, 206, 211, 187, 136, 102, 90, 80, 80, 81, 90, 120, 139, 137, 144, 160, 165, 149, 120, 101, 91, 74, 58, 62, 85, 116, 141, 149, 155, 167, 167, 146, 119, 103, 100, 92, 85, 98, 126, 157, 182, 201, 218, 231, 228, 184, 122, 92, 80, 66, 68, 79, 103, 135, 147, 149, 160, 174, 170, 137, 103, 91, 80, 57, 40, 56, 97, 128, 141, 151, 165, 175, 163, 131, 106, 98, 85, 69, 74, 100, 134, 164, 182, 205, 225, 227, 218, 173, 109, 80, 63, 49, 62, 81, 112, 146, 153, 157, 170, 175, 166, 132, 97, 86, 73, 50, 42, 67, 111, 145, 157, 166, 176, 174, 157, 130, 107, 98, 85, 70, 81, 104, 132, 169, 197, 219, 230, 226, 215, 166, 96, 67, 59, 53, 64, 84, 124, 163, 165, 164, 179, 182, 158, 115, 83, 75, 65, 45, 45, 80, 122, 148, 159, 170, 178, 169, 146, 120, 99, 86, 72, 65, 82, 107, 133, 170, 203, 226, 232, 228, 211, 153, 86, 62, 53, 53, 70, 97, 143, 172, 165, 168, 185, 181, 150, 108, 84, 72, 50, 36, 54, 95, 131, 150, 165, 179, 175, 155, 137, 118, 92, 71, 60, 66, 87, 106, 137, 180, 210, 223, 222, 221, 206, 137, 74, 65, 57, 51, 68, 101, 150, 175, 161, 166, 183, 175, 140, 99, 81, 71, 48, 39, 65, 108, 144, 162, 173, 181, 174, 151, 133, 114, 90, 77, 72, 78, 95, 116, 153, 191, 210, 223, 225, 223, 202, 126, 71, 77, 66, 50, 72, 116, 162, 174, 160, 172, 186, 165, 124, 91, 79, 67, 44, 43, 76, 116, 146, 164, 172, 176, 166, 142, 123, 104, 83, 73, 66, 75, 98, 121, 157, 190, 205, 220, 217, 206, 186, 116, 63, 71, 67, 57, 83, 127, 167, 175, 161, 171, 179, 154, 119, 92, 78, 66, 47, 50, 84, 117, 144, 167, 173, 171, 163, 142, 120, 99, 81, 76, 70, 77, 105, 129, 158, 184, 195, 208, 205, 190, 177, 126, 72, 72, 75, 69, 89, 127, 161, 170, 158, 161, 171, 151, 117, 95, 82, 69, 56, 56, 87, 122, 142, 163, 174, 170, 161, 143, 124, 108, 95, 90, 85, 91, 116, 137, 155, 176, 188, 197, 195, 184, 179, 148, 95, 76, 87, 87, 92, 122, 154, 165, 158, 148, 152, 147, 116, 94, 86, 78, 72, 70, 86, 119, 139, 151, 165, 165, 155, 142, 128, 113, 102, 95, 91, 96, 113, 129, 144, 161, 173, 180, 179, 174, 172, 157, 115, 81, 89, 101, 95, 113, 142, 155, 153, 139, 133, 139, 122, 96, 89, 87, 85, 85, 90, 114, 140, 150, 158, 164, 156, 141, 132, 120, 108, 103, 101, 104, 116, 127, 138, 150, 159, 164, 168, 170, 168, 165, 143, 102, 94, 107, 102, 106, 129, 142, 148, 140, 125, 128, 125, 104, 91, 91, 92, 91, 93, 105, 127, 141, 144, 152, 154, 140, 132, 130, 122, 114, 110, 109, 114, 120, 126, 136, 148, 156, 164, 170, 169, 170, 163, 126, 100, 108, 112, 110, 122, 136, 148, 146, 127, 119, 123, 114, 96, 92, 95, 97, 97, 98, 112, 131, 137, 142, 149, 141, 135, 136, 130, 121, 116, 115, 113, 113, 118, 127, 136, 143, 152, 161, 162, 163, 166, 145, 114, 113, 119, 115, 119, 132, 143, 146, 132, 118, 120, 117, 101, 94, 97, 99, 99, 97, 108, 127, 135, 140, 148, 149, 142, 139, 140, 134, 126, 125, 121, 115, 119, 124, 128, 138, 149, 159, 161, 162, 168, 158, 127, 115, 124, 125, 123, 133, 144, 146, 135, 118, 113, 112, 100, 89, 92, 98, 99, 98, 104, 119, 130, 134, 140, 146, 144, 138, 139, 137, 127, 124, 120, 111, 114, 121, 122, 129, 144, 154, 158, 159, 163, 160, 137, 119, 126, 132, 129, 135, 145, 144, 135, 123, 114, 109, 104, 95, 92, 96, 98, 98, 104, 116, 127, 136, 141, 147, 147, 139, 137, 138, 127, 120, 119, 112, 112, 121, 121, 124, 138, 148, 151, 153, 157, 155, 137, 118, 120, 129, 130, 134, 143, 144, 134, 124, 114, 104, 100, 96, 89, 91, 99, 101, 107, 117, 126, 136, 141, 142, 143, 139, 137, 141, 135, 126, 126, 123, 117, 120, 123, 127, 139, 148, 152, 157, 162, 157, 138, 125, 129, 134, 135, 138, 146, 145, 130, 117, 112, 104, 99, 98, 92, 93, 102, 102, 103, 114, 121, 129, 135, 136, 139, 140, 139, 140, 136, 128, 127, 126, 119, 117, 123, 132, 139, 143, 148, 156, 162, 152, 134, 132, 140, 138, 136, 142, 148, 143, 125, 112, 115, 112, 103, 101, 99, 98, 102, 101, 105, 117, 127, 133, 140, 141, 141, 141, 141, 139, 133, 130, 131, 128, 122, 120, 125, 135, 138, 139, 146, 155, 157, 146, 130, 133, 142, 135, 131, 142, 145, 133, 115, 106, 109, 107, 97, 95, 96, 95, 94, 96, 105, 117, 126, 131, 137, 139, 137, 136, 137, 137, 131, 131, 133, 128, 123, 126, 131, 139, 143, 145, 151, 156, 152, 144, 135, 138, 146, 141, 138, 146, 142, 123, 108, 106, 107, 102, 99, 100, 100, 96, 94, 97, 107, 118, 123, 129, 135, 136, 134, 130, 132, 134, 127, 127, 131, 127, 126, 134, 139, 141, 146, 148, 149, 146, 142, 141, 139, 141, 145, 142, 138, 138, 128, 110, 102, 105, 106, 101, 103, 109, 105, 99, 100, 106, 117, 128, 132, 138, 143, 142, 138, 133, 135, 139, 134, 132, 138, 137, 136, 142, 144, 144, 145, 146, 143, 138, 138, 143, 143, 143, 147, 143, 136, 131, 120, 109, 106, 109, 108, 103, 104, 108, 103, 98, 103, 109, 115, 122, 125, 127, 129, 130, 128, 124, 129, 135, 131, 130, 136, 138, 138, 140, 143, 144, 143, 142, 140, 136, 139, 145, 145, 145, 149, 144, 135, 128, 120, 113, 110, 110, 108, 104, 104, 107, 103, 100, 105, 109, 109, 112, 117, 120, 122, 126, 127, 125, 129, 134, 131, 130, 137, 141, 140, 141, 145, 147, 143, 140, 141, 140, 142, 147, 148, 148, 150, 144, 132, 124, 119, 113, 109, 107, 106, 102, 100, 101, 99, 97, 102, 106, 105, 109, 116, 122, 126, 130, 134, 136, 137, 142, 142, 141, 146, 150, 148, 147, 149, 150, 147, 143, 144, 144, 144, 145, 145, 143, 141, 135, 127, 119, 114, 112, 109, 106, 104, 100, 98, 100, 99, 98, 104, 107, 106, 109, 114, 121, 125, 127, 132, 135, 135, 138, 140, 139, 141, 145, 144, 143, 146, 149, 149, 147, 147, 147, 146, 145, 143, 141, 138, 133, 129, 122, 116, 115, 112, 109, 107, 105, 104, 106, 105, 105, 109, 111, 111, 113, 117, 123, 128, 130, 133, 135, 135, 137, 138, 136, 137, 141, 142, 142, 143, 146, 148, 145, 143, 143, 143, 142, 139, 137, 135, 131, 126, 119, 115, 115, 113, 110, 109, 108, 106, 105, 104, 106, 109, 110, 112, 116, 119, 124, 128, 130, 133, 134, 134, 137, 138, 138, 141, 144, 147, 147, 147, 150, 150, 147, 145, 146, 146, 144, 141, 139, 138, 133, 128, 123, 121, 120, 115, 112, 110, 109, 105, 102, 104, 107, 108, 110, 113, 115, 117, 119, 120, 123, 125, 126, 128, 131, 132, 133, 135, 138, 140, 139, 139, 141, 142, 138, 138, 141, 142, 140, 140, 139, 139, 136, 131, 128, 127, 123, 118, 115, 113, 112, 110, 108, 111, 114, 113, 114, 116, 116, 116, 118, 119, 122, 125, 127, 130, 133, 135, 137, 138, 139, 141, 141, 141, 144, 144, 143, 144, 147, 146, 144, 144, 143, 140, 136, 132, 129, 126, 122, 118, 115, 113, 113, 110, 108, 110, 112, 110, 110, 112, 112, 113, 115, 117, 120, 122, 126, 129, 130, 132, 135, 135, 136, 138, 139, 139, 142, 143, 143, 145, 145, 144, 142, 141, 140, 138, 134, 133, 132, 129, 125, 123, 120, 118, 116, 113, 110, 111, 111, 110, 111, 113, 115, 115, 115, 116, 118, 118, 121, 123, 124, 127, 129, 129, 130, 133, 134, 135, 137, 138, 138, 137, 136, 134, 133, 133, 133, 133, 132, 133, 133, 130, 128, 127, 123, 120, 119, 117, 116, 117, 118, 120, 120, 121, 122, 121, 119, 120, 120, 119, 121, 123, 123, 126, 129, 130, 131, 133, 135, 135, 136, 137, 137, 136, 136, 137, 137, 138, 139, 139, 139, 140, 138, 134, 132, 130, 127, 124, 124, 122, 121, 120, 120, 121, 120, 120, 120, 118, 117, 116, 115, 115, 117, 118, 120, 123, 125, 126, 127, 129, 130, 130, 130, 132, 134, 134, 136, 138, 137, 138, 139, 139, 138, 138, 137, 135, 135, 134, 132, 131, 129, 129, 126, 124, 124, 124, 122, 122, 122, 120, 118, 117, 115, 115, 115, 115, 116, 118, 120, 121, 122, 123, 125, 126, 127, 130, 131, 132, 133, 133, 132, 131, 133, 133, 134, 135, 136, 136, 134, 131, 131, 129, 128, 128, 127, 127, 129, 128, 127, 127, 127, 126, 124, 122, 120, 118, 117, 117, 119, 120, 121, 123, 123, 125, 127, 127, 129, 132, 133, 132, 132, 132, 131, 133, 135, 137, 139, 138, 139, 137, 133, 132, 132, 131, 130, 130, 129, 129, 130, 129, 130, 131, 130, 128, 125, 122, 121, 119, 117, 118, 118, 119, 121, 121, 121, 123, 124, 123, 122, 124, 125, 124, 126, 127, 129, 130, 130, 133, 135, 135, 136, 134, 132, 133, 133, 131, 132, 133, 134, 135, 135, 135, 135, 135, 134, 133, 131, 129, 128, 125, 124, 124, 123, 122, 122, 122, 121, 119, 120, 120, 120, 121, 121, 122, 121, 122, 124, 124, 126, 129, 131, 132, 132, 131, 129, 130, 129, 129, 131, 132, 134, 134, 134, 135, 136, 136, 135, 135, 134, 134, 134, 131, 130, 129, 127, 123, 122, 122, 119, 119, 120, 120, 121, 119, 120, 121, 121, 121, 122, 123, 126, 129, 129, 131, 132, 132, 132, 132, 132, 131, 131, 131, 131, 131, 131, 133, 134, 134, 136, 135, 134, 133, 132, 129, 125, 124, 122, 120, 121, 121, 122, 121, 119, 118, 116, 115, 116, 117, 117, 118, 120, 119, 121, 123, 125, 128, 131, 131, 131, 131, 131, 132, 131, 132, 133, 133, 135, 138, 138, 139, 140, 140, 137, 134, 133, 130, 129, 129, 129, 129, 128, 127, 127, 125, 124, 123, 122, 121, 121, 120, 119, 120, 121, 121, 123, 124, 125, 126, 127, 126, 126, 126, 127, 127, 126, 129, 131, 131, 133, 134, 134, 133, 133, 133, 131, 131, 132, 132, 132, 130, 130, 129, 128, 128, 128, 126, 125, 125, 123, 123, 124, 123, 123, 124, 124, 123, 123, 124, 125, 126, 126, 128, 127, 127, 130, 129, 128, 129, 130, 129, 128, 130, 131, 131, 133, 134, 134, 133, 133, 132, 130, 130, 130, 129, 128, 129, 129, 126, 126, 126, 124, 124, 125, 125, 124, 123, 122, 121, 121, 122, 124, 122, 124, 127, 126, 125, 124, 125, 122, 121, 123, 122, 123, 125, 129, 131, 132, 134, 134, 134, 134, 134, 133, 132, 134, 133, 132, 133, 133, 132, 132, 132, 130, 129, 128, 127, 126, 125, 127, 127, 126, 129, 129, 128, 127, 127, 126, 122, 121, 122, 120, 120, 120, 121, 121, 122, 123, 123, 124, 126, 128, 127, 127, 129, 127, 127, 129, 129, 129, 131, 132, 131, 130, 129, 128, 127, 127, 129, 128, 128, 131, 131, 131, 131, 133, 131, 129, 129, 128, 126, 127, 127, 127, 125, 124, 124, 124, 125, 126, 127, 127, 128, 129, 127, 128, 130, 129, 130, 132, 132, 132, 133, 132, 131, 130, 130, 130, 128, 129, 131, 131, 130, 130, 130, 127, 126, 128, 127, 126, 126, 126, 126, 125, 125, 124, 123, 123, 123, 123, 122, 125, 125, 124, 126, 127, 127, 128, 130, 129, 129, 130, 130, 131, 131, 133, 133, 131, 134, 135, 134, 132, 133, 132, 129, 130, 131, 129, 129, 130, 130, 129, 128, 127, 125, 124, 123, 123, 122, 121, 121, 119, 119, 121, 122, 122, 123, 125, 125, 126, 126, 125, 125, 125, 128, 127, 128, 131, 132, 131, 131, 132, 130, 127, 128, 128, 126, 126, 127, 128, 129, 130, 131, 130, 130, 129, 128, 125, 125, 126, 124, 124, 124, 124, 125, 127, 128, 127, 128, 127, 127, 127, 128, 130, 128, 130, 132, 132, 132, 133, 134, 130, 129, 130, 129, 128, 129, 129, 129, 129, 130, 129, 129, 129, 129, 129, 127, 126, 124, 122, 123, 124, 123, 122, 123, 122, 123, 124, 124, 125, 124, 127, 127, 126, 129, 131, 131, 131, 132, 132, 130, 131, 132, 130, 129, 130, 130, 130, 130, 131, 130, 130, 131, 132, 132, 131, 132, 130, 129, 130, 130, 129, 129, 129, 127, 127, 126, 125, 124, 123, 125, 124, 125, 128, 128, 128, 128, 129, 126, 124, 125, 126, 124, 125, 126, 126, 126, 128, 128, 127, 127, 127, 128, 127, 127, 129, 128, 130, 132, 132, 131, 132, 131, 130, 130, 128, 128, 126, 127, 128, 127, 129, 131, 130, 128, 129, 129, 126, 126, 128, 127, 126, 128, 129, 128, 128, 129, 129, 128, 129, 129, 129, 127, 128, 127, 126, 127, 127, 127, 128, 130, 130, 131, 130, 128, 126, 124, 126, 125, 123, 125, 125, 124, 124, 126, 124, 121, 121, 122, 121, 121, 123, 123, 124, 125, 127, 126, 126, 126, 126, 126, 126, 127, 126, 126, 127, 128, 128, 129, 130, 130, 131, 130, 130, 129, 128, 130, 129, 130, 132, 131, 129, 128, 129, 126, 124, 125, 124, 122, 124, 125, 126, 126, 127, 128, 126, 126, 126, 127, 126, 125, 125, 123, 124, 126, 127, 127, 128, 127, 127, 128, 127, 127, 125, 126, 128, 127, 130, 132, 131, 130, 131, 131, 128, 127, 128, 126, 125, 127, 128, 127, 127, 127, 127, 126, 128, 128, 128, 127, 128, 129, 127, 129, 129, 128, 129, 130, 130, 130, 130, 130, 129, 128, 130, 130, 128, 131, 131, 130, 130, 132, 130, 126, 126, 127, 125, 125, 126, 125, 124, 124, 126, 125, 125, 125, 125, 126, 126, 127, 127, 127, 129, 128, 128, 128, 128, 128, 128, 128, 128, 126, 126, 128, 127, 128, 131, 130, 129, 131, 132, 129, 127, 128, 128, 127, 129, 131, 130, 129, 130, 132, 131, 131, 130, 129, 128, 127, 128, 126, 127, 128, 127, 128, 129, 130, 130, 130, 129, 128, 125, 126, 126, 124, 126, 128, 127, 126, 128, 127, 124, 124, 126, 125, 124, 126, 127, 127, 128, 129, 129, 127, 127, 127, 127, 125, 126, 125, 123, 125, 125, 125, 125, 127, 127, 128, 128, 128, 127, 125, 127, 127, 127, 130, 130, 128, 129, 130, 128, 126, 126, 126, 124, 125, 127, 127, 128, 128, 130, 128, 128, 127, 127, 127, 126, 127, 125, 125, 126, 125, 125, 126, 126, 126, 126, 126, 126, 125, 125, 128, 127, 127, 128, 126, 125, 127, 128, 125, 123, 123, 123, 123, 125, 125, 125, 124, 125, 127, 127, 128, 128, 129, 129, 130, 131, 129, 129, 129, 129, 130, 132, 132, 131, 131, 130, 131, 129, 130, 131, 130, 131, 133, 132, 132, 134, 132, 128, 127, 127, 126, 125, 126, 127, 126, 126, 127, 126, 125, 125, 125, 126, 125, 127, 127, 125, 128, 128, 128, 128, 129, 128, 128, 127, 128, 128, 126, 128, 128, 128, 131, 132, 131, 131, 132, 130, 127, 126, 127, 125, 126, 127, 127, 126, 126, 128, 126, 126, 127, 127, 128, 127, 129, 127, 127, 129, 128, 128, 129, 130, 130, 130, 130, 131, 129, 127, 128, 128, 128, 131, 131, 130, 131, 131, 129, 126, 127, 127, 126, 126, 126, 126, 125, 126, 127, 126, 126, 125, 125, 124, 124, 125, 123, 124, 126, 126, 127, 130, 131, 131, 130, 129, 129, 126, 126, 127, 126, 128, 131, 130, 130, 131, 130, 127, 126, 127, 126, 126, 128, 128, 128, 128, 129, 128, 127, 127, 126, 126, 125, 126, 126, 125, 126, 125, 124, 124, 126, 126, 126, 125, 125, 125, 123, 125, 125, 125, 126, 127, 125, 125, 126, 125, 123, 123, 125, 124, 126, 126, 126, 126, 126, 128, 126, 126, 125, 126, 126, 126, 128, 126, 125, 127, 127, 127, 129, 130, 129, 128, 128, 129, 128, 126, 128, 128, 129, 132, 132, 130, 130, 131, 130, 129, 129, 128, 127, 128, 129, 130, 130, 130, 130, 128, 128, 128, 130, 128, 128, 128, 125, 126, 127, 126, 126, 127, 127, 126, 124, 124, 125, 123, 123, 124, 123, 125, 127, 127, 127, 127, 127, 125, 124, 125, 125, 125, 127, 128, 128, 128, 129, 129, 129, 129, 128, 129, 127, 128, 128, 126, 128, 129, 128, 129, 130, 130, 129, 128, 128, 128, 127, 128, 128, 128, 130, 131, 130, 129, 129, 128, 126, 125, 126, 126, 126, 126, 126, 125, 126, 128, 126, 126, 126, 127, 127, 125, 126, 125, 125, 127, 127, 127, 128, 129, 129, 128, 127, 128, 126, 124, 126, 127, 128, 130, 130, 129, 130, 130, 129, 126, 127, 127, 126, 128, 129, 129, 128, 128, 128, 128, 129, 128, 128, 127, 127, 129, 127, 128, 129, 129, 129, 131, 132, 132, 130, 130, 130, 128, 128, 128, 127, 128, 130, 130, 128, 127, 127, 126, 126, 127, 126, 125, 126, 127, 127, 126, 127, 125, 124, 124, 124, 125, 124, 125, 125, 125, 127, 128, 127, 127, 129, 130, 130, 130, 131, 130, 129, 130, 130, 130, 131, 132, 131, 131, 131, 131, 129, 129, 129, 127, 127, 128, 129, 129, 129, 129, 127, 128, 127, 128, 126, 125, 126, 124, 124, 126, 127, 126, 128, 128, 128, 128, 127, 127, 126, 126, 128, 127, 128, 129, 129, 128, 128, 128, 126, 124, 125, 126, 126, 126, 126, 127, 128, 129, 128, 127, 127, 127, 127, 125, 126, 127, 126, 127, 128, 128, 128, 130, 129, 128, 128, 128, 128, 127, 128, 130, 130, 132, 132, 132, 131, 131, 130, 128, 127, 128, 127, 126, 127, 127, 127, 127, 128, 127, 127, 127, 127, 126, 125, 126, 124, 123, 124, 125, 124, 125, 127, 127, 127, 127, 126, 126, 125, 127, 126, 126, 128, 129, 129, 129, 130, 129, 126, 126, 127, 126, 127, 128, 128, 128, 129, 130, 129, 130, 130, 130, 128, 128, 130, 129, 129, 130, 130, 130, 131, 131, 130, 130, 130, 129, 127, 126, 128, 128, 129, 129, 129, 128, 129, 128, 125, 123, 125, 125, 124, 125, 126, 127, 127, 127, 126, 125, 126, 125, 125, 124, 126, 126, 124, 124, 125, 126, 126, 127, 127, 126, 127, 126, 126, 124, 125, 125, 125, 127, 128, 127, 127, 128, 127, 125, 125, 126, 125, 125, 127, 128, 128, 128, 129, 128, 128, 128, 129, 128, 127, 128, 127, 126, 127, 128, 127, 129, 130, 129, 129, 129, 129, 128, 126, 127, 127, 127, 129, 129, 128, 128, 128, 126, 124, 124, 125, 124, 125, 125, 125, 125, 126, 127, 126, 126, 127, 127, 128, 129, 130, 129, 128, 129, 129, 129, 131, 132, 130, 130, 129, 130, 129, 129, 131, 130, 131, 132, 132, 132, 132, 131, 129, 128, 129, 130, 129, 130, 130, 130, 130, 130, 129, 128, 127, 127, 128, 128, 129, 128, 126, 126, 127, 127, 127, 128, 127, 127, 128, 128, 128, 126, 127, 128, 128, 129, 129, 128, 128, 129, 128, 125, 125, 126, 125, 125, 127, 127, 125, 125, 127, 127, 128, 127, 126, 125, 125, 127, 127, 127, 127, 128, 128, 129, 131, 131, 130, 129, 129, 129, 128, 129, 129, 130, 132, 133, 131, 130, 131, 129, 127, 127, 127, 127, 127, 128, 128, 127, 128, 129, 127, 126, 126, 125, 124, 124, 125, 124, 125, 125, 125, 125, 127, 127, 125, 125, 124, 125, 123, 123, 125, 125, 128, 131, 131, 129, 129, 129, 127, 127, 128, 127, 126, 128, 129, 129, 128, 128, 128, 127, 128, 128, 127, 126, 126, 127, 126, 127, 127, 127, 126, 128, 129, 128, 128, 126, 125, 124, 126, 126, 125, 127, 128, 129, 128, 128, 127, 124, 124, 125, 125, 125, 126, 126, 125, 126, 127, 126, 125, 125, 124, 125, 125, 126, 125, 125, 126, 127, 127, 128, 129, 128, 128, 127, 127, 126, 126, 128, 127, 128, 130, 131, 131, 132, 132, 130, 128, 128, 129, 129, 130, 131, 131, 130, 131, 131, 130, 130, 130, 130, 129, 129, 130, 128, 129, 129, 129, 128, 129, 129, 128, 128, 128, 128, 127, 127, 128, 126, 126, 127, 126, 126, 128, 128, 126, 124, 125, 125, 126, 128, 127, 125, 124, 126, 127, 127, 128, 127, 127, 127, 127, 127, 126, 126, 126, 127, 128, 130, 130, 129, 129, 128, 128, 126, 127, 127, 126, 128, 129, 129, 129, 129, 128, 125, 125, 125, 124, 125, 127, 128, 127, 126, 127, 126, 126, 126, 125, 126, 125, 126, 126, 125, 126, 126, 126, 126, 127, 126, 126, 126, 126, 125, 124, 126, 126, 127, 129, 128, 128, 127, 129, 128, 126, 126, 125, 125, 126, 128, 128, 128, 128, 129, 129, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 130, 131, 132, 132, 131, 130, 130, 129, 129, 130, 128, 130, 131, 130, 130, 130, 131, 129, 128, 129, 128, 126, 127, 127, 127, 127, 127, 126, 126, 126, 126, 126, 127, 127, 127, 126, 127, 126, 126, 127, 128, 127, 127, 127, 126, 127, 126, 129, 129, 129, 130, 130, 129, 128, 129, 128, 127, 127, 128, 127, 128, 129, 128, 127, 127, 127, 126, 126, 127, 127, 127, 127, 127, 127, 126, 127, 126, 127, 128, 129, 128, 128, 127, 126, 125, 125, 128, 127, 128, 129, 128, 128, 128, 128, 126, 124, 124, 125, 125, 126, 126, 125, 125, 125, 126, 125, 125, 125, 125, 125, 125, 126, 125, 125, 126, 126, 126, 127, 128, 128, 128, 128, 128, 126, 127, 129, 129, 131, 132, 132, 131, 131, 132, 129, 128, 129, 128, 128, 129, 129, 128, 128, 128, 128, 128, 129, 128, 128, 127, 127, 126, 126, 127, 126, 126, 126, 127, 127, 126, 126, 125, 124, 122, 125, 126, 126, 129, 129, 128, 127, 128, 127, 124, 124, 125, 125, 125, 127, 127, 126, 127, 128, 127, 127, 127, 127, 128, 128, 129, 128, 127, 128, 128, 129, 130, 131, 130, 131, 131, 130, 128, 127, 128, 128, 129, 132, 132, 131, 131, 133, 131, 129, 129, 129, 127, 128, 129, 128, 127, 128, 128, 127, 127, 128, 128, 129, 129, 129, 127, 128, 128, 128, 128, 130, 130, 129, 129, 129, 128, 126, 126, 127, 126, 128, 129, 129, 128, 128, 129, 126, 125, 126, 126, 125, 127, 128, 128, 128, 129, 129, 127, 128, 127, 128, 128, 129, 129, 128, 129, 128, 128, 129, 130, 129, 127, 127, 127, 127, 126, 128, 127, 126, 128, 129, 128, 127, 128, 127, 124, 125, 125, 123, 123, 125, 125, 124, 124, 125, 124, 124, 124, 124, 124, 124, 125, 125, 125, 126, 126, 126, 127, 128, 128, 129, 129, 129, 127, 127, 128, 128, 128, 130, 130, 130, 131, 132, 130, 128, 129, 130, 128, 129, 129, 129, 129, 131, 132, 131, 131, 132, 132, 131, 130, 130, 129, 129, 130, 129, 129, 131, 131, 131, 130, 130, 128, 126, 127, 127, 126, 128, 130, 129, 128, 129, 129, 126, 126, 128, 126, 125, 127, 127, 127, 126, 127, 127, 125, 126, 126, 126, 125, 126, 126, 125, 127, 127, 126, 127, 127, 127, 126, 126, 127, 127, 125, 126, 126, 126, 128, 129, 128, 128, 129, 129, 127, 128, 130, 128, 127, 128, 127, 127, 127, 129, 128, 127, 128, 128, 127, 127, 128, 126, 126, 127, 126, 127, 128, 128, 128, 127, 126, 126, 125, 125, 126, 126, 126, 128, 128, 128, 128, 128, 125, 123, 125, 126, 124, 126, 127, 128, 127, 128, 129, 127, 127, 128, 129, 128, 128, 128, 126, 127, 128, 128, 129, 130, 130, 129, 128, 128, 128, 126, 126, 127, 126, 128, 130, 129, 129, 129, 128, 125, 124, 126, 126, 126, 128, 128, 127, 126, 127, 126, 125, 125, 125, 125, 124, 125, 125, 123, 125, 125, 125, 126, 128, 128, 127, 126, 126, 125, 124, 125, 124, 124, 126, 128, 128, 129, 130, 128, 125, 125, 126, 124, 125, 128, 129, 129, 129, 131, 130, 130, 130, 130, 128, 127, 129, 129, 129, 131, 131, 131, 131, 132, 131, 130, 130, 130, 129, 128, 129, 129, 130, 132, 132, 131, 131, 131, 129, 126, 127, 128, 126, 127, 128, 128, 128, 129, 130, 128, 128, 128, 129, 128, 128, 128, 126, 127, 128, 128, 128, 129, 130, 130, 130, 128, 127, 126, 127, 128, 128, 129, 130, 130, 130, 130, 130, 128, 127, 129, 128, 127, 128, 129, 130, 129, 130, 129, 128, 128, 129, 129, 127, 128, 128, 126, 127, 127, 127, 128, 129, 128, 127, 126, 126, 126, 125, 126, 125, 125, 128, 128, 128, 128, 129, 128, 125, 124, 125, 123, 123, 125, 126, 126, 127, 129, 128, 127, 127, 128, 127, 127, 128, 127, 126, 127, 128, 128, 129, 130, 130, 129, 128, 127, 126, 126, 128, 127,
  };
*/

// Variables related to the player's sprite
byte playerDir = 0; // Player looks in playerDirection NORTH. Directions are 0 - NORTH, 1 - NORTHEAST, ..., 4 - SOUTH, 5 - SOUTHWEST, ..., 7 - NORTHWEST
byte playerX_start[numRooms - 1];
byte playerY_start[numRooms - 1];
byte playerX = 20; // Set the player onto the starting position in the first playing area
byte playerY = 23;
byte playerX_old = playerX;
byte playerY_old = playerY;
byte playerNumAnimPhases = 2; // The player's sprite number of animation phases (currently two for moving, another one for standing)
byte playerAnimPhase = -1; // The player's sprite has two animation phases per directions N, S, E/NE/SE, W/NW/SW
byte playerSimpleShotX = -1; // A simple shot runs in the direction the player is heading to. It is "consumed" by any object.
byte playerSimpleShotY = -1;
byte playerSimpleShotDir = -1;
boolean playerSimpleShotActive = false;
boolean playerHit = false;
boolean playerHasGun = false; // Player cannot shoot without a gun. A gun has 15 shots. The player can carry only one gun.
boolean collisionOccurred = false; // Flag that indicates that the player has collided with something nasty (fence or baddie)
byte maxNumShots = 15; // Per gun, player has 15 shots at his/her disposal
byte numShotsLeft = 0;
byte lives = NUM_LIVES;

// Variables related to the baddies
const byte numBaddiesMax = 13;
const byte numBaddieTypes = 5;
boolean baddieActive[numBaddiesMax - 1]; // Dummy values: all those evil scumbags are inactive.
byte baddieX[numBaddiesMax - 1];
byte baddieY[numBaddiesMax - 1];
byte baddie_initialX[numBaddiesMax - 1];
byte baddie_initialY[numBaddiesMax - 1];
byte baddieX_old[numBaddiesMax - 1];
byte baddieY_old[numBaddiesMax - 1];
byte baddiePersonality[numBaddiesMax - 1]; // 0 - Harmless, 1 - Kamikaze, 2 - Patrol, 3 - Shooting Worm, 4 - Johann
byte baddieDir[numBaddiesMax - 1]; // 0 - NORTH, 2 - EAST, 4 - SOUTH, 6 - WEST

// Baddie animations
byte baddiePersNumAnimPhases[numBaddieTypes]; // Number of animation phases
byte baddiePersAnimPhase[numBaddieTypes]; // TODO: dto.
byte baddieShotX[numBaddiesMax - 1];
byte baddieShotY[numBaddiesMax - 1];
boolean baddieShotActive[numBaddiesMax - 1];
byte baddieShotDir[numBaddiesMax - 1];

// Special baddies
// Vertical spikes
const byte numVertSpikesMax = 20;
byte vertSpikeAnimPhase[numVertSpikesMax - 1]; // Animation phases of the falling spike
byte vertSpikeX[numVertSpikesMax - 1];
byte vertSpikeY[numVertSpikesMax - 1];
byte vertSpikeX_old[numVertSpikesMax - 1];
byte vertSpikeY_old[numVertSpikesMax - 1];
byte vertSpike_initialX[numVertSpikesMax - 1];
byte vertSpike_initialY[numVertSpikesMax - 1];
boolean vertSpikeActive[numVertSpikesMax - 1];
byte vertSpike_delay[numVertSpikesMax - 1];
byte vertSpike_cnt[numVertSpikesMax - 1];
boolean vertSpikeOnHold[numVertSpikesMax - 1];
// Horizontal spikes
const byte numHorizSpikesMax = 20;
byte horizSpikeAnimPhase[numHorizSpikesMax - 1]; // Animation phases of the falling spike
byte horizSpikeX[numHorizSpikesMax - 1];
byte horizSpikeY[numHorizSpikesMax - 1];
byte horizSpikeX_old[numHorizSpikesMax - 1];
byte horizSpikeY_old[numHorizSpikesMax - 1];
byte horizSpike_initialX[numHorizSpikesMax - 1];
byte horizSpike_initialY[numHorizSpikesMax - 1];
boolean horizSpikeActive[numHorizSpikesMax - 1];
byte horizSpike_delay[numHorizSpikesMax - 1];
byte horizSpike_cnt[numHorizSpikesMax - 1];
boolean horizSpikeOnHold[numHorizSpikesMax - 1];

// Variables related to artefacts (gun, key, door, etc.)
//const byte numDiamondsMax = 2;
boolean gunCollected[numRooms - 1];
byte gunX[numRooms - 1];
byte gunY[numRooms - 1];
byte artefactsAnimPhase = 0;
byte artefactsAnimCtr = 0;
boolean keyCollected[4][numRooms - 1]; // There can be only one green key in a room. If it was picked up by the player, it does not re-appear
int keyX[4][numRooms - 1]; // 0 - green key, 1 - red key, 2 - yellow key, 3 - violet key
int keyY[4][numRooms - 1];
byte numKeysCarrying[4] = {0, 0, 0, 0}; // How many green/red/yellow/violet keys the player has
boolean doorX[4][numRooms - 1]; // 0 - green door, 1 - red door, 2 - yellow door, 3 - violet door
boolean doorY[4][numRooms - 1];

// Variables related to the doors
boolean doorOpened[4][numRooms - 1]; // There can be only one green door in a room. If it was opened by the player, it does not re-appear

// Event variables
boolean showMithotronic = true;
boolean reset;
boolean pause;       // if true, halt the game until the joystick is moved
boolean gameWon = false;
long invincibilityTimer;
boolean playerInvincible;
byte doorColTimer = 0; // Number between 0 and 9
byte animCtr;

// Function headers
void initArrays();
void drawDoor(byte, byte, byte, int);
void controlPlayer();
void storeRoomData();
void drawPlayer();
void placeBaddies();
void placeBaddie(byte, byte, byte, byte);
void placeVertSpike(byte, byte, byte, byte);
void placeHorizSpike(byte, byte, byte, byte);
void placeKey(byte, byte, byte);
void placeGun(byte, byte);
void placePlayerRespawn(byte, byte);
void drawArtefacts();
void controlBaddies();
void drawBaddies();
void moveBaddies();
boolean baddieIsUnderneath(byte, byte, byte);
boolean tryToMove(byte, byte, byte);
void stepIntoDirection(byte, byte);
boolean canGoThisWay(byte, byte, byte);
void movePlayerBullets();
void moveBaddieBullets();
boolean checkCollision();
void openDoor(byte, byte, byte);
void makeFenceNoise();
void makeGunTakenNoise();
void makeGunShotNoise();
void makeSpikeNoise();
void makeKeyCollectedNoise();
void makeOpenDoorNoise();
void makeBaddieHitPlayerNoise();
void makeBulletHitPlayerNoise();
void playerLosesLife(byte, byte);
void updateRaster();
void drawPlayfield();
void drawPlayfield_glowing(byte);
void displayGlowingPlayfield(byte, byte);
void showWelcomeScreen();
void showEnding();
void playMelody();

// Joystick inquiry (allows to use a classic joystick or a LEDmePlay Joypad without any configuration)
boolean joy1Up()
{
  if((digitalRead(buttonU1) == LOW && digitalRead(buttonD1) != LOW) || (digitalRead(buttonL1) == LOW && digitalRead(buttonR1) == LOW && analogRead(analogY1) > (512 + sensitivity))){ return true; }
  return false;
}
boolean joy1Down()
{
  if((digitalRead(buttonD1) == LOW && digitalRead(buttonU1) != LOW) || (digitalRead(buttonL1) == LOW && digitalRead(buttonR1) == LOW && analogRead(analogY1) < (512 - sensitivity))){ return true; }
  return false;
}
boolean joy1Left()
{
  if((digitalRead(buttonL1) == LOW && digitalRead(buttonR1) != LOW) || (digitalRead(buttonL1) == LOW && digitalRead(buttonR1) == LOW && analogRead(analogX1) > (512 + sensitivity))){ return true; }
  return false;
}
boolean joy1Right()
{
  if((digitalRead(buttonR1) == LOW && digitalRead(buttonL1) != LOW) || (digitalRead(buttonL1) == LOW && digitalRead(buttonR1) == LOW && analogRead(analogX1) < (512 - sensitivity))){ return true; }
  return false;
}
boolean joy1Fire()
{
  if(digitalRead(buttonFire1) == LOW || (digitalRead(buttonU1) == LOW && digitalRead(buttonD1) == LOW)){ return true; }
  return false;
}
boolean joy2Up()
{
  if((digitalRead(buttonU2) == LOW && digitalRead(buttonD2) != LOW) || (digitalRead(buttonL2) == LOW && digitalRead(buttonR2) == LOW && analogRead(analogY2) > (512 + sensitivity))){ return true; }
  return false;
}
boolean joy2Down()
{
  if((digitalRead(buttonD2) == LOW && digitalRead(buttonU2) != LOW) || (digitalRead(buttonL2) == LOW && digitalRead(buttonR2) == LOW && analogRead(analogY2) < (512 - sensitivity))){ return true; }
  return false;
}
boolean joy2Left()
{
  if((digitalRead(buttonL2) == LOW && digitalRead(buttonR2) != LOW) || (digitalRead(buttonL2) == LOW && digitalRead(buttonR2) == LOW && analogRead(analogX2) > (512 + sensitivity))){ return true; }
  return false;
}
boolean joy2Right()
{
  if((digitalRead(buttonR2) == LOW && digitalRead(buttonL2) != LOW) || (digitalRead(buttonL2) == LOW && digitalRead(buttonR2) == LOW && analogRead(analogX2) < (512 - sensitivity))){ return true; }
  return false;
}
boolean joy2Fire()
{
  if(digitalRead(buttonFire2) == LOW || (digitalRead(buttonU2) == LOW && digitalRead(buttonD2) == LOW)){ return true; }
  return false;
}

// Draw the M of the Mithotronic logo
void drawM(int x, int y)
{
  matrix.fillRect(x + 2, y + 2, 6, 1, backgroundColor);
  matrix.fillRect(x, y + 3, 10, 1, backgroundColor);

  matrix.fillRect(x, y + 4, 2, 6, matrix.Color333(3, 3, 3));
  matrix.fillRect(x + 2, y + 3, 2, 2, matrix.Color333(3, 3, 3));
  matrix.fillRect(x + 4, y + 4, 2, 6, matrix.Color333(3, 3, 3));
  matrix.fillRect(x + 6, y + 3, 2, 2, matrix.Color333(3, 3, 3));
  matrix.fillRect(x + 8, y + 4, 2, 6, matrix.Color333(3, 3, 3));
}

// Draw the T of the Mithotronic logo
void drawT(int x, int y)
{
  matrix.fillRect(x, y + 5, 6, 1, backgroundColor);
  matrix.fillRect(x + 2, y + 10, 3, 1, backgroundColor);

  matrix.fillRect(x, y + 3, 6, 2, matrix.Color333(0, 0, 7));
  matrix.fillRect(x + 2, y, 2, 10, matrix.Color333(0, 0, 7));
  matrix.fillRect(x + 4, y + 8, 1, 2, matrix.Color333(0, 0, 7));
}

// Draw the animated Mithotronic logo and play jingle
void mithotronic()
{
  int i = -10;
  do
  {
    drawM(7, i);
    drawT(19, 22 - i);
    i++;
    delay(50);
  }
  while (i <= 11);

  // Jingle on start screen
  tone(audio, NOTE_C4, 200);
  delay(400 + 20);
  tone(audio, NOTE_C4, 90);
  delay(200 - 20);
  tone(audio, NOTE_G4, 140);
  delay(400 + 20);
  tone(audio, NOTE_G4, 140);
  delay(200 - 20);
  tone(audio, NOTE_C5, 450);
  delay(600);
  tone(audio, NOTE_AS4, 140);
  delay(200 - 20);
  tone(audio, NOTE_A4, 130);
  delay(200 - 10);
  tone(audio, NOTE_F4, 120);
  delay(200);
  tone(audio, NOTE_G4, 1000);
  delay(3000);

  matrix.fillRect(0, 0, 32, 32, matrix.Color333(0, 0, 0)); // Clear LED matrix
}

// Sets color for the next character to show the LEDmePLay logo
void setLEDMePlayColor(int i)
{
  switch(i % 9)
  {
    case 0:
    matrix.setTextColor(matrix.Color333(5,0,0));
    break;
    case 1:
    matrix.setTextColor(matrix.Color333(5,2,0));
    break;
    case 2:
    matrix.setTextColor(matrix.Color333(2,5,0));
    break;
    case 3:
    matrix.setTextColor(matrix.Color333(0,5,0));
    break;
    case 4:
    matrix.setTextColor(matrix.Color333(0,5,2));
    break;
    case 5:
    matrix.setTextColor(matrix.Color333(0,2,5));
    break;
    case 6:
    matrix.setTextColor(matrix.Color333(0,0,5));
    break;
    case 7:
    matrix.setTextColor(matrix.Color333(2,0,5));
    break;
    case 8:
    matrix.setTextColor(matrix.Color333(5,0,2));
    break;
  }
}

// Draw the LEDmePlay logo
void ledMePlay()
{
  // Clear screen
  matrix.fillScreen(matrix.Color333(0, 0, 0));

  byte i = 0;
  do
  {
    // Write 'LEDmePlay'
    setLEDMePlayColor(i++);
    matrix.setCursor(7, 5);
    matrix.println("L");
    setLEDMePlayColor(i++);
    matrix.setCursor(13, 5);
    matrix.println("E");
    setLEDMePlayColor(i++);
    matrix.setCursor(19, 5);
    matrix.println("D");

    setLEDMePlayColor(i++);
    matrix.setCursor(10, 11);
    matrix.println("m");
    setLEDMePlayColor(i++);
    matrix.setCursor(16, 11);
    matrix.println("e");

    setLEDMePlayColor(i++);
    matrix.setCursor(4, 19);
    matrix.println("P");
    setLEDMePlayColor(i++);
    matrix.setCursor(10, 19);
    matrix.println("l");
    setLEDMePlayColor(i++);
    matrix.setCursor(16, 19);
    matrix.println("a");
    setLEDMePlayColor(i++);
    matrix.setCursor(22, 19);
    matrix.println("y");
    
    i++;
    if(i > 81)
    {
      i = 0;
    }

    byte j = 0;
    do
    {
      j++;
      delay(1);
    }
    while(j < 250 && !joy1Fire() && !joy2Fire());
  }
  while(!joy1Fire() && !joy2Fire());
  tone(audio,1024,20);
  delay(200);
  matrix.fillRect(0, 0, 32, 32, matrix.Color333(0,0,0));
}

void setup()
{
  // Initialize the data structures related to items
  initArrays();

  // Initialize serial connection
  Serial.begin(9600);
  // Every third of a second we switch the animation phases for the baddies
  timer.every(270, controlBaddies);
  // Every tenth of a second the joystick is polled
  timer.every(100, controlPlayer);
  // Move the bullets shot by the player and by the baddies
  timer.every(30, movePlayerBullets);
  timer.every(120, moveBaddieBullets);
  // The playfield/map needs not to be updated too often. Disadvantage(?): Bullets cause a temporary "hole" within the wall
  timer.every(50, drawPlayfield);
  // Draw all items that can be picked up
  timer.every(30, drawArtefacts);
  // Play the melodies
  timer.every(75, playMelody);

  // Initialize random number generator
  randomSeed(analogRead(5));

  // Initialize joysticks and  buttons
  pinMode(buttonL1, INPUT);     
  pinMode(buttonR1, INPUT);     
  pinMode(buttonU1, INPUT);     
  pinMode(buttonD1, INPUT);     
  pinMode(buttonFire1, INPUT);     
  pinMode(buttonL2, INPUT);     
  pinMode(buttonR2, INPUT);     
  pinMode(buttonU2, INPUT);     
  pinMode(buttonD2, INPUT);     
  pinMode(buttonFire2, INPUT);     
  pinMode(buttonReset, INPUT);     
  pinMode(buttonPause, INPUT);    

  // Activate internal pull-up resistors 
  digitalWrite(buttonL1, HIGH);
  digitalWrite(buttonR1, HIGH);
  digitalWrite(buttonU1, HIGH);
  digitalWrite(buttonD1, HIGH);
  digitalWrite(buttonFire1, HIGH);
  digitalWrite(buttonL2, HIGH);
  digitalWrite(buttonR2, HIGH);
  digitalWrite(buttonU2, HIGH);
  digitalWrite(buttonD2, HIGH);
  digitalWrite(buttonFire2, HIGH);
  digitalWrite(buttonReset, HIGH);
  digitalWrite(buttonPause, HIGH);

  // Initialize matrix
  matrix.begin();

  // Modify the game mechanics with respect to the difficulty level
  switch (difficulty)
  {
    case 0:
      for (byte i = 0; i < numBaddiesMax - 1; i++)
      {
        baddieDir[i] = 0; // When the player enters a playing area, all baddies move up
      }
      break;
    case 1:
      // The initial direction of the baddies may vary (N, E, S, W)
      for (byte i = 0; i < numBaddiesMax - 1; i++)
      {
        while ( baddieDir[i] % 2 == 1) {
          baddieDir[i] = random(0, 7);  // Sensible directions are 0, 2, 4, 6
        }
      }
  }

  // Copy the data for the first room into global variable screen
  storeRoomData();

  // Display welcome dialog
  if (showMithotronic)
  {
    mithotronic();
    ledMePlay();
  }
}

void initArrays()
{
  // artefacts
  for (byte i = 0; i < numRooms - 1; i++)
  {
    gunX[i] = -1;
    gunY[i] = -1;
    gunCollected[i] = false;

    // Keys and doors
    for (byte j = 0; j < 4; j++) // There are four keys
    {
      keyCollected[j][i] = false;
      keyX[j][i] = -1;
      keyY[j][i] = -1;

      doorOpened[j][i] = false;
    }
  }

  // Ordinary baddies
  for (byte i = 0; i < numBaddiesMax - 1; i++)
  {
    baddieActive[i] = false;
    baddiePersonality[i] = 0;
    baddieDir[i] = -1;
    baddieShotX[i] = -1;
    baddieShotY[i] = -1;
    baddieShotDir[i] = -1;
    baddieShotActive[i] = -1;
  }

  baddiePersNumAnimPhases[0] = 2; // Patrol: Baddie type 0 has two animation phases
  baddiePersNumAnimPhases[1] = 2;
  baddiePersNumAnimPhases[2] = 8;
  baddiePersNumAnimPhases[3] = 4; // Shooting worm
  baddiePersNumAnimPhases[4] = 2; // Johann

  for (byte i = 0; i < numBaddieTypes; i++) baddiePersAnimPhase[i] = 0;

  // Special baddies
  // Vertical spikes
  for (byte i = 0; i < numVertSpikesMax - 1; i++)
  {
    vertSpikeActive[i] = false;
    vertSpikeOnHold[i] = false;
    vertSpikeAnimPhase[i] = 0;
    vertSpike_delay[i] = 0;
    vertSpike_cnt[i] = 0;
  }
  // Horizontal spikes
  for (byte i = 0; i < numHorizSpikesMax - 1; i++)
  {
    horizSpikeActive[i] = false;
    horizSpikeOnHold[i] = false;
    horizSpikeAnimPhase[i] = 0;
    horizSpike_delay[i] = 0;
    horizSpike_cnt[i] = 0;
  }
}

// This subroutine is not directly called but from within the timing framework
void controlPlayer()
{
  // Store the former position of the player
  playerX_old = playerX;
  playerY_old = playerY;

  // Second joystick
  joystick1Released = true;
  
  if  ( joy1Up() // N
  &&    ( ( (raster[playerX][playerY - 2] == 0 )
  &&      (raster[playerX - 1][playerY - 1] == 0 )
  &&      (raster[playerX + 1][playerY - 1] == 0 ) )
        ) || (playerY <= 1) )
  {
    playerY--;
    if ( joy1Right() // NE
    &&   (raster[playerX + 1][playerY - 2] == 0 )
    &&   (raster[playerX + 1][playerY - 1] == 0 )
    &&   (raster[playerX + 2][playerY] == 0 ) 
       ) 
    {
      playerX++;  // NE
      playerDir = 1;
    }
    else if ( joy1Left() // NW
    &&        (raster[playerX - 1][playerY - 2] == 0 ) 
    &&        (raster[playerX - 1][playerY - 1] == 0 )
    &&        (raster[playerX - 2][playerY] == 0 )
            )  
    {
      playerX--;  // NW
      playerDir = 7;
    }
    else playerDir = 0;
    joystick1Released = false;
    if (playerAnimPhase == playerNumAnimPhases - 1) 
    {
      playerAnimPhase = 0;  // Toggle the animation phase
    }
    else
    {
      playerAnimPhase++;
    }
    drawPlayer();
  }
  else if ( joy1Down() // S
  &&        ( ( (raster[playerX][playerY + 2] == 0 ) 
  &&            (raster[playerX - 1][playerY + 2] == 0 ) 
  &&            (raster[playerX + 1][playerY + 2] == 0 ) 
              ) 
              || (playerY >= 30) )
          )
  {
    playerY++;
    joystick1Released = false;
    
    if  ( joy1Right() // SE
    &&    (raster[playerX + 1][playerY] == 0 ) 
    &&    (raster[playerX][playerY + 2] == 0 )
    &&    (raster[playerX + 2][playerY + 2] == 0 )
        )
    {
      playerX++;  // SE
      playerDir = 3;
    }
    else if ( joy1Left() //SW
    &&        (raster[playerX - 1][playerY] == 0 )
    &&        (raster[playerX - 2][playerY + 2] == 0 ) 
    &&        (raster[playerX][playerY + 2] == 0 )
            )
    {
      
      playerX--;  // SW
      playerDir = 5;
    }
    else playerDir = 4;
    if (playerAnimPhase == playerNumAnimPhases - 1)
    {
      playerAnimPhase = 0;
    }
    else
    {
      playerAnimPhase++;
    }
    drawPlayer();
  }
  else if (joy1Left() // W
       &&  (( (raster[playerX - 2][playerY] == 0 ) 
       &&   (raster[playerX - 2][playerY - 1] == 0 )
       &&   (raster[playerX - 2][playerY + 1] == 0 ) )
           || (playerX <= 1)) )
  {
    playerX--;
    joystick1Released = false;
    playerDir = 6;
    if (playerAnimPhase == playerNumAnimPhases - 1)
    {
      playerAnimPhase = 0;
    }
    else
    {
      playerAnimPhase++;
    }
    drawPlayer();
  }
  else if ( joy1Right() // E
       &&  ( ( (raster[playerX + 2][playerY] == 0 )
       &&   (raster[playerX + 2][playerY - 1] == 0 )
       &&   (raster[playerX + 2][playerY + 1] == 0 ) )
       || (playerX >= 30) )
          )
  {
    playerX++;
    joystick1Released = false;
    playerDir = 2;
    if (playerAnimPhase == playerNumAnimPhases - 1)
    {
      playerAnimPhase = 0;
    }
    else
    {
      playerAnimPhase++;
    }
    drawPlayer();
  }

  if (joystick1Released == true) // Joystick was not touched. Player stands still
  {
    playerAnimPhase = -1; // Player stands still
    drawPlayer();
  }

  // Fire in the playerDirection in which the player moves
  if (joy1Fire())
  {
    if (playerSimpleShotActive == false) // Allow the player to shoot another bullet only if there is none currently active/flying around
    {
      if (playerHasGun) // The player can only shoot if he has picked up a gun.
      {
        if (numShotsLeft > 0) // At least one bullet is in the gun
        {
          playerSimpleShotActive = true;
          playerSimpleShotDir = playerDir;
          numShotsLeft--;

          makeGunShotNoise();

          // Determine the position where the bullet emerges
          switch (playerSimpleShotDir)
          {
            case 0:
              playerSimpleShotX = playerX;
              playerSimpleShotY = playerY - 1;
              break;
            case 1:
              playerSimpleShotX = playerX + 1;
              playerSimpleShotY = playerY - 1;
              break;
            case 2:
              playerSimpleShotX = playerX + 1;
              playerSimpleShotY = playerY;
              break;
            case 3:
              playerSimpleShotX = playerX + 1;
              playerSimpleShotY = playerY + 1;
              break;
            case 4:
              playerSimpleShotX = playerX;
              playerSimpleShotY = playerY + 1;
              break;
            case 5:
              playerSimpleShotX = playerX - 1;
              playerSimpleShotY = playerY + 1;
              break;
            case 6:
              playerSimpleShotX = playerX - 1;
              playerSimpleShotY = playerY;
              break;
            case 7:
              playerSimpleShotX = playerX - 1;
              playerSimpleShotY = playerY - 1;
              break;
          } // Direction if the player's shot
        } // no shot left
        else
        {
          //
        }
      } // Player has a gun
    } // playerSimpleShotActive
  } // buttonFire2

  // The player is crossing the screen boundaries into another room
  //
  if (playerY >= 33) // Player moves southwards
  {
    switch (mapID)
    {
      case 1:
        mapID = 2;
        break;
      case 2:
        mapID = 3;
        break;
      case 5:
        mapID = 4;
        break;
      case 6:
        mapID = 5;
        break;
      case 7:
        mapID = 21;
        break;
      case 8:
        mapID = 7;
        break;
      case 9:
        mapID = 8;
        break;
      case 12:
        mapID = 48;
        break;
      case 15:
        mapID = 14;
        break;
      case 16:
        mapID = 17;
        break;
      case 17:
        mapID = 11;
        break;
      case 18:
        mapID = 19;
        break;
      case 19:
        mapID = 20;
        break;
      case 20:
        mapID = 23;
        break;
      case 21:
        mapID = 22;
        break;
      case 23:
        mapID = 24;
        break;
      case 24:
        mapID = 25;
        break;
      case 26:
        mapID = 35;
        break;
      case 27:
        mapID = 26;
        break;
      case 30:
        mapID = 29;
        break;
      case 32:
        mapID = 37;
        break;
      case 36:
        mapID = 41;
        break;
      case 42:
        mapID = 51;
        break;
      case 45:
        mapID = 43;
        break;
      case 46:
        mapID = 45;
        break;
      case 47:
        mapID = 46;
        break;
      case 48:
        mapID = 49;
        break;
      case 50:
        mapID = 6;
        break;
      case 51:
        mapID = 32;
        break;
    }
    matrix.fillScreen(matrix.Color333(0, 0, 0));
    updateRaster(); // Refresh the raster
    displayGlowingPlayfield(3, 20);
    playerY = 3;
    placeBaddies();
    for (byte i = 0; i < numBaddiesMax - 1; i++) {
      baddieShotActive[i] = false;
    }
  }
  else if (playerY <= 0) // Player moves northwards
  {
    switch (mapID)
    {
      case 3:
        mapID = 2;
        break;
      case 2:
        mapID = 1;
        break;
      case 4:
        mapID = 5;
        break;
      case 5:
        mapID = 6;
        break;
      case 6:
        mapID = 50;
        break;
      case 7:
        mapID = 8;
        break;
      case 8:
        mapID = 9;
        break;
      case 11:
        mapID = 17;
        break;
      case 14:
        mapID = 15;
        break;
      case 17:
        mapID = 16;
        break;
      case 19:
        mapID = 18;
        break;
      case 20:
        mapID = 19;
        break;
      case 21:
        mapID = 7;
        break;
      case 22:
        mapID = 21;
        break;
      case 23:
        mapID = 20;
        break;
      case 24:
        mapID = 23;
        break;
      case 25:
        mapID = 24;
        break;
      case 26:
        mapID = 27;
        break;
      case 29:
        mapID = 30;
        break;
      case 32:
        mapID = 51;
        break;
      case 35:
        mapID = 26;
        break;
      case 37:
        mapID = 32;
        break;
      case 41:
        mapID = 36;
        break;
      case 43:
        mapID = 45;
        break;
      case 45:
        mapID = 46;
        break;
      case 46:
        mapID = 47;
        break;
      case 48:
        mapID = 12;
        break;
      case 49:
        mapID = 48;
        break;
      case 51:
        mapID = 42;
        break;
    }
    matrix.fillScreen(matrix.Color333(0, 0, 0));
    updateRaster(); // Refresh the raster
    displayGlowingPlayfield(3, 20);
    playerY = 31;
    placeBaddies();
    for (byte i = 0; i < numBaddiesMax - 1; i++) {
      baddieShotActive[i] = false;
    }
  }
  else if (playerX <= 0) // Player moves westwards
  {
    switch (mapID)
    {
      case 0:
        mapID = 1;
        playerX = 30;
        break;
      case 4:
        mapID = 3;
        playerX = 30;
        break;
      case 7:
        mapID = 6;
        playerX = 30;
        break;
      case 9:
        mapID = 10;
        playerX = 30;
        break;
      case 10:
        mapID = 48;
        playerX = 30;
        break;
      case 11:
        mapID = 9;
        playerX = 30;
        break;
      case 13:
        mapID = 12;
        playerX = 30;
        break;
      case 16:
        mapID = 15;
        playerX = 30;
        break;
      case 17:
        mapID = 14;
        playerX = 30;
        break;
      case 23:
        mapID = 22;
        playerX = 30;
        break;
      case 25:
        mapID = 26;
        playerX = 30;
        break;
      case 26:
        mapID = 28;
        playerX = 30;
        break;
      case 28:
        mapID = 29;
        playerX = 30;
        break;
      case 31:
        mapID = 30;
        playerX = 30;
        break;
      case 33:
        mapID = 32;
        playerX = 30;
        break;
      case 34:
        mapID = 33;
        playerX = 30;
        break;
      case 35:
        mapID = 34;
        playerX = 30;
        break;
      case 36:
        mapID = 35;
        playerX = 30;
        break;
      case 38:
        mapID = 37;
        playerX = 30;
        break;
      case 39:
        mapID = 38;
        playerX = 30;
        break;
      case 41:
        mapID = 40;
        playerX = 30;
        break;
      case 42:
        mapID = 43;
        playerX = 30;
        break;
      case 44:
        mapID = 45;
        playerX = 30;
        break;
      case 49:
        mapID = 52;
        playerX = 30;
        break;
      case 50:
        mapID = 49;
        playerX = 30;
        break;
        //case 52: mapID = 49; playerX = 30; break;
    }
    matrix.fillScreen(matrix.Color333(0, 0, 0));
    updateRaster(); // Refresh the raster
    displayGlowingPlayfield(3, 20);
    placeBaddies();
    for (byte i = 0; i < numBaddiesMax - 1; i++) {
      baddieShotActive[i] = false;
    }
  }
  else if (playerX >= 33) // Player moves eastwards
  {
    switch (mapID)
    {
      case 1:
        mapID = 0;
        playerX = 1;
        break;
      case 3:
        mapID = 4;
        playerX = 1;
        break;
      case 6:
        mapID = 7;
        playerX = 1;
        break;
      case 9:
        mapID = 11;
        playerX = 1;
        break;
      case 10:
        mapID = 9;
        playerX = 1;
        break;
      case 12:
        mapID = 13;
        playerX = 1;
        break;
      case 14:
        mapID = 17;
        playerX = 1;
        break;
      case 15:
        mapID = 16;
        playerX = 1;
        break;
      case 22:
        mapID = 23;
        playerX = 1;
        break;
      case 26:
        mapID = 25;
        playerX = 1;
        break;
      case 28:
        mapID = 26;
        playerX = 1;
        break;
      case 29:
        mapID = 28;
        playerX = 1;
        break;
      case 30:
        mapID = 31;
        playerX = 1;
        break;
      case 32:
        mapID = 33;
        playerX = 1;
        break;
      case 33:
        mapID = 34;
        playerX = 1;
        break;
      case 34:
        mapID = 35;
        playerX = 1;
        break;
      case 35:
        mapID = 36;
        playerX = 1;
        break;
      case 37:
        mapID = 38;
        playerX = 1;
        break;
      case 38:
        mapID = 39;
        playerX = 1;
        break;
      case 40:
        mapID = 41;
        playerX = 1;
        break;
      case 43:
        mapID = 42;
        playerX = 1;
        break;
      case 45:
        mapID = 44;
        playerX = 1;
        break;
      case 48:
        mapID = 10;
        playerX = 1;
        break;
      case 49:
        mapID = 50;
        playerX = 1;
        break;
      case 52:
        mapID = 49;
        playerX = 1;
        break;

    }

    matrix.fillScreen(matrix.Color333(0, 0, 0));
    updateRaster(); // Refresh the raster
    displayGlowingPlayfield(3, 20);
    placeBaddies();
    for (byte i = 0; i < numBaddiesMax - 1; i++) {
      baddieShotActive[i] = false;
    }
  }
}

void storeRoomData() // Obtain the data for room mapID and copy it into global variable screen
{
  int start = mapID * 64;

  // Obtain the screen data and store it in array screen
  for (int k = 0; k < 64; k++)
  {
    screen[k] = pgm_read_byte_near(playfield + start + k);
  }
}

// Draw player gets called at the end of the controlPlayer subroutine
void drawPlayer()
{
  if (animCtr == 10) { animCtr = 0; } else { animCtr++; }
  
  int col = matrix.Color333(1, 1, 0); // Default player sprite color
  int headCol;

  // (playerX, playerY) is the midpoint of the player's sprite
  // Clear player sprite at old position
  matrix.fillRect( playerX_old - 1, playerY_old - 1, 3, 3, matrix.Color333(0, 0, 0));

  // If the player has ammo left the player sprite has a glowing head, a pale red head otherwise
  if (numShotsLeft != 0) headCol = matrix.Color444(5, 1, 1);
  else headCol = matrix.Color444(2, 1, 1);

  if (playerInvincible) // Blink the player's sprite while he/she is invincible
  {
    if (animCtr == 5) 
    {
      headCol = matrix.Color444(6, 6, 6);
      col = matrix.Color444(6, 6, 6);
      tone(audio, NOTE_C5, 50);
      tone(audio, NOTE_G3, 50);
    }
  }

  if (joystick1Released == false) // Player is moving: update the animation phases
  {
    switch (playerAnimPhase)
    {

      case 0:

        if ((playerDir == 0) || (playerDir == 4)) // Player moves northwards or southwards
        {
          matrix.drawPixel( playerX + 0, playerY - 1, headCol);
          matrix.drawPixel( playerX + 0, playerY + 0, col);
          matrix.drawPixel( playerX + 1, playerY + 1, col);
        }
        else if ((playerDir == 5) || (playerDir == 6) || (playerDir == 7)) // Player moves westwards
        {
          matrix.drawPixel( playerX + 0, playerY - 1, headCol);
          matrix.drawPixel( playerX + 0, playerY + 0, col);
          matrix.drawPixel( playerX - 1, playerY + 1, col);
        }
        else if ((playerDir == 1) || (playerDir == 2) || (playerDir == 3)) // Player moves eastwards
        {
          matrix.drawPixel( playerX + 0, playerY - 1, headCol);
          matrix.drawPixel( playerX + 0, playerY + 0, col);
          matrix.drawPixel( playerX - 1, playerY + 1, col);
          matrix.drawPixel( playerX + 1, playerY + 0, col);
        }
        break;

      case 1:

        if ((playerDir == 0) || (playerDir == 4)) // Player moves northwards or southwards
        {
          matrix.drawPixel( playerX + 0, playerY - 1, headCol);
          matrix.drawPixel( playerX + 0, playerY + 0, col);
          matrix.drawPixel( playerX - 1, playerY + 1, col);
        }
        else if ((playerDir == 5) || (playerDir == 6) || (playerDir == 7)) // Player moves westwards
        {
          matrix.drawPixel( playerX + 0, playerY - 1, headCol);
          matrix.drawPixel( playerX + 0, playerY + 0, col);
          matrix.drawPixel( playerX + 1, playerY + 1, col);
          matrix.drawPixel( playerX - 1, playerY + 0, col);
        }
        else if ((playerDir == 1) || (playerDir == 2) || (playerDir == 3)) // Player moves eastwards
        {
          matrix.drawPixel( playerX + 0, playerY - 1, headCol);
          matrix.drawPixel( playerX + 0, playerY + 0, col);
          matrix.drawPixel( playerX + 1, playerY + 1, col);
        }
        break;

    } // switch

  }
  else // Player stands still: show the still image of the player's sprite
  {
    matrix.drawPixel( playerX + 0, playerY - 1, headCol);
    matrix.drawPixel( playerX + 0, playerY + 0, col);
    matrix.drawPixel( playerX - 1, playerY + 1, col);
    matrix.drawPixel( playerX + 1, playerY + 1, col);
  }
}


void placeBaddies()
{
  // Ordinary Baddies

  // Reset the animation phases for all baddies
  baddiePersAnimPhase[0] = 0;
  baddiePersAnimPhase[1] = 0;
  // None of the baddies is active per default. Otherwise, one had to set all baddies not used within a room to active[false]
  for (byte i = 0; i < numBaddiesMax - 1; i++) baddieActive[i] = false;

  // Special baddies
  // Vertical/falling spike
  for (byte i = 0; i < numVertSpikesMax - 1; i++)
  {
    vertSpikeAnimPhase[i] = 0;
    vertSpikeActive[i] = false;
    vertSpikeX[i] = -1;
    vertSpikeY[i] = -1;
  }
  // Horizontal spike
  for (byte i = 0; i < numHorizSpikesMax - 1; i++)
  {
    horizSpikeAnimPhase[i] = 0;
    horizSpikeActive[i] = false;
    horizSpikeX[i] = -1;
    horizSpikeY[i] = -1;
  }

  // Place baddies, keys and guns
  switch (mapID)
  {
    case 0:

      placePlayerRespawn(20, 23);

      placeBaddie(0, 9, 3, 0); // ID, x, y, personality

      break;

    case 1:

      //placePlayerRespawn(11, 11);

      placeHorizSpike(0, 17, 15, 5);
      //placeHorizSpike(1, 9, 7, 1);

      break;

    case 2:

      //placePlayerRespawn(11, 9);

      //placeVertSpike(0, 8, 2, 0);
      //placeVertSpike(1, 15, 2, 1);
      //placeHorizSpike(0, 2, 11, 0);
      //placeHorizSpike(1, 2, 19, 1);

      //placeKey(RED, 29, 28);
      placeKey(YELLOW, 3, 3);

      placeBaddie(0, 10, 14, 0);

      break;

    case 3:

      //placePlayerRespawn(3, 11);

      placeBaddie(0, 24, 29, 0);

      placeVertSpike(3, 10, 25, 4);
      placeVertSpike(0, 16, 25, 5);
      placeVertSpike(2, 22, 25, 7);

      placeGun(21, 4);

      break;

    case 4:

      //placePlayerRespawn(2, 27);

      placeBaddie(0, 25, 9, 0);
      placeBaddie(1, 17, 19, 0);
      //placeBaddie(2, 29, 29, 0);

      break;

    case 5:

      //placePlayerRespawn(11, 27);

      placeBaddie(0, 28, 20, 0);
      //placeBaddie(1, 13, 10, 2);
      //placeBaddie(2, 17, 12, 2);
      placeBaddie(3, 23, 21, 0);

      break;

    case 6:

      //placePlayerRespawn(20, 14);

      placeBaddie(0, 14, 9, 1);

      break;

    case 7:

      //placePlayerRespawn(8, 29);

      placeBaddie(0, 27, 29, 0);
      placeBaddie(1, 29, 3, 0);
      placeBaddie(2, 14, 2, 0);
      placeBaddie(3, 18, 19, 0);

      placeKey(YELLOW, 28, 11);
      placeVertSpike(0, 16, 9, 3);

      break;

    case 8:

      //placePlayerRespawn(3, 27);

      placeHorizSpike(0, 2, 24, 2);
      placeHorizSpike(1, 2, 16, 5);
      placeHorizSpike(2, 2, 8, 3);
      placeHorizSpike(3, 18, 24, 4);
      placeHorizSpike(4, 25, 15, 5);
      placeHorizSpike(5, 25, 10, 6);

      break;

    case 9:

      //placePlayerRespawn(26, 29);

      placeGun(11, 3);

      placeBaddie(0, 14, 3, 3); // Premiere: Shooting worm

      placeVertSpike(0, 4, 2, 0);

      break;

    case 10:

      //placePlayerRespawn(3, 28);

      placeBaddie(0, 10, 2, 0);
      placeBaddie(1, 18, 2, 0);
      placeBaddie(2, 21, 2, 0);
      placeBaddie(3, 10, 29, 1);
      placeBaddie(4, 14, 29, 1);


      break;

    case 11:

      //placePlayerRespawn(2, 14);

      placeBaddie(0, 14, 10, 0);
      //placeBaddie(1, 14, 15, 0);
      placeBaddie(1, 20, 29, 0);
      //placeBaddie(3, 18, 18, 0);
      placeBaddie(2, 18, 12, 0);
      placeBaddie(3, 29, 15, 0);
      placeBaddie(4, 4, 2, 0);

      placeGun(2, 2);

      break;

    case 12:

      //placePlayerRespawn(12, 28);

      placeGun(3, 20);

      placeBaddie(0, 4, 2, 0);
      placeBaddie(1, 20, 2, 1);
      placeBaddie(2, 4, 20, 0);
      placeBaddie(3, 20, 20, 3);

      break;

    case 13:

      //placePlayerRespawn(2, 12);

      placeGun(18, 19);

      placeKey(GREEN, 18, 14);

      placeBaddie(0, 28, 2, 0);
      placeBaddie(1, 28, 6, 0);
      placeBaddie(3, 28, 14, 1);
      placeBaddie(5, 28, 22, 2);
      placeBaddie(6, 28, 26, 3);

      break;

    case 14:

      //placePlayerRespawn(26, 19);

      placeBaddie(0, 10, 20, 0);
      placeBaddie(1, 3, 29, 0);
      placeBaddie(2, 29, 2, 3);
      placeBaddie(3, 29, 10, 2);
      placeBaddie(4, 21, 15, 1);

      placeKey(RED, 13, 20);

      placeGun(13, 24);

      break;

    case 15:

      //placePlayerRespawn(26, 22);

      placeGun(2, 2);

      placeBaddie(0, 28, 10, 0);
      placeBaddie(1, 28, 13, 0);
      placeBaddie(2, 3, 29, 0);
      placeBaddie(3, 3, 26, 0);

      placeVertSpike(0, 8, 17, 4);

      break;

    case 16:

      //placePlayerRespawn(3, 20);

      placeBaddie(0, 19, 2, 2);
      placeBaddie(1, 2, 10, 2);
      placeBaddie(2, 10, 10, 1);
      placeBaddie(3, 17, 10, 1);
      placeBaddie(4, 21, 10, 1);

      placeKey(VIOLET, 3, 28);
      placeKey(RED, 24, 2);

      break;

    case 17:

      //placePlayerRespawn(27, 27);

      placeBaddie(0, 10, 10, 3);
      placeBaddie(1, 2, 2, 1);
      placeBaddie(2, 2, 29, 2);
      placeBaddie(3, 29, 11, 3);

      break;

    case 18:

      //placePlayerRespawn(26, 26);

      placeVertSpike(0, 12, 2, 0);
      placeVertSpike(1, 28, 2, 0);

      placeHorizSpike(0, 10, 20, 0);

      placeBaddie(0, 2, 2, 3);
      placeBaddie(1, 2, 28, 3);

      placeKey(RED, 3, 3);

      break;

    case 19:

      //placePlayerRespawn(28, 28);

      placeHorizSpike(0, 26, 8, 3);
      placeHorizSpike(1, 26, 16, 3);
      placeHorizSpike(2, 26, 24, 3);
      placeHorizSpike(3, 10, 7, 0);

      placeBaddie(0, 19, 29, 3);
      placeBaddie(1, 11, 26, 0);
      placeBaddie(2, 11, 20, 0);

      break;

    case 20:

      //placePlayerRespawn(28, 28);

      placeHorizSpike(0, 26, 8, 4);
      placeHorizSpike(1, 26, 16, 4);
      placeHorizSpike(2, 26, 24, 4);

      placeKey(GREEN, 19, 29);
      placeKey(VIOLET, 3, 18);

      placeGun(20, 28);

      placeBaddie(0, 3, 19, 2);
      placeBaddie(1, 9, 19, 2);
      placeBaddie(2, 3, 11, 2);
      placeBaddie(3, 9, 11, 2);

      break;

    case 21:

      //placePlayerRespawn(10, 3);

      placeGun(2, 2);

      placeBaddie(0, 27, 27, 0);
      placeBaddie(2, 6, 14, 1);
      placeBaddie(3, 2, 18, 1);
      placeBaddie(4, 10, 18, 0);
      placeBaddie(6, 18, 18, 0);
      placeBaddie(7, 10, 22, 0);

      break;

    case 22:

      //placePlayerRespawn(27, 3);

      placeBaddie(0, 3, 3, 0);
      placeBaddie(1, 10, 10, 0);
      placeBaddie(2, 22, 22, 0);
      placeBaddie(3, 28, 28, 3);

      placeGun(12, 21);

      break;

    case 23:

      //placePlayerRespawn(3, 12);

      placeGun(11, 28);

      placeBaddie(0, 27, 13, 1);
      placeBaddie(1, 27, 9, 1);
      placeBaddie(2, 27, 18, 1);
      placeBaddie(3, 27, 27, 1);

      placeKey(GREEN, 28, 13);

      break;

    case 24:

      //placePlayerRespawn(20, 3);

      placeBaddie(0, 11, 11, 0);
      placeBaddie(1, 28, 11, 0);
      placeBaddie(2, 11, 28, 0);
      placeBaddie(3, 28, 28, 0);

      break;

    case 25:

      //placePlayerRespawn(21, 3);

      placeBaddie(0, 3, 28, 0);
      placeBaddie(1, 11, 28, 0);
      placeBaddie(2, 19, 28, 0);
      placeBaddie(3, 27, 28, 0);

      placeVertSpike(0, 0, 9, 1);
      placeVertSpike(1, 16, 9, 3);
      placeVertSpike(2, 24, 9, 2);

      break;

    case 26:

      //placePlayerRespawn(28, 11);

      placeGun(28, 28);

      placeBaddie(0, 11, 11, 2);
      placeBaddie(1, 15, 11, 2);
      placeBaddie(2, 11, 15, 2);
      placeBaddie(3, 15, 15, 2);
      placeBaddie(4, 3, 28, 3);

      break;

    case 27:

      //placePlayerRespawn(20, 28);

      placeHorizSpike(0, 18, 26, 4);
      placeHorizSpike(1, 18, 21, 4);
      placeHorizSpike(2, 18, 16, 4);
      placeHorizSpike(3, 18, 6, 4);

      placeVertSpike(0, 8, 10, 0);
      placeVertSpike(1, 13, 10, 0);

      placeKey(VIOLET, 18, 2);
      placeGun(3, 11);

      break;

    case 28:

      //placePlayerRespawn(29, 11);

      placeBaddie(0, 12, 3, 1);
      placeBaddie(1, 17, 3, 1);
      placeBaddie(2, 3, 19, 1);
      placeBaddie(3, 3, 24, 1);

      placeGun(28, 3);

      break;

    case 29:

      //placePlayerRespawn(29, 11);

      placeBaddie(0, 3, 3, 3);
      placeBaddie(1, 3, 29, 3);

      placeVertSpike(0, 16, 9, 1);
      placeVertSpike(1, 24, 9, 2);

      placeGun(28, 3);

      break;

    case 30:

      //placePlayerRespawn(20, 28);

      placeBaddie(0, 28, 12, 0);
      placeBaddie(1, 28, 23, 0);
      placeBaddie(2, 28, 17, 0);

      placeHorizSpike(0, 18, 24, 2);
      placeVertSpike(0, 24, 18, 2);

      break;

    case 31:

      //placePlayerRespawn(3, 3);

      placeKey(YELLOW, 28, 28);

      placeBaddie(0, 29, 2, 2);
      placeBaddie(1, 29, 29, 2);
      placeBaddie(2, 16, 29, 3);
      placeBaddie(3, 22, 29, 3);

      placeGun(22, 22);

      break;

    case 32:

      //placePlayerRespawn(15, 15);

      placeGun(18, 15);

      placeBaddie(0, 2, 2, 0);
      placeBaddie(1, 7, 2, 0);
      placeBaddie(2, 12, 2, 0);
      placeBaddie(3, 17, 2, 0);
      placeBaddie(4, 2, 20, 0);
      placeBaddie(5, 7, 20, 0);
      placeBaddie(6, 22, 20, 0);
      placeBaddie(7, 23, 23, 0);

      break;

    case 33:

      //placePlayerRespawn(28, 3);

      placeGun(20, 20);

      placeBaddie(0, 3, 27, 3);
      placeBaddie(1, 8, 27, 2);
      placeBaddie(2, 16, 20, 0);

      break;

    case 34:

      //placePlayerRespawn(28, 11);

      placeBaddie(0, 3, 11, 3);
      placeBaddie(1, 3, 17, 2);
      placeBaddie(2, 3, 24, 1);
      placeBaddie(3, 9, 29, 0);
      placeBaddie(4, 14, 29, 0);
      placeBaddie(5, 18, 29, 0);

      placeKey(YELLOW, 12, 20);

      placeGun(28, 2);

      break;

    case 35:

      //placePlayerRespawn(11, 3);

      placeHorizSpike(0, 2, 16, 1);
      placeHorizSpike(1, 25, 9, 1);
      placeVertSpike(0, 7, 2, 1);
      placeVertSpike(1, 16, 2, 1);
      placeVertSpike(2, 24, 17, 1);

      placeGun(28, 28);

      placeBaddie(0, 3, 28, 3);
      placeBaddie(1, 28, 2, 3);

      break;

    case 36:

      //placePlayerRespawn(3, 20);

      placeKey(RED, 28, 3);
      placeKey(YELLOW, 28, 11);

      placeBaddie(0, 3, 3, 2);
      placeBaddie(1, 12, 3, 2);
      placeBaddie(2, 20, 11, 1);
      placeBaddie(3, 27, 20, 0);

      placeGun(11, 28);

      break;


    case 37:

      //placePlayerRespawn(12, 3);

      placeKey(RED, 3, 3);

      placeGun(14, 28);

      placeBaddie(0, 28, 11, 0);
      placeBaddie(1, 16, 16, 0);
      placeBaddie(2, 11, 11, 0);
      placeBaddie(3, 3, 28, 0);
      placeBaddie(4, 9, 28, 0);

      break;

    case 38:

      //placePlayerRespawn(28, 28);

      placeBaddie(0, 10, 3, 0);
      placeBaddie(1, 18, 28, 1);
      placeBaddie(2, 26, 3, 0);

      break;


    case 39:

      //placePlayerRespawn(3, 28);

      placeGun(20, 28);

      placeKey(RED, 2, 2);
      placeKey(GREEN, 20, 2);
      placeKey(YELLOW, 28, 2);

      placeBaddie(0, 12, 12, 3);
      placeBaddie(1, 3, 12, 3);
      placeBaddie(2, 6, 21, 3);

      break;

    case 40:

      //placePlayerRespawn(28, 3);

      placeVertSpike(0, 20, 2, 0);
      placeHorizSpike(0, 2, 13, 0);

      placeBaddie(0, 2, 12, 0);
      placeBaddie(1, 6, 12, 0);
      placeBaddie(2, 10, 12, 0);
      placeBaddie(3, 18, 18, 0);

      break;

    case 41:

      //placePlayerRespawn(28, 3);

      placeGun(20, 20);
      placeKey(VIOLET, 25, 20);

      placeBaddie(0, 11, 3, 0);
      placeBaddie(1, 14, 11, 0);
      placeBaddie(2, 15, 3, 0);
      placeBaddie(3, 15, 11, 0);

      break;

    case 42:

      //placePlayerRespawn(19, 28);

      placeGun(12, 28);

      placeBaddie(0, 3, 3, 3);
      placeBaddie(1, 20, 12, 1);
      placeBaddie(2, 1, 19, 0);

      break;

    case 43:

      //placePlayerRespawn(28, 19);

      placeVertSpike(0, 13, 2, 2);
      placeVertSpike(1, 18, 2, 3);
      placeVertSpike(2, 23, 2, 2);
      placeVertSpike(3, 18, 17, 2);
      placeVertSpike(4, 15, 17, 3);
      placeVertSpike(5, 24, 17, 2);
      placeHorizSpike(0, 2, 8, 2);
      placeHorizSpike(1, 2, 16, 3);

      break;

    case 44:

      //placePlayerRespawn(3, 19);

      placeGun(28, 21);

      placeBaddie(0, 3, 3, 2);
      placeBaddie(1, 28, 11, 0);
      placeBaddie(2, 20, 20, 0);
      placeBaddie(3, 15, 20, 1);

      break;

    case 45:

      //placePlayerRespawn(28, 28);

      placeBaddie(0, 3, 20, 3);
      placeBaddie(1, 12, 28, 3);
      placeBaddie(2, 3, 24, 1);
      placeBaddie(3, 20, 2, 2);

      break;

    case 46:

      //placePlayerRespawn(28, 28);

      placeGun(19, 12);

      placeBaddie(0, 23, 12, 2);
      placeBaddie(1, 19, 19, 2);

      break;

    case 47:

      //placePlayerRespawn(11, 28);

      placeGun(3, 28);

      placeBaddie(0, 2, 2, 4);

      placeBaddie(1, 28, 2, 1);
      placeBaddie(2, 23, 2, 1);
      placeBaddie(3, 20, 2, 1);
      placeBaddie(4, 15, 2, 1);
      placeBaddie(5, 2, 11, 1);
      placeBaddie(6, 8, 11, 1);
      placeBaddie(7, 3, 19, 1);
      placeBaddie(8, 9, 19, 1);

      break;

    case 48:

      //placePlayerRespawn(27, 13);

      placeBaddie(0, 29, 29, 1);
      placeBaddie(1, 13, 29, 2);
      placeBaddie(2, 2, 2, 3);
      placeBaddie(3, 2, 12, 0);
      placeBaddie(4, 2, 16, 1);

      break;

    case 49:

      //placePlayerRespawn(26, 20);

      placeVertSpike(0, 13, 17, 3);
      placeVertSpike(1, 18, 17, 3);
      placeVertSpike(2, 23, 17, 3);

      placeHorizSpike(0, 1, 7, 0);

      placeKey(YELLOW, 6, 12);

      placeBaddie(0, 2, 11, 3);
      placeBaddie(1, 2, 7, 2);
      placeBaddie(2, 26, 2, 0);

      placeGun(28, 3);

      break;

    case 50:

      //placePlayerRespawn(19, 29);

      placeVertSpike(0, 9, 18, 2);
      placeVertSpike(1, 10, 18, 2);
      placeVertSpike(2, 16, 18, 2);
      placeVertSpike(3, 5, 18, 2);
      placeVertSpike(4, 6, 18, 2);

      break;


    case 51:

      //placePlayerRespawn(27, 21);

      placeKey(VIOLET, 28, 11);

      placeBaddie(0, 2, 2, 1);
      placeBaddie(1, 2, 7, 1);
      placeBaddie(3, 2, 12, 1);
      placeBaddie(4, 2, 17, 1);
      placeBaddie(5, 2, 22, 1);

      break;


    case 52:

      //placePlayerRespawn(20, 18);

      placeVertSpike(0, 5, 1, 0);
      placeVertSpike(1, 10, 1, 1);
      placeVertSpike(2, 15, 1, 2);
      placeVertSpike(3, 24, 1, 3);

      placeHorizSpike(0, 1, 5, 0);
      placeHorizSpike(1, 1, 10, 1);
      placeHorizSpike(2, 1, 16, 2);
      placeHorizSpike(3, 1, 18, 0);
      placeHorizSpike(3, 1, 21, 0);

      placeBaddie(0, 12, 12, 0);
      placeBaddie(1, 17, 12, 0);
      placeBaddie(2, 12, 17, 0);
      placeBaddie(3, 17, 17, 0);

      placeKey(RED, 2, 13);
      placeKey(YELLOW, 12, 2);
      placeKey(GREEN, 12, 29);
      placeKey(VIOLET, 29, 13);

      placeGun(18, 29);

      break;
  }

}


void placeBaddie(byte id, byte x, byte y, byte personality)
{
  baddieX[id] = x;
  baddieY[id] = y;
  baddie_initialX[id] = x;
  baddie_initialY[id] = y;
  baddieActive[id] = true;
  baddiePersonality[id] = personality;
}

void placeVertSpike(byte id, byte x, byte y, byte del)
{
  vertSpikeX[id] = x;
  vertSpikeY[id] = y;
  vertSpikeActive[id] = true;
  vertSpike_delay[id] = del;
  vertSpike_initialX[id] = x;
  vertSpike_initialY[id] = y;
}

void placeHorizSpike(byte id, byte x, byte y, byte del)
{
  horizSpikeX[id] = x;
  horizSpikeY[id] = y;
  horizSpikeActive[id] = true;
  horizSpike_delay[id] = del;
  horizSpike_initialX[id] = x;
  horizSpike_initialY[id] = y;
}

void placeKey(byte col, byte x, byte y)
{
  keyX[col][mapID] = x;
  keyY[col][mapID] = y;
}

void placeGun(byte x, byte y)
{
  gunX[mapID] = x;
  gunY[mapID] = y;
}

void placePlayerRespawn(byte x, byte y)
{
  playerX_start[mapID] = x;
  playerY_start[mapID] = y;
}

// This subroutine is not called directly but from within the timing framework
void drawArtefacts()
{
  int keyColor1;
  int keyColor2;
  int col;

  if (artefactsAnimCtr > 20)
  {
    artefactsAnimCtr = 0;
  }
  else
  {
    artefactsAnimCtr++;
  }

  // Draw gun
  if ((gunX[mapID] != -1) && (gunY[mapID] != -1)) // Negative coordinates mean that no gun is present in playing area mapID
  {
    if (gunCollected[mapID] == false) // Draw the gun only if the player has not already taken it before
    {
      int col;
      if (artefactsAnimCtr < 6) // Blink regularly
      {
        col = matrix.Color444(3, 3, 3);
      }
      else
      {
        col = matrix.Color444(0, 0, 0);
      }
      //byte r = random(0, 11);
      /*
      if (r > 3) {
      {
        col = matrix.Color444(3, 3, 3);
      }
      /*
      else if (r > 6) {
        col = matrix.Color444(2, 2, 2);
      }
      else 
      {
        col = matrix.Color444(1, 1, 1);
      }
      */
      matrix.drawPixel( gunX[mapID] + 0, gunY[mapID] + 0, col);
      matrix.drawPixel( gunX[mapID] + 1, gunY[mapID] + 0, col);
      matrix.drawPixel( gunX[mapID] - 1, gunY[mapID] + 1, col);
    } // gun not collected
  }

  // Draw keys
  for (byte i = 0; i < 4; i++)
  {
    // Choose the right colors for each key
    switch (i)
    {
      case 0:
        col = matrix.Color888(0, 24, 0);
        break;
      case 1:
        col = matrix.Color888(24, 0, 0);
        break;
      case 2:
        col = matrix.Color888(24, 24, 0);
        break;
      case 3:
        col = matrix.Color888(25, 0, 20);
        break;
    }

    if ((keyX[i][mapID] != -1) && (keyY[i][mapID] != -1)) // Negative coordinates mean that no key of the sort is present in playing area mapID
    {
      if (keyCollected[i][mapID] == false) // Draw the key only if the player has not already taken it before
      {
        if (artefactsAnimCtr < 6) // Blink regularly
        {
          matrix.fillRect( keyX[i][mapID] - 1, keyY[i][mapID] - 1, 3, 3, matrix.Color444(0, 0, 0));
        }
        else
        {
          matrix.drawPixel( keyX[i][mapID] - 1, keyY[i][mapID] - 1, col);
          matrix.drawPixel( keyX[i][mapID] - 1, keyY[i][mapID] + 0, col);
          matrix.drawPixel( keyX[i][mapID] - 1, keyY[i][mapID] + 1, col);
          matrix.drawPixel( keyX[i][mapID] + 0, keyY[i][mapID] - 1, col);
        }
      }
    }
  }
}


// Control baddies is not called directly but within the timing framework
void controlBaddies()
{
  moveBaddies();
  drawBaddies();
}

// DrawBaddies is called from within the subroutine controlBaddies
void drawBaddies()
{
  // Toggle the animation phases per baddie personality
  for (byte i = 0; i < numBaddieTypes; i++)
  {
    if (baddiePersAnimPhase[i] != -1) {
      if (baddiePersAnimPhase[i] == baddiePersNumAnimPhases[i] - 1) {
        baddiePersAnimPhase[i] = 0;
      }
      else {
        baddiePersAnimPhase[i]++;
      }
    }
  }

  for (byte i = 0; i < numBaddiesMax - 1; i++)
  {
    if (baddieActive[i] == true)
    {
      // Clear baddie sprite at old position
      matrix.fillRect( baddieX_old[i] - 1, baddieY_old[i] - 1, 3, 3, matrix.Color333(0, 0, 0));

      // Draw baddie sprite of type baddieType
      switch ( baddiePersonality[i] )
      {

        case 0: // Red/Harmless

          switch (baddiePersAnimPhase[0])
          {
            case -1: // Still
              matrix.drawPixel( baddieX[i] - 1, baddieY[i] + 0, matrix.Color444(2, 0, 0));
              matrix.drawPixel( baddieX[i] + 1, baddieY[i] + 0, matrix.Color444(1, 0, 0));
              matrix.drawPixel( baddieX[i] + 0, baddieY[i] + 0, matrix.Color444(1, 0, 0));
              matrix.drawPixel( baddieX[i] - 1, baddieY[i] + 1, matrix.Color444(1, 0, 0));
              matrix.drawPixel( baddieX[i] + 1, baddieY[i] + 1, matrix.Color444(2, 0, 0));
              matrix.drawPixel( baddieX[i] + 0, baddieY[i] - 1, matrix.Color444(1, 1, 1));
              break;

            case 0:
              matrix.drawPixel( baddieX[i] + 0, baddieY[i] + 0, matrix.Color444(2, 0, 0));
              matrix.drawPixel( baddieX[i] - 1, baddieY[i] + 0, matrix.Color444(2, 0, 0));
              matrix.drawPixel( baddieX[i] + 1, baddieY[i] + 0, matrix.Color444(1, 0, 0));
              matrix.drawPixel( baddieX[i] + 0, baddieY[i] + 0, matrix.Color444(1, 0, 0));
              matrix.drawPixel( baddieX[i] - 1, baddieY[i] + 1, matrix.Color444(1, 0, 0));
              matrix.drawPixel( baddieX[i] + 0, baddieY[i] - 1, matrix.Color444(1, 1, 1));
              break;

            case 1:
              matrix.drawPixel( baddieX[i] + 0, baddieY[i] + 0, matrix.Color444(2, 0, 0));
              matrix.drawPixel( baddieX[i] - 1, baddieY[i] + 0, matrix.Color444(2, 0, 0));
              matrix.drawPixel( baddieX[i] + 1, baddieY[i] + 0, matrix.Color444(1, 0, 0));
              matrix.drawPixel( baddieX[i] + 0, baddieY[i] + 0, matrix.Color444(1, 0, 0));
              matrix.drawPixel( baddieX[i] + 1, baddieY[i] + 1, matrix.Color444(2, 0, 0));
              matrix.drawPixel( baddieX[i] + 0, baddieY[i] - 1, matrix.Color444(1, 1, 1));
              break;
          }
          break;

        case 1: // Green

          switch (baddiePersAnimPhase[1])
          {
            case -1:
              matrix.drawPixel( baddieX[i] + 0, baddieY[i] + 0, matrix.Color444(0, 2, 0));
              matrix.drawPixel( baddieX[i] - 1, baddieY[i] + 0, matrix.Color444(0, 2, 0));
              matrix.drawPixel( baddieX[i] + 1, baddieY[i] + 0, matrix.Color444(0, 1, 0));
              matrix.drawPixel( baddieX[i] + 0, baddieY[i] + 0, matrix.Color444(0, 1, 0));
              matrix.drawPixel( baddieX[i] - 1, baddieY[i] + 1, matrix.Color444(0, 1, 0));
              matrix.drawPixel( baddieX[i] + 1, baddieY[i] + 1, matrix.Color444(0, 2, 0));
              matrix.drawPixel( baddieX[i] + 0, baddieY[i] - 1, matrix.Color444(1, 1, 1));
              break;

            case 0:
              matrix.drawPixel( baddieX[i] + 0, baddieY[i] + 0, matrix.Color444(0, 2, 0));
              matrix.drawPixel( baddieX[i] - 1, baddieY[i] + 0, matrix.Color444(0, 2, 0));
              matrix.drawPixel( baddieX[i] + 1, baddieY[i] + 0, matrix.Color444(0, 1, 0));
              matrix.drawPixel( baddieX[i] + 0, baddieY[i] + 0, matrix.Color444(0, 1, 0));
              matrix.drawPixel( baddieX[i] - 1, baddieY[i] + 1, matrix.Color444(0, 1, 0));
              matrix.drawPixel( baddieX[i] + 0, baddieY[i] - 1, matrix.Color444(1, 1, 1));
              break;

            case 1:
              matrix.drawPixel( baddieX[i] + 0, baddieY[i] + 0, matrix.Color444(0, 2, 0));
              matrix.drawPixel( baddieX[i] - 1, baddieY[i] + 0, matrix.Color444(0, 2, 0));
              matrix.drawPixel( baddieX[i] + 1, baddieY[i] + 0, matrix.Color444(0, 1, 0));
              matrix.drawPixel( baddieX[i] + 0, baddieY[i] + 0, matrix.Color444(0, 1, 0));
              matrix.drawPixel( baddieX[i] + 1, baddieY[i] + 1, matrix.Color444(0, 1, 0));
              matrix.drawPixel( baddieX[i] + 0, baddieY[i] - 1, matrix.Color444(1, 1, 1));
              break;
          }
          break;

        case 2: // Violet

          switch (baddiePersAnimPhase[2])
          {
            case -1:
              matrix.fillRect(baddieX[i] - 1, baddieY[i] - 1, 3, 3, matrix.Color444(1, 0, 1));
              matrix.drawPixel(baddieX[i], baddieY[i] + 0, matrix.Color444(1, 1, 1));
              break;

            case 0:
              matrix.drawPixel(baddieX[i] + 0, baddieY[i] - 1, matrix.Color444(1, 0, 1));
              matrix.drawPixel(baddieX[i] + 0, baddieY[i] + 1, matrix.Color444(1, 0, 1));
              matrix.drawPixel(baddieX[i] - 1, baddieY[i] + 0, matrix.Color444(1, 0, 1));
              matrix.drawPixel(baddieX[i] + 1, baddieY[i] + 0, matrix.Color444(1, 0, 1));

              matrix.drawPixel(baddieX[i], baddieY[i] + 0, matrix.Color444(1, 1, 1));
              matrix.drawPixel(baddieX[i] - 1, baddieY[i] - 1, matrix.Color444(4, 0, 0));
              break;

            case 1:

              matrix.drawPixel(baddieX[i] + 0, baddieY[i] - 1, matrix.Color444(1, 0, 1));
              matrix.drawPixel(baddieX[i] + 0, baddieY[i] + 1, matrix.Color444(1, 0, 1));
              matrix.drawPixel(baddieX[i] - 1, baddieY[i] + 0, matrix.Color444(1, 0, 1));
              matrix.drawPixel(baddieX[i] + 1, baddieY[i] + 0, matrix.Color444(1, 0, 1));

              matrix.drawPixel(baddieX[i], baddieY[i] + 0, matrix.Color444(2, 1, 1));
              matrix.drawPixel(baddieX[i] - 0, baddieY[i] - 1, matrix.Color444(4, 0, 0));
              break;

            case 2:

              matrix.drawPixel(baddieX[i] + 0, baddieY[i] - 1, matrix.Color444(1, 0, 1));
              matrix.drawPixel(baddieX[i] + 0, baddieY[i] + 1, matrix.Color444(1, 0, 1));
              matrix.drawPixel(baddieX[i] - 1, baddieY[i] + 0, matrix.Color444(1, 0, 1));
              matrix.drawPixel(baddieX[i] + 1, baddieY[i] + 0, matrix.Color444(1, 0, 1));


              matrix.drawPixel(baddieX[i], baddieY[i] + 0, matrix.Color444(2, 1, 1));
              matrix.drawPixel(baddieX[i] + 1, baddieY[i] - 1, matrix.Color444(4, 0, 0));
              break;

            case 3:

              matrix.drawPixel(baddieX[i] + 0, baddieY[i] - 1, matrix.Color444(1, 0, 1));
              matrix.drawPixel(baddieX[i] + 0, baddieY[i] + 1, matrix.Color444(1, 0, 1));
              matrix.drawPixel(baddieX[i] - 1, baddieY[i] + 0, matrix.Color444(1, 0, 1));
              matrix.drawPixel(baddieX[i] + 1, baddieY[i] + 0, matrix.Color444(1, 0, 1));


              matrix.drawPixel(baddieX[i], baddieY[i] + 0, matrix.Color444(2, 2, 2));
              matrix.drawPixel(baddieX[i] + 1, baddieY[i] + 0, matrix.Color444(4, 0, 0));
              break;

            case 4:
              matrix.drawPixel(baddieX[i] + 0, baddieY[i] - 1, matrix.Color444(1, 0, 1));
              matrix.drawPixel(baddieX[i] + 0, baddieY[i] + 1, matrix.Color444(1, 0, 1));
              matrix.drawPixel(baddieX[i] - 1, baddieY[i] + 0, matrix.Color444(1, 0, 1));
              matrix.drawPixel(baddieX[i] + 1, baddieY[i] + 0, matrix.Color444(1, 0, 1));

              matrix.drawPixel(baddieX[i] + 1, baddieY[i] + 0, matrix.Color444(1, 0, 1));
              matrix.drawPixel(baddieX[i], baddieY[i] + 0, matrix.Color444(2, 2, 2));
              matrix.drawPixel(baddieX[i] + 1, baddieY[i] + 1, matrix.Color444(4, 0, 0));
              break;

            case 5:
              matrix.drawPixel(baddieX[i] + 0, baddieY[i] - 1, matrix.Color444(1, 0, 1));
              matrix.drawPixel(baddieX[i] + 0, baddieY[i] + 1, matrix.Color444(1, 0, 1));
              matrix.drawPixel(baddieX[i] - 1, baddieY[i] + 0, matrix.Color444(1, 0, 1));

              matrix.drawPixel(baddieX[i] + 1, baddieY[i] + 0, matrix.Color444(1, 0, 1));
              matrix.drawPixel(baddieX[i], baddieY[i] + 0, matrix.Color444(2, 1, 1));
              matrix.drawPixel(baddieX[i] + 0, baddieY[i] + 1, matrix.Color444(4, 0, 0));
              break;

            case 6:

              matrix.drawPixel(baddieX[i] + 0, baddieY[i] - 1, matrix.Color444(1, 0, 1));
              matrix.drawPixel(baddieX[i] + 0, baddieY[i] + 1, matrix.Color444(1, 0, 1));
              matrix.drawPixel(baddieX[i] - 1, baddieY[i] + 0, matrix.Color444(1, 0, 1));
              matrix.drawPixel(baddieX[i] + 1, baddieY[i] + 0, matrix.Color444(1, 0, 1));

              matrix.drawPixel(baddieX[i], baddieY[i] + 0, matrix.Color444(1, 1, 1));
              matrix.drawPixel(baddieX[i] - 1, baddieY[i] + 1, matrix.Color444(4, 0, 0));
              break;

            case 7:

              matrix.drawPixel(baddieX[i] + 0, baddieY[i] - 1, matrix.Color444(1, 0, 1));
              matrix.drawPixel(baddieX[i] + 0, baddieY[i] + 1, matrix.Color444(1, 0, 1));
              matrix.drawPixel(baddieX[i] - 1, baddieY[i] + 0, matrix.Color444(1, 0, 1));
              matrix.drawPixel(baddieX[i] + 1, baddieY[i] + 0, matrix.Color444(1, 0, 1));


              matrix.drawPixel(baddieX[i], baddieY[i] + 0, matrix.Color444(1, 1, 1));
              matrix.drawPixel(baddieX[i] - 1, baddieY[i] + 0, matrix.Color444(4, 0, 0));
              break;

          }
          break;


        case 3: // Shooting worm

          switch (baddiePersAnimPhase[3])
          {
            case -1:
              matrix.drawPixel(baddieX[i] + 0, baddieY[i] - 1, matrix.Color333(0, 2, 3));
              matrix.drawPixel(baddieX[i] - 1, baddieY[i] + 0, matrix.Color333(0, 2, 3));
              matrix.drawPixel(baddieX[i] + 1, baddieY[i] + 0, matrix.Color333(0, 2, 3));
              matrix.drawPixel(baddieX[i] + 1, baddieY[i] + 1, matrix.Color333(0, 2, 3));
              matrix.drawPixel(baddieX[i] - 1, baddieY[i] + 1, matrix.Color333(0, 2, 3));
              break;

            case 0:
              matrix.drawPixel(baddieX[i] + 0, baddieY[i] - 1, matrix.Color333(0, 2, 3));
              matrix.drawPixel(baddieX[i] - 1, baddieY[i] + 0, matrix.Color333(0, 2, 3));
              matrix.drawPixel(baddieX[i] + 1, baddieY[i] + 0, matrix.Color333(0, 2, 3));
              matrix.drawPixel(baddieX[i] + 1, baddieY[i] + 1, matrix.Color333(0, 2, 3));
              matrix.drawPixel(baddieX[i] - 1, baddieY[i] + 1, matrix.Color333(0, 2, 3));
              break;

            case 1:
              matrix.drawPixel(baddieX[i] - 1, baddieY[i] - 1, matrix.Color333(1, 3, 3));
              matrix.drawPixel(baddieX[i] + 0, baddieY[i] - 1, matrix.Color333(1, 3, 3));
              matrix.drawPixel(baddieX[i] + 1, baddieY[i] + 0, matrix.Color333(1, 3, 3));
              matrix.drawPixel(baddieX[i] + 1, baddieY[i] + 1, matrix.Color333(1, 3, 3));
              matrix.drawPixel(baddieX[i] - 1, baddieY[i] + 0, matrix.Color333(1, 3, 3));
              break;

            case 2:
              matrix.drawPixel(baddieX[i] - 1, baddieY[i] - 1, matrix.Color333(2, 3, 3));
              matrix.drawPixel(baddieX[i] + 0, baddieY[i] - 1, matrix.Color333(2, 3, 3));
              matrix.drawPixel(baddieX[i] + 1, baddieY[i] + 0, matrix.Color333(2, 3, 3));
              matrix.drawPixel(baddieX[i] + 0, baddieY[i] + 1, matrix.Color333(2, 3, 3));
              matrix.drawPixel(baddieX[i] - 1, baddieY[i] + 1, matrix.Color333(2, 3, 3));
              break;

            case 3:
              matrix.drawPixel(baddieX[i] + 0, baddieY[i] - 1, matrix.Color333(1, 2, 3));
              matrix.drawPixel(baddieX[i] + 1, baddieY[i] - 1, matrix.Color333(1, 2, 3));
              matrix.drawPixel(baddieX[i] + 1, baddieY[i] + 0, matrix.Color333(1, 2, 3));
              matrix.drawPixel(baddieX[i] + 0, baddieY[i] + 1, matrix.Color333(1, 2, 3));
              matrix.drawPixel(baddieX[i] - 1, baddieY[i] + 1, matrix.Color333(1, 2, 3));
              break;
          }
          break;

        case 4: // Johann

          matrix.drawPixel( baddieX[i] - 1, baddieY[i] - 1, matrix.Color444(3, 0, 0));
          matrix.drawPixel( baddieX[i] + 1, baddieY[i] - 1, matrix.Color444(3, 0, 0));
          matrix.drawPixel( baddieX[i] - 1, baddieY[i] + 1, matrix.Color444(3, 3, 3));
          matrix.drawPixel( baddieX[i] + 0, baddieY[i] + 1, matrix.Color444(1, 1, 1));
          matrix.drawPixel( baddieX[i] + 1, baddieY[i] + 1, matrix.Color444(3, 3, 3));
          break;

      } // switch baddiePersonality
    } // baddie i active
  }


  // Animate the special baddies

  // Vertical spike
  // Every spike uses the same animation phases but the falling phase differs between them.
  // This is way each of them has a separater counter for their animation phases.
  for (byte i = 0; i < numVertSpikesMax - 1; i++)
  {
    if ((vertSpikeActive[i] == true) && (vertSpikeOnHold[i] == false))
    {
      // Clear vertical spike at old position
      matrix.drawLine( vertSpikeX_old[i], vertSpikeY_old[i] - 1, vertSpikeX_old[i], vertSpikeY_old[i] + 1, matrix.Color333(0, 0, 0));

      switch (vertSpikeAnimPhase[i])
      {
        case 0:

          break;

        case 1:
          matrix.drawPixel( vertSpikeX[i] - 0, vertSpikeY[i] - 1, matrix.Color444(2, 2, 2));
          break;

        case 2:
          matrix.drawPixel( vertSpikeX[i] - 0, vertSpikeY[i] - 1, matrix.Color444(2, 2, 2));
          matrix.drawPixel( vertSpikeX[i] - 0, vertSpikeY[i] - 0, matrix.Color444(2, 2, 2));
          break;

        case 3:
          matrix.drawPixel( vertSpikeX[i] - 0, vertSpikeY[i] - 1, matrix.Color444(2, 2, 2));
          matrix.drawPixel( vertSpikeX[i] - 0, vertSpikeY[i] - 0, matrix.Color444(2, 2, 2));
          matrix.drawPixel( vertSpikeX[i] - 0, vertSpikeY[i] + 1, matrix.Color444(2, 2, 2));
          break;

        case 4:
          matrix.drawPixel( vertSpikeX[i] - 0, vertSpikeY[i] - 0, matrix.Color444(2, 2, 2));
          matrix.drawPixel( vertSpikeX[i] - 0, vertSpikeY[i] + 1, matrix.Color444(2, 2, 2));
          break;

        case 5:
          matrix.drawPixel( vertSpikeX[i] - 0, vertSpikeY[i] + 1, matrix.Color444(2, 2, 2));
          break;
      }
    }
  } // for all vertical spikes

  // Horizontal spike
  // Every spike uses the same animation phases but the traveling phase differs between them.
  // This is way each of them has a separater counter for their animation phases.
  for (byte i = 0; i < numHorizSpikesMax - 1; i++)
  {
    if ((horizSpikeActive[i] == true) && (horizSpikeOnHold[i] == false))
    {
      // Clear vertical spike at old position
      //matrix.fillRect( horizSpikeX_old[i]-1, horizSpikeY_old[i]-1, 3, 3, matrix.Color333(0, 0, 0));
      matrix.drawLine( horizSpikeX_old[i] - 1, horizSpikeY_old[i], horizSpikeX_old[i] + 1, horizSpikeY_old[i], matrix.Color333(0, 0, 0));

      switch (horizSpikeAnimPhase[i])
      {
        case 0:
          break;

        case 1:
          matrix.drawPixel( horizSpikeX[i] - 1, horizSpikeY[i] - 0, matrix.Color444(2, 2, 2));
          break;

        case 2:
          matrix.drawPixel( horizSpikeX[i] - 1, horizSpikeY[i] - 0, matrix.Color444(2, 2, 2));
          matrix.drawPixel( horizSpikeX[i] - 0, horizSpikeY[i] - 0, matrix.Color444(2, 2, 2));
          break;

        case 3:
          matrix.drawPixel( horizSpikeX[i] - 1, horizSpikeY[i] - 0, matrix.Color444(2, 2, 2));
          matrix.drawPixel( horizSpikeX[i] - 0, horizSpikeY[i] - 0, matrix.Color444(2, 2, 2));
          matrix.drawPixel( horizSpikeX[i] + 1, horizSpikeY[i] - 0, matrix.Color444(2, 2, 2));
          break;

        case 4:
          matrix.drawPixel( horizSpikeX[i] - 0, horizSpikeY[i] - 0, matrix.Color444(2, 2, 2));
          matrix.drawPixel( horizSpikeX[i] + 1, horizSpikeY[i] - 0, matrix.Color444(2, 2, 2));
          break;

        case 5:
          matrix.drawPixel( horizSpikeX[i] + 1, horizSpikeY[i] - 0, matrix.Color444(2, 2, 2));
          break;
      }
    }
  } // for all horizontal spikes

}

// MoveBaddies is called from within the subroutine controlBaddies
void moveBaddies()
{
  boolean baddieMoved;
  byte dir, preferredDir;

  for (byte i = 0; i < numBaddiesMax - 1; i++)
  {
    if (baddieActive[i] == true)
    {
      baddieX_old[i] = baddieX[i];
      baddieY_old[i] = baddieY[i];
    }
  }

  if (!playerInvincible)
  {
    // Move baddie i
    for (byte i = 0; i < numBaddiesMax - 1; i++)
    {
      if (baddieActive[i] == true) // Skip inactive baddies
      {
        switch (baddiePersonality[i])
        {
            baddieMoved = false;
  
            do // Try to move the baddie into different directions until the direction is free.
            {
            case 0: // Moves in a straight line until it is at a wall or runs into another baddie. Then it selects a new direction by chance.
  
              preferredDir = baddieDir[i]; // The most recent direction remains the preferred direction
              baddieMoved = tryToMove(preferredDir, i, 100);
              if ( baddieMoved == false ) // Movement in the most recent direction was impossible
              {
                dir = random(0, 7); // Valid directions are 0..7. A larger interval provides for a "thinking moment"
                baddieMoved = tryToMove(dir, i, 100);
              }
  
              break;

            case 1: // If possible and with medium probability, moves in the player's direction
  
              if      (playerX < baddieX[i]) dir = 6;
              else if (playerX > baddieX[i]) dir = 2;
              if      (playerY < baddieY[i]) dir = 0;
              else if (playerY > baddieY[i]) dir = 4;
  
              baddieMoved = (tryToMove(dir, i, 50));
              if (baddieMoved == false)
              {
                if (dir <= 4) dir = dir + 2;
                else dir = 0;
                baddieMoved = tryToMove(dir, i, 100);
              }
  
              break;
  
            case 2: // If possible and with higher probability, moves in the player's direction if he is either at a similar x or y
              if      ((playerX < baddieX[i]) && (abs(playerY - baddieY[i]) <= 2)) dir = 6;
              else if ((playerX > baddieX[i]) && (abs(playerY - baddieY[i]) <= 2)) dir = 2;
              if      ((playerY < baddieY[i]) && (abs(playerX - baddieX[i]) <= 2)) dir = 0;
              else if ((playerY > baddieY[i]) && (abs(playerX - baddieX[i]) <= 2)) dir = 4;
  
  
              baddieMoved = (tryToMove(dir, i, 70)); // If possible, baddie will move in direction dir with a probability of 70%
              if (baddieMoved == false)
              {
                dir = random(0, 11); // Enlarged interval provides for a small "thinking moment"
                baddieMoved = tryToMove(dir, i, 100);
              }
              break;
  
            case 3:   // Shooting glowing worm
              // Moves in a straight line until it is at a wall or runs into another baddie. Then it selects a new direction by chance. Occasionally shoots at the player
              preferredDir = baddieDir[i]; // The most recent direction remains the preferred direction
              baddieMoved = tryToMove(preferredDir, i, 100);
              if ( baddieMoved == false ) // Movement in the most recent direction was impossible
              {
                dir = random(0, 11); // Valid directions are 0..7. The larger interval provides for a "thinking moment"
                //if (dir > 6) { baddiePers0AnimPhase = -1; }
                baddieMoved = tryToMove(dir, i, 100);
              }
  
              // Shoots at a medium probability at the player if he is approximately in the same row or column
              // If so, the baddie also moves into the player's direction
              if ( (abs(baddieX[i] - playerX) < 2) || ( abs(baddieY[i] - playerY) < 2) )
              {
                if ((random(0, 101) > 50) && (baddieShotActive[i] == false))
                {
                  baddieShotActive[i] = true;
                  // Determine the position where the bullet emerges
                  if (baddieX[i] > playerX)
                  {
                    // Baddie shoots left
                    baddieShotX[i] = baddieX[i] - 1;
                    baddieShotY[i] = baddieY[i];
                    baddieShotDir[i] = 6;
                    baddieDir[i] = 6;
                  }
                  else if (baddieX[i] < playerX)
                  {
                    // Baddie shoots right
                    baddieShotX[i] = baddieX[i] + 1;
                    baddieShotY[i] = baddieY[i];
                    baddieShotDir[i] = 2;
                    baddieDir[i] = 2;
                  }
                  else if (baddieY[i] < playerY)
                  {
                    // Baddie shoots down
                    baddieShotY[i] = baddieY[i] + 1;
                    baddieShotX[i] = baddieX[i];
                    baddieShotDir[i] = 4;
                    baddieDir[i] = 4;
                  }
                  else if (baddieY[i] > playerY)
                  {
                    // Baddie shoots up
                    baddieShotY[i] = baddieY[i] - 1;
                    baddieShotX[i] = baddieX[i];
                    baddieShotDir[i] = 0;
                    baddieDir[i] = 0;
                  }
                } // random
              } // player either in approximately the same row or column with the baddie
  
              break;
  
            case 4:   // Johann
              preferredDir = baddieDir[i]; // The most recent direction remains the preferred direction
              baddieMoved = tryToMove(preferredDir, i, 100);
              if ( baddieMoved == false ) // Movement in the most recent direction was impossible
              {
                dir = random(0, 11); // Valid directions are 0..7. The larger interval provides for a "thinking moment"
                baddieMoved = tryToMove(dir, i, 100);
              }
              break;
            }
            while ( !baddieMoved );
  
        } // switch baddiePersonality
  
        //makeNoise(baddiePersonality[i]);
      }
    } // for move baddies


    // Move the special baddies
    // Vertical spikes
    for (byte i = 0; i < numVertSpikesMax - 1; i++)
    {
      if (vertSpikeActive[i] == true)
      {
        vertSpikeX_old[i] = vertSpikeX[i];
        vertSpikeY_old[i] = vertSpikeY[i];
      }
    }
  
    // Vertical/falling spike
    for (byte i = 0; i < numVertSpikesMax - 1; i++)
    {
      if (vertSpikeActive[i] == true)
      {
        if ( raster[vertSpikeX[i]][vertSpikeY[i] + 2] >= 1) // Spike is near the ground (that means either a fence or a door). It does not move but its animation might still be ongoing
        {
          if (vertSpikeAnimPhase[i] > 5) // The animation is over
          {
            vertSpikeAnimPhase[i] = 0; // Spike is invisible (as if hidden in the wall)
  
            vertSpike_cnt[i] = 0; // The timer that keeps the spike within the wall is reset
            vertSpikeOnHold[i] = true; // This flag prohibits that the spike is painted within drawBaddies()
          }
          else if (vertSpikeAnimPhase[i] == 0) // Spike is invisible.
          {
            // If a delay was specified, wait the desired number of cycles...
            if (vertSpike_cnt[i] < vertSpike_delay[i]) {
              vertSpike_cnt[i]++;
            }
            else // ...then re-enable painting the spike
            {
              vertSpikeOnHold[i] = false;
              vertSpikeAnimPhase[i] = 1;
              // Move the spike to its initial position at the ceiling
              vertSpikeX[i] = vertSpike_initialX[i];
              vertSpikeY[i] = vertSpike_initialY[i];
            }
          }
          else // Spike has not yet fully arrived on the ground
          {
            vertSpikeAnimPhase[i]++;
          }
        }
        else if (( raster[vertSpikeX[i]][vertSpikeY[i] - 2] >= 1) && (vertSpikeAnimPhase[i] < 3)) // Spike is emerging from inside the wall, but has not yet fully done so. It does not move
        {
          vertSpikeAnimPhase[i]++; // Animation phases 0, 1, 2
        }
        else // Spike is falling
        {
          vertSpikeAnimPhase[i] = 3; // Animation phase 3 is reserved for the falling spike
          if (!baddieIsUnderneath(vertSpikeX[i], vertSpikeY[i], i))
          {
            vertSpikeY[i]++; // This is the only state in which the spike moves.
          }
        }
      }
    } // move vertical spikes
  
    // Horizontal spikes
    for (byte i = 0; i < numHorizSpikesMax - 1; i++)
    {
      if (horizSpikeActive[i] == true)
      {
        horizSpikeX_old[i] = horizSpikeX[i];
        horizSpikeY_old[i] = horizSpikeY[i];
      }
    }
  
    for (byte i = 0; i < numHorizSpikesMax - 1; i++)
    {
      if (horizSpikeActive[i] == true)
      {
        if ( raster[horizSpikeX[i] + 2][horizSpikeY[i]] >= 1) // Spike is near the right wall. It does not move but its animation might still be ongoing
        {
          if (horizSpikeAnimPhase[i] > 5) // The animation is over
          {
            horizSpikeAnimPhase[i] = 0; // Spike is invisible (as if hidden in the wall)
  
            horizSpike_cnt[i] = 0; // The timer that keeps the spike within the wall is reset
            horizSpikeOnHold[i] = true; // This flag prohibits that the spike is painted within drawBaddies()
          }
          else if (horizSpikeAnimPhase[i] == 0) // Spike is invisible.
          {
            // If a delay was specified, wait the desired number of cycles...
            if (horizSpike_cnt[i] < horizSpike_delay[i]) {
              horizSpike_cnt[i]++;
            }
            else // ...then re-enable painting the spike
            {
              horizSpikeOnHold[i] = false;
              horizSpikeAnimPhase[i] = 1;
              // Move the spike to its initial position at the left wall
              horizSpikeX[i] = horizSpike_initialX[i];
              horizSpikeY[i] = horizSpike_initialY[i];
            }
          }
          else // Spike has not yet fully arrived at the right wall
          {
            horizSpikeAnimPhase[i]++;
          }
        }
        else if (( raster[horizSpikeX[i] - 2][horizSpikeY[i]] >= 1) && (horizSpikeAnimPhase[i] < 3)) // Spike is emerging from inside the wall, but has not yet fully done so. It does not move
        {
          horizSpikeAnimPhase[i]++; // Animation phases 0, 1, 2
        }
        else // Spike is traveling
        {
          horizSpikeAnimPhase[i] = 3; // Animation phase 3 is reserved for the traveling spike
          //if (!baddieIsUnderneath(horizSpikeX[i], horizSpikeY[i], i))
          {
            horizSpikeX[i]++; // This is the only state in which the spike moves.
          }
        }
      }
    } // move horizontal spikes
  } // !playerInvincible
}

boolean baddieIsUnderneath(byte x, byte y, byte vertSpikeNum)
{

  for ( byte j = 0; j < numBaddiesMax - 1; j++ ) // Stop if a baddie has come too near
  {
    if ((baddieActive[j]) && (j != vertSpikeNum))
    {
      if (( abs(baddieY[j] - y) < 4 ) && ( abs(baddieX[j] - x) < 4 ) )
      {
        return true;
      }
    }
  }

  return false;
}

boolean tryToMove( byte dir, byte i, byte probability)
{
  if ((canGoThisWay( dir, baddieX[i], baddieY[i] ) ) && (random(0, 101) > 100 - probability))
  {
    stepIntoDirection( dir, i );
    baddieDir[i] = dir;
    return true;
  }
  return false;
}

// Moves baddie i into direction dir
void stepIntoDirection( byte dir, byte i)
{
  if ( baddieActive[i] )
  {
    switch (dir)
    {
      case 0:
        baddieY[i]--;
        break;
      case 2:
        baddieX[i]++;
        break;
      case 4:
        baddieY[i]++;
        break;
      case 6:
        baddieX[i]--;
        break;
    }
  }
}

// Returns true if a baddie can move from (x, y) into compass direction dir
boolean canGoThisWay( byte dir, byte x, byte y )
{
  switch (dir)
  {
    case 0: // NORTH
      if (y <= 2) return false;
      for ( byte i = 0; i < numBaddiesMax - 1; i++ ) if (baddieActive[i]) {
          if ( ( y - baddieY[i] == 3 ) && ( abs(baddieX[i] - x) <= 2 ) ) return false;
        }
      if ( ( raster[x][y - 2] == 0 ) && ( raster[x - 1][y - 2] == 0 ) && ( raster[x + 1][y - 2] == 0 ) ) return true;
      break;

    case 2: // EAST
      if (x > 29) return false;
      for (byte i = 0; i < numBaddiesMax - 1; i++) if (baddieActive[i]) {
          if ( ( abs(baddieY[i] - y ) <= 2) && ( baddieX[i] - x == 3 ) ) return false;
        }
      if ( ( raster[x + 2][y] == 0 ) && ( raster[x + 2][y - 1] == 0 ) && ( raster[x + 2][y + 1] == 0 ) ) return true;

      break;

    case 4: // SOUTH
      if (y >= 29) return false;
      for (byte i = 0; i < numBaddiesMax - 1; i++) if (baddieActive[i]) {
          if ( ( baddieY[i] - y == 3 ) && ( abs(baddieX[i] - x) <= 2 ) ) return false;
        }
      if ( ( raster[x][y + 2] == 0 ) && ( raster[x - 1][y + 2] == 0 ) && ( raster[x + 1][y + 2] == 0 ) ) return true;
      break;

    case 6: // WEST
      if (x <= 2) return false;
      for (byte i = 0; i < numBaddiesMax - 1; i++) if (baddieActive[i]) {
          if ( ( abs(baddieY[i] - y) <= 2 ) && ( x - baddieX[i] == 3 ) ) return false;
        }
      if ( ( raster[x - 2][y] == 0 ) && ( raster[x - 2][y - 1] == 0 ) && ( raster[x - 2][y + 1] == 0 ) ) return true;
  }
  return false;
}

// This function is executed from within the timing framework
void movePlayerBullets()
{
  if (playerSimpleShotActive == true)
  {
    // Show number of remaining shots
    for(byte i = 0; i < numShotsLeft; i++)
    {
      matrix.drawPixel(1, 1 + i, matrix.Color333(2, 2, 0));  
    }
        
    // Clear the player's simple shot bullet at the old position
    matrix.drawPixel( playerSimpleShotX, playerSimpleShotY, matrix.Color333(0, 0, 0));

    if ((playerSimpleShotX < 0) || (playerSimpleShotY < 0) || (playerSimpleShotX > 31) || (playerSimpleShotY > 31)) {
      playerSimpleShotActive = false;
    }
    else if (raster[playerSimpleShotX][playerSimpleShotY] == 1) // Bullet has flown into a fence
    {
      playerSimpleShotActive = false;
    }

    // Has the bullet hit a baddie?
    for (byte i = 0; i < numBaddiesMax - 1; i++)
    {
      if (baddieActive[i] == true)
      {
        if ((abs(baddieX[i] - playerSimpleShotX) < 2) && (abs(baddieY[i] - playerSimpleShotY) < 2)) // Kill the little dude!
        {
          baddieActive[i] = false;
          playerSimpleShotActive = false;
          // Clear baddie sprite at old position
          matrix.fillRect( baddieX[i] - 1, baddieY[i] - 1, 3, 3, matrix.Color333(0, 0, 0));
          baddieX_old[i] = -2;
          baddieY_old[i] = -2; // Not strictly necessary
          // Has the player shot Johann?
          if (baddiePersonality[i] == 4) {
            gameWon = true;
          }
        }
      }
    }

    if (playerSimpleShotActive == true)
    {
      // Bullet is on its way
      switch (playerSimpleShotDir)
      {
        case 0:
          playerSimpleShotY--;
          break;
        case 1:
          playerSimpleShotX++;
          playerSimpleShotY--;
          break;
        case 2:
          playerSimpleShotX++;
          break;
        case 3:
          playerSimpleShotX++;
          playerSimpleShotY++;
          break;
        case 4:
          playerSimpleShotY++;
          break;
        case 5:
          playerSimpleShotX--;
          playerSimpleShotY++;
          break;
        case 6:
          playerSimpleShotX--;
          break;
        case 7:
          playerSimpleShotX--;
          playerSimpleShotY--;
          break;
      } // switch

      // Draw the bullet
      // Clear baddie sprite at old position
      matrix.drawPixel( playerSimpleShotX, playerSimpleShotY, matrix.Color333(2, 2, 2));
    }

    // Shoot set to false
    if (playerSimpleShotActive == false)
    {
      // Remove number of remaining shots
      for(byte i = 0; i < numShotsLeft; i++)
      {
        matrix.drawPixel(1, 1 + i, matrix.Color333(0, 0, 0));  
      }
    }    
  }
}

// This function is executed from within the timing framework
void moveBaddieBullets()
{
  for (byte i = 0; i < numBaddiesMax - 1; i++)
  {
    if (baddieShotActive[i])
    {
      // Clear the player's simple shot bullet at the old/current position
      matrix.drawPixel( baddieShotX[i], baddieShotY[i], matrix.Color333(0, 0, 0));

      // Bullet has left the screen or hit a fence/wall
      if ((baddieShotX[i] < 0) || (baddieShotY[i] < 0) || (baddieShotX[i] > 31) || (baddieShotY[i] > 31)
          || (raster[baddieShotX[i]][baddieShotY[i]] == 1))
      {
        baddieShotActive[i] = false;
        matrix.drawPixel( baddieShotX[i], baddieShotY[i], matrix.Color333(0, 0, 0));
      }
      else // The bullet has not touched nothing
      {
        // Has the bullet hit the player?
        if ((abs(baddieShotX[i] - playerX) < 2) && (abs(baddieShotY[i] - playerY) < 2)) // Oups! The player was hit by a bullet.
        {
            baddieShotActive[i] = false;
            // Clear player sprite at old position
            matrix.fillRect( playerX - 1, playerY - 1, 3, 3, matrix.Color333(0, 0, 0));

          if (!playerInvincible)  
          {
            playerHit = true;
            makeBulletHitPlayerNoise();
            delay(100);
          }
          //return;
        }
        else // Bullet has not hit the player. Therefore, move it to the next position
        {
          // Bullet is on its way
          switch (baddieShotDir[i])
          {
            case 0:
              baddieShotY[i]--;
            case 1:
              baddieShotX[i]++;
              baddieShotY[i]--;
              break;
            case 2:
              baddieShotX[i]++;
              break;
            case 3:
              baddieShotX[i]++;
              baddieShotY[i]++;
            case 4:
              baddieShotY[i]++;
              break;
              baddieShotX[i]--;
              baddieShotY[i]--;
            case 6:
              baddieShotX[i]--;
              break;
            case 7:
              baddieShotX[i]--;
              baddieShotY[i]--;
          } // switch

          // Draw the bullet
          matrix.drawPixel( baddieShotX[i], baddieShotY[i], matrix.Color333(2, 2, 2));
        }
      } // switch baddieShotDir[i]

    } // baddieShotActive[i]
  } // for all baddies
}

boolean checkCollision()
{
  byte x = playerX;
  byte y = playerY;
  byte offset = 0;

  // Check whether player has run into one of the baddies
  for (byte i = 0; i < numBaddiesMax - 1; i++)
  {
    if (baddieActive[i])
    {
      // Return true if the player has hit a baddie
      if ( (abs(x - baddieX[i]) <= 2) && (abs(y - baddieY[i]) <= 2))
      {
        if (!playerInvincible)
        {
          makeBaddieHitPlayerNoise();
          return true;
        }
        //return false;
      }
    }
  }

  // Check whether the player has run into one of the special baddies
  // Vertical spikes
  for (byte i = 0; i < numVertSpikesMax - 1; i++)
  {
    if ((vertSpikeActive[i]) && (vertSpikeOnHold[i] == false))
    {
      if (abs(x - vertSpikeX[i]) < 2)
      {
        // The vertical distance must be offset to account only for the visible portion of the spike...
        if (vertSpikeAnimPhase[i] < 3) // ...while the spike is emerging from the ceiling...
        {
          offset = vertSpikeAnimPhase[i]; // Animation phases 0, 1, 2
          if (abs(y - vertSpikeY[i]) <= offset) 
          {
            if (!playerInvincible) 
            {
              makeSpikeNoise();
              return true;
            }
            return false;
          }
        }
        else if (vertSpikeAnimPhase[i] > 3) // ...or while the spike is vanishing into the floor
        {
          offset = vertSpikeAnimPhase[i] - 3; // Animation phases 4, 5, 6 (6 - sprite is invisible)
          if (abs(y - vertSpikeY[i]) < 3 - offset) 
          {
            if (!playerInvincible) 
            {
              makeSpikeNoise();
              return true;
            }
            return false;
          }
        }
        else if (abs(y - vertSpikeY[i]) < 2) 
        {
          if (!playerInvincible) 
          {
              makeSpikeNoise();
              return true;
          }
          return false;
        }
      }
    }
  } // Run into vertical spike?


  // Horizontal spikes
  for (byte i = 0; i < numHorizSpikesMax - 1; i++)
  {
    if ((horizSpikeActive[i]) && (horizSpikeOnHold[i] == false))
    {
      if (abs(y - horizSpikeY[i]) < 2)
      {
        // The vertical distance must be offset to account only for the visible portion of the spike...
        if (horizSpikeAnimPhase[i] < 3) // ...while the spike is emerging from the left fence...
        {
          offset = horizSpikeAnimPhase[i]; // Animation phases 0, 1, 2
          if (abs(x - horizSpikeX[i]) <= offset) 
          {
           if (!playerInvincible) 
           {
            makeSpikeNoise();
            return true;
           }
           return false;
          }
        }
        else if (horizSpikeAnimPhase[i] > 3) // ...or while the spike is vanishing into the right fence
        {
          offset = horizSpikeAnimPhase[i] - 3; // Animation phases 4, 5, 6 (6 - sprite is invisible)
          if (abs(x - horizSpikeX[i]) < 3 - offset) 
          {
            if (!playerInvincible) 
            {
              makeSpikeNoise();
              return true;
            }
            return false;
          }
        }
        else if (abs(x - horizSpikeX[i]) < 2) 
        {
          if (!playerInvincible) 
          {
            makeSpikeNoise();
            return true;
          }
          return false;
        }
      }
    }
  } // Run into horizontal spike?


  // If the player is at the screen boundary, he or she is leaving the current playing area
  if ((x <= 0) || (x >= 31) || (y <= 0) || (y >= 31)) 
  {
    return false;
  }

  // Doors
  // Can the player open a door he or she is currently approaching?
  int dx = -1;
  int dy = -1;
  for (byte i = 2; i < 6; i++) // Check for the presence of each door type
  {
    if        (raster[playerX - 2][playerY - 1] == i)  {
      dx = playerX - 2;
      dy = playerY - 1;
    } // Check for the presence of a door of color i in the direct neighborship
    else if   (raster[playerX + 0][playerY - 2] == i)  {
      dx = playerX + 0;
      dy = playerY - 2;
    }
    else if   (raster[playerX + 1][playerY - 2] == i)  {
      dx = playerX + 1;
      dy = playerY - 2;
    }
    else if   (raster[playerX - 2][playerY + 0] == i)  {
      dx = playerX - 2;
      dy = playerY + 0;
    }
    else if   (raster[playerX + 2][playerY + 0] == i)  {
      dx = playerX + 2;
      dy = playerY + 0;
    }
    else if   (raster[playerX - 1][playerY + 2] == i)  {
      dx = playerX - 1;
      dy = playerY + 2;
    }
    else if   (raster[playerX + 0][playerY + 2] == i)  {
      dx = playerX + 0;
      dy = playerY + 2;
    }
    else if   (raster[playerX + 1][playerY + 2] == i)  {
      dx = playerX + 1;
      dy = playerY + 2;
    }

    if ((dx != -1) && (dy != -1)) // A door is present in the neighborship at position (dx, dy)
    {
      if (numKeysCarrying[i - 2] > 0)
      {
        openDoor(dx, dy, i); // Purge the door from the playing area
        numKeysCarrying[i - 2]--;
        makeOpenDoorNoise();

        return false;
      }
    }
  }
  
  /*
  // Doors
  // Can the player open a door he or she is currently approaching?
  int dx = -1;
  int dy = -1;
  for (byte i = 2; i < 6; i++) // Check for the presence of each door type
  {
    if        (raster[playerX - 1][playerY - 1] == i)  {
      dx = playerX - 1;
      dy = playerY - 1;
    } // Check for the presence of a door of color i in the direct neighborship
    else if   (raster[playerX + 0][playerY - 1] == i)  {
      dx = playerX + 0;
      dy = playerY - 1;
    }
    else if   (raster[playerX + 1][playerY - 1] == i)  {
      dx = playerX + 1;
      dy = playerY - 1;
    }
    else if   (raster[playerX - 1][playerY + 0] == i)  {
      dx = playerX - 1;
      dy = playerY + 0;
    }
    else if   (raster[playerX + 1][playerY + 0] == i)  {
      dx = playerX + 1;
      dy = playerY + 0;
    }
    else if   (raster[playerX - 1][playerY + 1] == i)  {
      dx = playerX - 1;
      dy = playerY + 1;
    }
    else if   (raster[playerX + 0][playerY + 1] == i)  {
      dx = playerX + 0;
      dy = playerY + 1;
    }
    else if   (raster[playerX + 1][playerY + 1] == i)  {
      dx = playerX + 1;
      dy = playerY + 1;
    }

    if ((dx != -1) && (dy != -1)) // A door is present in the neighborship at position (dx, dy)
    {
      if (numKeysCarrying[i - 2] > 0)
      {
        openDoor(dx, dy, i); // Purge the door from the playing area
        numKeysCarrying[i - 2]--;
        makeOpenDoorNoise();

        return false;
      }
    }
  }
  */
  
  // Check whether the player is picking up an item
  
  // Gun
  if ( ( (abs(x - gunX[mapID]) <= 2) && (abs(y - gunY[mapID]) <= 2)) && gunCollected[mapID] == false)
  {
    playerHasGun = true;
    gunCollected[mapID] = true;
    // The player has taken the gun. Therefore, paint the background instead of the gun
    matrix.fillRect( gunX[mapID] - 1, gunY[mapID], 3, 2, matrix.Color333(0, 0, 0));
    numShotsLeft = maxNumShots; // The magazine is full
    //numShotsLeft += 10;
    makeGunTakenNoise();
    gunX[mapID] = -1; gunY[mapID] = -1;
  }

  // Check whether the player can pick up a key
  for (byte i = 0; i < 4; i++)
  {
    if (keyCollected[i][mapID] == false)
    {
      if ( (abs(x - keyX[i][mapID]) <= 2) && (abs(y - keyY[i][mapID]) <= 2))
      {
        keyCollected[i][mapID] = true;
        numKeysCarrying[i]++;
        // The player has taken the particular key. Therefore, repaint the background.
        matrix.fillRect( keyX[i][mapID] - 1, keyY[i][mapID] - 1, 3, 3, matrix.Color333(0, 0, 0));

        makeKeyCollectedNoise();
      }
    }
  }

  return false;
  
} // checkCollision


// Erase the door of given type at position (x, y) from the playing area
// Types: 2 - green, 3 - red, 4 - yellow, 5 - violet
// The method should be reprogrammed using objects which would simplify matters tremendously
void openDoor(byte x, byte y, byte type) // x,y are the door's coordinates
{
  doorOpened[type - 2][mapID] = true;

  // Obtain the screen data and store it in array screen
  byte screen[64];
  int start = mapID * 64;
  for (int k = 0; k < 64; k++)
  {
    screen[k] = pgm_read_byte_near(playfield + start + k);
  }

  byte i = 0;
  byte blockX = floor(x / 8); // 0..3
  byte blockY = floor(y / 8); // 0..3
  byte off = 16 * blockY + 4 * blockX;
  if       (screen[off + 0] == type)
  {
    i = 0;
  }
  else if  (screen[off + 1] == type)
  {
    i = 1;
  }
  else if  (screen[off + 2] == type)
  {
    i = 2;
  }
  else if  (screen[off + 3] == type)
  {
    i = 3;
  }

  // Remove the door in direction i from the raster
  switch (i)
  {
    case 0: // North
      for (byte o = 0; o < 8; o++)
      {
        raster[8 * blockX + o][8 * blockY] = 0;
        matrix.drawPixel(8 * blockX + o, 8 * blockY, matrix.Color333(0, 0, 0));
      }
      break;

    case 1: // East
      for (byte o = 0; o < 8; o++)
      {
        raster[8 * blockX + 7][8 * blockY + o] = 0;
        matrix.drawPixel(8 * blockX + 7, 8 * blockY + o, matrix.Color333(0, 0, 0));
      }
      break;

    case 2: // South
      for (byte o = 0; o < 8; o++)
      {
        raster[8 * blockX + o][8 * blockY + 7] = 0;
        matrix.drawPixel(8 * blockX + o, 8 * blockY + 7, matrix.Color333(0, 0, 0));
      }
      break;

    case 3: // West
      for (byte o = 0; o < 8; o++)
      {
        raster[8 * blockX][8 * blockY + o] = 0;
        matrix.drawPixel(8 * blockX, 8 * blockY + o, matrix.Color333(0, 0, 0));
      }
      break;
  } // switch
}


// ------------------------- NOISES ------------------------------------------------


void makeFenceNoise()
{
    for (int i = 0; i < 25; i++)
    {
     tone(audio, 500+random(2*i), 3);
     delay(3);
     tone(audio, 1500+random(10), 3);
     delay(3);
     tone(audio, 1000+random(10), 3);
     delay(3);
    }
}

void makeGunTakenNoise()
{
  for (int i = 0; i < 40; i++)
  {
    tone(audio, 400 + 10 * i + random(40), 2);
  }
}

void makeGunShotNoise()
{
  for (float f = 2500, i = 0; f > 200; f = f - i, i=i+0.5)
  {
     tone(audio, f+random(5), 2);
     tone(audio, 2*f-random(10), 2);
  } 
}  

void makeSpikeNoise()
{
  int f = 4000;
  for (int i = 0; i < 20; i++)
  {
     tone(audio, f+random(2*i), 8);
     delay(9);
     tone(audio, f+1500+random(10), 2);
     delay(2);
     tone(audio, f+500+random(10), 1);
     delay(1);
     f = f - 200;
  }
}

void makeKeyCollectedNoise()
{
  for (int i = 0; i < 100; i++)
  {
    tone(audio, 600 + 10 * i, 1);
  }
  delay(110);
  for (int i = 0; i < 80; i++)
  {
    tone(audio, 1300 - 10 * i, 1);
  }
  delay(90);
}

void makeOpenDoorNoise()
{
  tone(audio, NOTE_C4, 30);
  delay(30);
  tone(audio, NOTE_C5, 30);
  delay(30);
  tone(audio, NOTE_C4, 30);
  delay(30);
  tone(audio, NOTE_C6, 100);
  delay(100);
}

void makeBaddieHitPlayerNoise()
{
  tone(audio, NOTE_C3, 100);
  delay(100);
  tone(audio, NOTE_B2, 150);
  delay(150);
  tone(audio, NOTE_AS2, 150);
  delay(150);
  tone(audio, NOTE_A2, 190);
  delay(190);
  tone(audio, NOTE_GS2, 500);
  delay(500);
}

void makeBulletHitPlayerNoise()
{
  for (int i = 0; i < 50; i++)
  {
    tone(audio, 200+random(5), 3);
    delay(3);
  }
}


// -------------------------------------------------------------------------

 
void playerLosesLife(byte _x, byte _y)
{
  int col;
  int headCol;
  //col = matrix.Color333(7, 7, 0); // Default player sprite color
  //int headCol = matrix.Color444(7, 4, 4);
  col = matrix.Color333(1, 1, 0); // Default player sprite color
  if (numShotsLeft != 0) 
  {
    headCol = matrix.Color444(5, 1, 1);
  }
  else headCol = matrix.Color444(2, 1, 1);
  
  for (int i = 0; i < 2; i++)
  {
    matrix.fillRect( _x - 1, _y - 1, 3, 3, matrix.Color333(0, 0, 0)); // Black background
    // N
    matrix.drawPixel( _x + 0, _y - 1, headCol);
    matrix.drawPixel( _x + 0, _y + 0, col);
    matrix.drawPixel( _x - 1, _y + 1, col);
    matrix.drawPixel( _x + 1, _y + 1, col);
    delay(75);
    matrix.fillRect( _x - 1, _y - 1, 3, 3, matrix.Color333(0, 0, 0)); // Black background
    // NE
    matrix.drawPixel( _x + 1, _y - 1, headCol);
    matrix.drawPixel( _x + 0, _y + 0, col);
    matrix.drawPixel( _x - 1, _y + 0, col);
    matrix.drawPixel( _x + 0, _y + 1, col);
    delay(75);
    matrix.fillRect( _x - 1, _y - 1, 3, 3, matrix.Color333(0, 0, 0)); // Black background
    // W
    matrix.drawPixel( _x + 1, _y + 0, headCol);
    matrix.drawPixel( _x + 0, _y + 0, col);
    matrix.drawPixel( _x - 1, _y - 1, col);
    matrix.drawPixel( _x - 1, _y + 1, col);
    delay(75);
    matrix.fillRect( _x - 1, _y - 1, 3, 3, matrix.Color333(0, 0, 0)); // Black background
    // SE
    matrix.drawPixel( _x + 1, _y + 1, headCol);
    matrix.drawPixel( _x + 0, _y + 0, col);
    matrix.drawPixel( _x - 1, _y + 0, col);
    matrix.drawPixel( _x + 0, _y - 1, col);
    delay(75);
    matrix.fillRect( _x - 1, _y - 1, 3, 3, matrix.Color333(0, 0, 0)); // Black background
    // S
    matrix.drawPixel( _x + 0, _y + 1, headCol);
    matrix.drawPixel( _x + 0, _y + 0, col);
    matrix.drawPixel( _x - 1, _y - 1, col);
    matrix.drawPixel( _x + 1, _y + 1, col);
    delay(75);
    matrix.fillRect( _x - 1, _y - 1, 3, 3, matrix.Color333(0, 0, 0)); // Black background
    // SW
    matrix.drawPixel( _x - 1, _y + 1, headCol);
    matrix.drawPixel( _x + 0, _y + 0, col);
    matrix.drawPixel( _x + 0, _y - 1, col);
    matrix.drawPixel( _x + 1, _y + 0, col);
    delay(75);
    matrix.fillRect( _x - 1, _y - 1, 3, 3, matrix.Color333(0, 0, 0)); // Black background
    // W
    matrix.drawPixel( _x - 1, _y + 0, headCol);
    matrix.drawPixel( _x + 0, _y + 0, col);
    matrix.drawPixel( _x + 1, _y - 1, col);
    matrix.drawPixel( _x - 1, _y + 1, col);
    delay(75);
    matrix.fillRect( _x - 1, _y - 1, 3, 3, matrix.Color333(0, 0, 0)); // Black background
    // NW
    matrix.drawPixel( _x - 1, _y - 1, headCol);
    matrix.drawPixel( _x + 0, _y + 0, col);
    matrix.drawPixel( _x + 1, _y + 0, col);
    matrix.drawPixel( _x + 0, _y + 1, col);
    delay(75);
  }

  // Show number of remaining lives (or "Game Over" if no more lives)
  if(lives > 0)
  {
    matrix.fillRect(0, 8, 32, 8, matrix.Color333(0,0,0));
    matrix.fillRect(12, 16, 8, 8, matrix.Color333(0,0,0));
    matrix.setTextColor(matrix.Color333(2,2,2));
    matrix.setCursor(1, 8);
    matrix.print("Lives");
    matrix.setCursor(13, 16);
    matrix.print(lives);
  }
  else
  {
    matrix.fillRect(4, 8, 24, 16, matrix.Color333(0,0,0));
    matrix.setTextColor(matrix.Color333(2,2,2));
    matrix.setCursor(4, 8);
    matrix.print("Game");
    matrix.setCursor(4, 16);
    matrix.print("Over");
    delay(2000);
  }
} // playerLosesLife

// The map data needs to be copied from Flash ROM into RAM.
// The data structure raster acts as screen memory.
void updateRaster()
{
  byte x;
  byte y;
  byte i;
  String s, c;
  byte val;

  int start = mapID * 64;
  //byte screen[64];

  // Obtain the screen data and store it in array screen
  for (int k = 0; k < 64; k++)
  {
    screen[k] = pgm_read_byte_near(playfield + start + k);
  }

  // Clear the raster
  for (byte a = 0; a < 32; a++)
  {
    for (byte b = 0; b < 32; b++)
    {
      raster[a][b] = 0;
    }
  }

  // Place walls and doors onto the raster
  for (byte row = 0; row < 4; row++)
  {
    y = row * 8;
    for (byte b = 0; b < 4; b++) // b is one of the four blocks in the row
    {
      x = b * 8; // (x, y) is the upper left corner of the 8x8 block

      for (byte i = 0; i < 4; i++) // One of the four directions North, East, South, West
      {
        byte val = screen[16 * row + 4 * b + i];
        if ((val > 1) && (val <= 5)) // Door
        {
          switch (i)
          {
            case 0: // North

              if (doorOpened[val - 2][mapID] == false) // Only if the player has not yet opened the door with color {val} in the current room, set it in the raster, otherwise, set a space
              {
                for (byte o = 0; o < 8; o++) raster[x + o][y] = val;
              }
              else
              {
                for (byte o = 0; o < 8; o++) raster[x + o][y] = 0;
              }

              break;

            case 1: // East

              if (doorOpened[val - 2][mapID] == false)
              {
                for (byte o = 0; o < 8; o++) raster[x + 7][y + o] = val;
              }
              else
              {
                for (byte o = 0; o < 8; o++) raster[x + 7][y + o] = 0;
              }
              break;

            case 2: // South

              if (doorOpened[val - 2][mapID] == false)
              {
                for (byte o = 0; o < 8; o++) raster[x + o][y + 7] = val;
              }
              else
              {
                for (byte o = 0; o < 8; o++) raster[x + o][y + 7] = 0;
              }

              break;

            case 3: // West

              if (doorOpened[val - 2][mapID] == false)
              {
                for (byte o = 0; o < 8; o++) raster[x][y + o] = val;
              }
              else
              {
                for (byte o = 0; o < 8; o++) raster[x][y + o] = 0;
              }

              break;
          } // switch
        } // Door
        else if (val == 1) // Wall
        {
          switch (i)
          {
            case 0: // North

              for (byte o = 0; o < 8; o++) raster[x + o][y] = 1;

              break;

            case 1: // East

              for (byte o = 0; o < 8; o++) raster[x + 7][y + o] = 1;

              break;

            case 2: // South

              for (byte o = 0; o < 8; o++) raster[x + o][y + 7] = 1;

              break;

            case 3: // West

              for (byte o = 0; o < 8; o++) raster[x][y + o] = val;

              break;
          }

          // If drawn this way, the corner pixels where a passway meets a fence or a door are empty (=0).
          // This can be avoided by looking at two pixels from the two lines.
          if (raster[x + 1][y + 0] != raster[x + 0][y + 1]) raster[x + 0][y + 0] = 1;
          if (raster[x + 6][y + 0] != raster[x + 7][y + 1]) raster[x + 7][y + 0] = 1;
          if (raster[x + 0][y + 6] != raster[x + 1][y + 7]) raster[x + 0][y + 7] = 1;
          if (raster[x + 6][y + 7] != raster[x + 7][y + 6]) raster[x + 7][y + 7] = 1;
        }
        else // Space
        {
          /*
            switch (i)
            {

            case 0: // North

              for (byte o = 0; o < 7; o++) raster[x + o][y] = 0;

            break;

            case 1: // East

              for (byte o = 0; o < 7; o++) raster[x + 7][y + o] = 0;

            break;

            case 2: // South

              for (byte o = 0; o < 7; o++) raster[x + o][y + 7] = 0;

            break;

            case 3: // West

              for (byte o = 0; o < 7; o++) raster[x][y + o] = 0;

            break;
            } // switch
          */
        } // Space
      } // Directions North, East, South, West
    } // One of the four blocks per row
  } // One of the four rows per room


  // For debugging purposes only
  if (debug == true)
  {
    matrix.fillScreen(matrix.Color333(0, 0, 0));
    for (byte i = 0; i < 32; i++)
    {
      for (byte j = 0; j < 32; j++)
      {
        if (raster[i][j] == 1)
        {
          matrix.drawPixel(i, j, matrix.Color333(0, 0, 3));
        }
        else
        {
          matrix.drawPixel(i, j, matrix.Color333(0, 0, 0));
        }
      }
    }
    while (!joy1Fire()) {} // Wait until the player presses a joystick button
  } // debug

}


void drawPlayfield()
{
  if (doorColTimer == 20)
  {
    doorColTimer = 0;
  }
  else
  {
    doorColTimer++;
  }

  byte x;
  byte y;
  byte b;
  byte i;
  byte row;
  String s;
  //String c;
  int col;
  //int start = mapID * 64;
  //byte screen[64];

  /*
    // Obtain the screen data and store it in array screen
    for (int k = 0; k < 64; k++)
    {
    screen[k] = pgm_read_byte_near(playfield + start + k);
    }
  */

  for (row = 0; row < 4; row++)
  {
    y = row * 8;
    for (b = 0; b < 4; b++) // b is one of the four blocks in the row
    {
      x = b * 8; // (x, y) is the upper left corner of the 8x8 block

      for (i = 0; i < 4; i++) // One of the four directions North, East, South, West
      {
        byte c = screen[16 * row + 4 * b + i];
        if      ( c == 0 ) // Space
        {
          // Nothing to draw
        }
        else if  (c == 1) // Fence
        {
          col = matrix.Color333(0, 0, 4);
        }
        else if  (c == 2) // Green door
        {
          if (doorOpened[GREEN][mapID] == false) // Door is closed
          {
            if (numKeysCarrying[GREEN] > 0) // Player has a key for a green door: blink the door
            {
              if (doorColTimer > 10)
              {
                col = matrix.Color888(0, 24, 0);
              }
              else
              {
                col = matrix.Color888(0, 0, 0);
              }
            }
            else // Player does not have the fitting key
            {
              col = matrix.Color888(0, 24, 0);
            }
            drawDoor(i, x, y, col);
          }
          else // Door is gone, i.e., has already been opened
          {
            col = matrix.Color888(0, 0, 0);
          }
        } // Green door
        else if  (c == 3) // Red door
        {
          if (doorOpened[RED][mapID] == false)
          {
            if (numKeysCarrying[RED] > 0)
            {
              if (doorColTimer > 10)
              {
                col = matrix.Color888(24, 0, 0);
              }
              else
              {
                col = matrix.Color888(0, 0, 0);
              }
            }
            else // Solid door. Player does not have the fitting key.
            {
              col = matrix.Color888(24, 0, 0);
            }
            drawDoor(i, x, y, col);
          }
          else // Door is already opened (gone)
          {
            col = matrix.Color888(0, 0, 0);
          }
        } // Red door
        else if (c == 4) // Yellow door
        {
          if (doorOpened[YELLOW][mapID] == false)
          {
            if (numKeysCarrying[YELLOW] > 0)
            {
              if (doorColTimer > 10)
              {
                col = matrix.Color888(24, 24, 0);
              }
              else
              {
                col = matrix.Color888(0, 0, 0);
              }
            }
            else // Solid door. Player does not have the fitting key.
            {
              col = matrix.Color888(24, 24, 0);
            }
            drawDoor(i, x, y, col);
          }
          else // Door is already opened (gone)
          {
            col = matrix.Color888(0, 0, 0);
          }
        }// Yellow door
        else if (c == 5) // Violet door
        {
          if (doorOpened[VIOLET][mapID] == false)
          {
            //if (keyCollected[VIOLET][mapID])
            if (numKeysCarrying[VIOLET] > 0)
            {
              if (doorColTimer > 10)
              {
                col = matrix.Color888(25, 0, 20);
              }
              else 
              {
                col = matrix.Color888(0, 0, 0);
              }
            }
            else // Solid door. Player does not have the fitting key.
            {
              col = matrix.Color888(25, 0, 20);
            }
            drawDoor(i, x, y, col);
          }
          else // Door is already opened (gone)
          {
            col = matrix.Color888(0, 0, 0);
          }
        } // Violet door

        
        // Draw other things than a door. Here, fence only
        if ((c > 0) && (c < 2))
        {
          if       (i == 0) matrix.drawLine(x + 0, y + 0, x + 7, y + 0, col); // North
          else if  (i == 1) matrix.drawLine(x + 7, y + 0, x + 7, y + 7, col); // East
          else if  (i == 2) matrix.drawLine(x + 0, y + 7, x + 7, y + 7, col); // South
          else if  (i == 3) matrix.drawLine(x + 0, y + 0, x + 0, y + 7, col); // West
        }
        
      } // for i
    } // for b
  } // for row
}

void drawDoor(byte i, byte x, byte y, int col)
{
  if       (i == 0) matrix.drawLine(x + 0, y + 0, x + 7, y + 0, col); // North
  else if  (i == 1) matrix.drawLine(x + 7, y + 0, x + 7, y + 7, col); // East
  else if  (i == 2) matrix.drawLine(x + 0, y + 7, x + 7, y + 7, col); // South
  else if  (i == 3) matrix.drawLine(x + 0, y + 0, x + 0, y + 7, col); // West
}

void drawPlayfield_glowing(byte d)
{
  int col;
  byte x;
  byte y;
  byte j;
  byte i;
  byte b;
  byte row;
  //String s;
  //String c;
  //byte screen[64];
  //int start = mapID * 64;

  /*
    // Obtain the screen data and store it in array screen
    for (int k = 0; k < 64; k++)
    {
    screen[k] = pgm_read_byte_near(playfield + start + k);
    }
  */

  for (byte z = 0; z < 4; z++)
  {
    //if       (z == 0) { col = matrix.Color333(0, 0, 3); }
    if  (z == 1) {
      col = matrix.Color333(0, 0, 2);
    }
    else if  (z == 2) {
      col = matrix.Color333(0, 1, 1);
    }
    else if  (z == 3) {
      col = matrix.Color333(0, 0, 4);
    }

    for (row = 0; row < 4; row++)
    {
      y = row * 8;
      for (b = 0; b < 4; b++) // b is one of the four blocks in the row
      {
        x = b * 8; // (x, y) is the upper left corner of the 8x8 block

        for (i = 0; i < 4; i++) // One of the four directions North, East, South, West
        {
          byte c = screen[16 * row + 4 * b + i];
          if      ( c == 0 ) // Space
          {
            // Nothing to draw
          }
          else if  (c == 1) // Fence changed from >= into ==
          {
            if       (i == 0) matrix.drawLine(x + 0, y + 0, x + 7, y + 0, col); // North
            else if  (i == 1) matrix.drawLine(x + 7, y + 0, x + 7, y + 7, col); // East
            else if  (i == 2) matrix.drawLine(x + 0, y + 7, x + 7, y + 7, col); // South
            else if  (i == 3) matrix.drawLine(x + 0, y + 0, x + 0, y + 7, col); // West
          }
        } // for i
      } // for b
    } // for row

    delay(d);
  }
}

void displayGlowingPlayfield(byte z, byte d)
{
  for (byte k = 0; k < z; k++)
  {
    drawPlayfield_glowing(d);
  }
}

void showWelcomeScreen()
{
  // Play sample
  //startPlayback(sample, sizeof(sample));
  //delay(3000);
  //stopPlayback();

  /*
    // Unfortunately, both PCM library and RGBMatrixPanel library require the only available 16bit timer, Timer 1.
    // Therefore, they cannot be used simultaneously (can they?)
    // Restore the setup of Timer 1 as set by Adafruit's RGBMatrixPanel library
    TCCR1A = _BV(WGM11);
    TCCR1B = _BV(WGM13) | _BV(WGM12) | _BV(CS10);
    ICR1 = 100;
    TIMSK1 |= _BV(TOIE1);
    sei();
  */

  // Show logo
  int col;
  byte p;
  byte img[32 * 13];
  matrix.fillScreen(backgroundColor); // Clear screen
  for (int k = 0; k < 13 * 30; k++)
  {
    img[k] = pgm_read_byte_near(titleImg + k);
  }

  for (byte x = 0; x < 30; x++)
  {
    for (byte y = 0; y < 13; y++)
    {
      p = img[y * 30 + x];
      switch (p)
      {
        // True-to-game colors
        case 0:
          col = matrix.Color333(0, 0, 6);
          break; // Medium blue
        case 1:
          col = matrix.Color333(0, 0, 4);
          break; // Darker Medium blue
        case 2:
          col = matrix.Color333(0, 0, 0);
          break; // Black
        case 3:
          col = matrix.Color333(4, 4, 4);
          break; // White
      }
      matrix.drawPixel(x + 3, y + 9, col);
    }
  }
  matrix.drawPixel(25, 8, matrix.Color333(0, 0, 5));

  /*
  // Draw Johann
  byte x = 18;
  byte y = 23;
  matrix.drawPixel( x - 1, y - 1, matrix.Color444(3, 0, 0));
  matrix.drawPixel( x + 1, y - 1, matrix.Color444(3, 0, 0));
  matrix.drawPixel( x - 1, y + 1, matrix.Color444(3, 3, 3));
  matrix.drawPixel( x + 0, y + 1, matrix.Color444(1, 1, 1));
  matrix.drawPixel( x + 1, y + 1, matrix.Color444(3, 3, 3));
  */

  // Draw Player
  byte x = 10;
  byte y = 8;
  matrix.drawPixel( x + 0, y - 1, matrix.Color444(2, 1, 1));
  matrix.drawPixel( x + 0, y + 0, matrix.Color333(1, 1, 0));
  matrix.drawPixel( x + 1, y + 1, matrix.Color333(1, 1, 0));
  matrix.drawPixel( x - 1, y + 1, matrix.Color333(1, 1, 0));

  // Go on as soon as the joystick button has been pressed
  while (!joy1Fire()) {} // Wait until the player presses the joystick button
}

void showEnding()
{
  // To be done
}

/*
  void issueMelody(byte num)
  {
  if (!audioIsProduced)
  {
    switch (num)
    {
      case X:                        melodyPointer = baddieTouchedMelody; melodyPosition = 0; melodyLength = 9; audioIsProduced = true; break;
      case BONUSITEM_JINGLE:         melodyPointer = bonusCollectedJingle; melodyPosition = 0; melodyLength = 15; audioIsProduced = true; break;
      case ADDITIONALLIFE_JINGLE:    melodyPointer = additionalLifeMelody; melodyPosition = 0; melodyLength = 26; audioIsProduced = true; break;
      default:                       melodyLength = 0; melodyPosition = 0; audioIsProduced= false; break;
    }
  }
  return;
  }
*/

void playMelody()
{
  if (audioIsProduced)
  {
    tone(audio, *(melodyPointer + melodyPosition), 70);
    if (melodyPosition < melodyLength) {
      melodyPosition++;
    } else {
      melodyPosition = 0;
      audioIsProduced = false;
    }
  }
  return;
}

void makeReset()
{
  // Re-install doors and keys, empty the player's pocket (no keys collected)
  for (byte i = 0; i < 4; i++)
  {
    for (byte mapID = 0; mapID < 53; mapID++)
    {
      doorOpened[i][mapID] = false;
    }
     keyCollected[i][mapID] = false;
    numKeysCarrying[i] = 0;
  }
}
  
void loop()
{
  showWelcomeScreen();

  matrix.fillScreen(matrix.Color333(0, 0, 0));
  updateRaster(); // Refresh the raster
  drawPlayfield();
  displayGlowingPlayfield(3, 20);
  placeBaddies();
  drawBaddies();
  drawPlayer();

  lives = NUM_LIVES;
  boolean gameOver = false;
  gameWon = false;

  do // Main game loop
  {
    timer.update();
    if (playerInvincible)
    {
      if (millis() - invincibilityTimer > 5500)
      {
        playerInvincible = false;
      }
    }

    if (checkCollision() == true)
    {
      if (!playerInvincible) { collisionOccurred = true;  }
    }

    if (digitalRead(buttonReset) == LOW) // Reset game
    {
      reset = true;
      delay(300);

      makeReset();
      break;
    }

    if (digitalRead(buttonPause) == LOW) // Pause game
    {
      tone(audio, 1024, 20);
      delay(250);
      do
      {
      }
      while ((!digitalRead(buttonPause) == LOW) && (!joy1Fire()));
      tone(audio, 1024, 20);
      delay(250);
    }

    if (lives == 0)
    {
      gameOver = true;
    }

    if (collisionOccurred || playerHit)
    {
      lives--;

      // Player has collided with something nasty (wall, baddie, shot)
      playerLosesLife(playerX, playerY);
      delay(2000);

      // Place the player at the start position
      playerSimpleShotActive = false;
      playerHit = false;
      // Changed: no respawn position; instead, player continues where he/she died, is granted some seconds of invulnerability 
      //playerX = playerX_start[mapID];
      //playerY = playerY_start[mapID];
      playerX_old = playerX;
      playerY_old = playerY;
         
      for (byte i = 0; i < numBaddiesMax - 1; i++)
      {
        baddieX[i] = baddie_initialX[i];
        baddieY[i] = baddie_initialY[i];

        baddieShotActive[i] = false;
        baddieShotX[i] = -2;
        baddieShotY[i] = -2;
      }

      matrix.fillScreen(matrix.Color333(0, 0, 0)); // Reset

      // Reset flags
      collisionOccurred = false;
      playerHit = false;
      drawPlayfield();

      // As the player has died, make him/her invincible for five seconds to allow for escape
      playerInvincible = true; // Let the player be invincible for five seconds
      invincibilityTimer = millis(); // Reset five seconds invincibility timer
      
    } // Either the player ran into a fence or a (special) baddie, or he/she was hit by gun shot
  }
  while ((!reset) && (!gameOver) && (!gameWon));

  if (gameWon) 
  {
    showEnding();
  }

  mapID = 0;
  updateRaster();
  animCtr = 0;
  
  reset = false;
  numShotsLeft = 0;
  matrix.fillScreen(matrix.Color333(0, 0, 0));
  // The following is copied from above
  playerSimpleShotActive = false;
  playerHit = false;
  playerX = playerX_start[mapID];
  playerY = playerY_start[mapID];
  playerX_old = playerX;
  playerY_old = playerY;
  
  for (byte i = 0; i < numBaddiesMax - 1; i++)
  {
    baddieX[i] = baddie_initialX[i];
    baddieY[i] = baddie_initialY[i];

    baddieShotActive[i] = false;
    baddieShotX[i] = -2;
    baddieShotY[i] = -2;
  }

  for (byte i = 0; i < 4; i++) {
    numKeysCarrying[i] = 0;
  }
  for (byte room = 0; room < 53; room++)
  {
    gunCollected[room] = false;

    for (byte c = 0; c < 4; c++)
    {
      doorOpened[c][room] = false;
      keyCollected[c][room] = false;
    }
  }
}

